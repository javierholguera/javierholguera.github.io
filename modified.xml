<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>El Javi</title>
    <description></description>
    <link>http://javierholguera.com/</link>
    <atom:link href="http://javierholguera.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 03 Nov 2016 15:26:56 +0000</pubDate>
    <lastBuildDate>Thu, 03 Nov 2016 15:26:56 +0000</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Incompatible AVRO schema in Schema Registry</title>
        <description>&lt;p&gt;My company uses &lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt; as the spine for its next-generation architecture. Kafka is a distributed append-only log that can be used as a pub-sub mechanism. We use Kafka to publish events once business processes have completed successfully, allowing a high degree of decoupling between producers and consumers.&lt;/p&gt;

&lt;p&gt;These events are encoded using &lt;a href=&quot;http://avro.apache.org&quot;&gt;Avro schemas&lt;/a&gt;. Avro is a binary serialization format that enables a compact representation of data, much more than, for instance, JSON. Given the high volume of events we publish to kafka, using a compact format is critical.&lt;/p&gt;

&lt;p&gt;In combination with Avro we use &lt;a href=&quot;https://github.com/confluentinc/schema-registry&quot;&gt;Confluent’s Schema Registry&lt;/a&gt; to manage our schemas. The registry provides a RESTful API to store and retrieve schemas.&lt;/p&gt;

&lt;h3 id=&quot;compatibility-modes&quot;&gt;Compatibility modes&lt;/h3&gt;

&lt;p&gt;The Schema Registry can control what schemas get registered, ensuring a certain level of compatibility between existing and new schemas. This compatibility can be set to one of the next four modes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;BACKWARD&lt;/strong&gt;: a new schema is allowed if it can be used to read all data ever published into the corresponding topic.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FORWARD&lt;/strong&gt;: a new schema is allowed if it can be used to write data that all previous schemas would be able to read.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FULL&lt;/strong&gt;: a new schema that fullfils both registrations.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NONE&lt;/strong&gt;: a schema is allowed as long as it is valid Avro.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, Schema Registry sets BACKWARD compatibility, which is most likely your preferred option in PROD environment, unless you want to have a hard time with your consumers not quite understanding events published with a newer, incompatible version of the schema.&lt;/p&gt;

&lt;h3 id=&quot;incompatible-schemas&quot;&gt;Incompatible schemas&lt;/h3&gt;

&lt;p&gt;In development phase it is perfectly fine to replace schemas with others that are incompatible. Schema Registry will prevent updating the existing schema to an incompatible newer version unless we change its default setting.&lt;/p&gt;

&lt;p&gt;Fortunately Schema Registry offers a &lt;a href=&quot;http://docs.confluent.io/1.0/schema-registry/docs/api.html&quot;&gt;complete API&lt;/a&gt; that allows to register and retrieve schemas, but also to change some of its configuration. More specifically, it offers a &lt;code class=&quot;highlighter-rouge&quot;&gt;/config&lt;/code&gt; endpoint to &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; new values for its compatibility setting.&lt;/p&gt;

&lt;p&gt;The following command would change the compatibility setting to NONE for all schemas in the Registry:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -X PUT http://your-schema-registry-address/config 
     -d '{&quot;compatibility&quot;: &quot;NONE&quot;}'
     -H &quot;Content-Type:application/json&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This way next registration would be allowed by the Registry as long as the newer schema were valid Avro. The configuration can be set for an specific schema too, simply appending the name (i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;/config/subject-name&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Once the incompatible schema has been registered, the setting should be set back to a more cautious value.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;The combination of Kafka, Avro and Schema Registry is a great way to store your events in the most compact way possible, while still retains the ability to evolve the corresponding schemas.&lt;/p&gt;

&lt;p&gt;However some of the limitations that the Schema Registry imposes make less sense on a development environment. On some occassions, making incompatible changes in a simple way is necessary and recommendable.&lt;/p&gt;

&lt;p&gt;The Schema Registry API allows changing the compatibility setting to accept schemas that, otherwise, would be rejected.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate>
        <link>http://javierholguera.com/2016/04/19/incompatible-avro-schema</link>
        <guid isPermaLink="true">http://javierholguera.com/2016/04/19/incompatible-avro-schema</guid>
        
        <category>kafka</category>
        
        <category>avro</category>
        
        <category>schema registry</category>
        
        
        <category>Kafka</category>
        
      </item>
    
      <item>
        <title>FAQ: Story points</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2015/12/planning_poker.png&quot;&gt;&lt;img class=&quot;wp-image-2031 alignnone&quot; src=&quot;http://javierholguera.com/assets/planning_poker-300x150.png&quot; alt=&quot;planning_poker&quot; width=&quot;762&quot; height=&quot;381&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Story points are quite old, but there are still way too many misunderstandings around them. Below I'm going to try to shed some light on the most common doubts around them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are Story Points?&lt;/strong&gt;&lt;br /&gt;
It's a way to measure the effort necessary to implement a story, where a story is some requirement that an Agile team is going to convert into working software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do they work?&lt;/strong&gt;&lt;br /&gt;
You have a scale of values, you define a baseline (a really simple story that you would consider requires an effort of 1 point) and then you estimate everything relatively to that baseline story. If a story requires the same or less effort than your baseline, you give it 1 point. If it is roughly twice as difficult, you assign 2 points. The values in the scale have to be spacious enough to make sure you don't try to estimate &quot;too precisely&quot;. Therefore many teams choose Fibonacci series as their scale (1, 2, 3, 5, 8, etc).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wait a minute, what do you mean by &quot;don't try to estimate too precisely&quot;? And why not just estimating using time?&lt;/strong&gt;&lt;br /&gt;
I mean exactly that. When you use this technique, you are implicitly recognizing that you can't provide meaningful estimations with the level of detail that a time estimation requires. In plain English, you recognize your estimations in time are not accurate, therefore they don't have any value.&lt;/p&gt;
&lt;p&gt;Instead you use a more high-level, less-precise measure like story points. Even if it is less precise than a time-based estimation, it is more valuable because it's more stable and, overtime, it will be more helpful to forecast team and project progress.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Is effort all I have to take into account when estimating with story points?&lt;/strong&gt;&lt;br /&gt;
Not necessarily, although it is the most important bit. Other things that you may consider are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How clear are the requirements and acceptance criteria in the story?&lt;/li&gt;
&lt;li&gt;Does it look like they may be many technical or business unknowns that will be discovered during the implementation phase?&lt;/li&gt;
&lt;li&gt;Is there any technical risk? For example, are you using a technology for the first time?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The more question marks around the story, the higher the number of story points.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can I sum story points?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No, you can't. They don't represent numbers, they represent buckets. That means that, when you have a story that is the same or less effort  than your base line, you put in the 1-point bucket. When it's the same or less than twice the effort for your base line, you throw it to the 2-point bucket, etc. You get the point.&lt;/p&gt;
&lt;p&gt;Also quite often the amount of time require to implement a 3-point story will be much more than 50% more the effort of a 2-point story. There is no linearity, not to mention that the higher the bucket, the &lt;a href=&quot;http://www.mountaingoatsoftware.com/blog/seeing-how-well-a-teams-story-points-align-from-one-to-eight&quot;&gt;wilder the oscillation in implementation time&lt;/a&gt; (which makes sense because the higher the risk too).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Is Story Points the only way to measure stories and forecast?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No, there are other metrics. T-shirt sizes is quite common too. Some people also consider using &quot;ideal days&quot;. This one is, more or less, a representation of how much work you can do in a perfect day, without meetings, without distractions and without any other problem. Then you assign those ideal days to stories and, if you're working on sprints, over time you can measure how many actual ideal days your team has per sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do I have to use Story Points if I do Scrum?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not at all. If you check the Scrum.org Scrum Guide, &lt;a href=&quot;http://www.scrumguides.org/scrum-guide.html&quot;&gt;story points aren't mention anywhere&lt;/a&gt;. That makes all the sense, because contrary to what many people think, Scrum is a quite loose framework (not a process) that you have to fill in with your own practices to come up with a development process. Actually, years ago the Guide didn't even mention estimations. It just mentioned your backlog should be ordered and it was up to the Product Owner to discover what that order should be.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why should I use Story Points then?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You shouldn't if you don't know why you would use them. And you would use them if you want to provide some forecasting regarding your project. Basically, been able to answer the question: &quot;when is this going to be done?&quot;. Story Points help you answer that question because, overtime, you get some sense of how many points you can deliver per unit of time, where that unit of time is usually your sprint size in weeks. Based on that, you can be reasonable confident about how many stories you can get done and when, on a relatively close time horizon. Don't try to estimate a massive project using story points before even starting it, it won't work. You won't have enough understanding of the project, the stakeholders and the technology and your estimations will have zero value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why should I estimate in the first place?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, if you are a developer, estimating doesn't add any value to you; zero. You just want to get a list of things to do and nail them and you don't need to communicate in advance when they'll be done, right? However, some people would argue that part of been a professional engineer includes providing meaningful estimations regarding delivery of software to the rest of the business. In &lt;a href=&quot;http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/&quot;&gt;better words than mine&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Avoiding responsibility for estimates is another way of saying, “I’m not ready to be relied upon for building critical pieces of infrastructure.” All businesses rely on estimates, and all engineers working on a project are involved in &lt;a title=&quot;Resilience Engineering Part II: Lenses&quot; href=&quot;http://www.kitchensoap.com/2012/03/30/the-devils-in-the-details/&quot; target=&quot;_blank&quot;&gt;Joint Activity&lt;/a&gt;, which means that they have a responsibility to others to make themselves &lt;em&gt;interpredictable&lt;/em&gt;. In general, mature engineers are comfortable with working within some nonzero amount of uncertainty and risk.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So man up and come up with some respetable estimations that you're willing to commit to.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Should Management measure team's productivity using Story Points? &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NEVER. That is one of the biggest mistakes that can be done. If you do so, you're going to make two mistakes in one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You will ruin story points as a tool to estimate. Eventually every human being tends to trick any system rules, even unconsciously. If you measure people's productivity with points, they will just inflate their estimations to make it look like more points are delivered per sprint, therefore the team is doing more. Wrong and useless.&lt;/li&gt;
&lt;li&gt;You'll miss the opportunity to use a proper and useful measure, like business value. Not saying that business value is easy to measure, though, but definitively worth trying instead of measuring something that is completely irrelevant and easy to trick.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What's the difference with Planning Poker?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Planning Poker is just a estimation technique, not a estimation measure. You use planning poker as a way to take advance of the &quot;Wisdom of Crowds&quot;. Planning Poker is useful because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Estimations are done and presented without knowing other members' opinion. Therefore more junior/shy members won't be influenced by estimations presented by senior/stronger players.&lt;/li&gt;
&lt;li&gt; If estimations don't match, a healthy debate is triggered where more information is brought into the discussion for those that have bigger/smaller numbers. That benefits the final estimation and also helps all team benefit from the insights of each member.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Is that all?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not really, there are many other things that are interesting on this topic, like trying to correlate points with time (bad idea IMHO) , what a good scale for points should look like, what to do if you realize after implementing a story that it was over/under estimated, how to manage scope creep, etc. Maybe for another day.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 20:41:44 +0000</pubDate>
        <link>http://javierholguera.com/2015/12/03/faq-story-points</link>
        <guid isPermaLink="true">http://javierholguera.com/2015/12/03/faq-story-points</guid>
        
        <category>agile</category>
        
        <category>scrum</category>
        
        <category>story points</category>
        
        
        <category>Agile</category>
        
      </item>
    
      <item>
        <title>Knockout: bindear booleano a radio button</title>
        <description>&lt;p&gt;Knockout JS es un framework realmente útil para hacer páginas web dinámicas. Últimamente he tenido la oportunidad de utilizarlo bastante y, siendo un total inexperto, puedo decir que facilita mucho las cosas y tiene una excelente documentación.&lt;/p&gt;
&lt;p&gt;Sin embargo, recientemente me encontré en una situación en la que tuve que invertir bastante tiempo para conseguir hacer funcionar un binding entre un par de radio buttons, una propiedad JavaScript del viewModel de Knockout y la correspondiente propiedad en el modelo MVC que recibía mi acción del controlador.&lt;/p&gt;
&lt;h4&gt;El error&lt;/h4&gt;
&lt;p&gt;El error se manifestaba simplemente no funcionando el binding entre mi propiedad JS del viewModel y los correspondiente radio buttons. En un primer momento el binding parecía ir bien, pero al enviar la página de vuelta al servidor y retornar al mismo punto por existir algún error en la validación del modelo MVC, el binding no saltaba y los radio buttons no se marcaban según los valores que el usuario hubiera elegido.&lt;/p&gt;
&lt;h4&gt;La razón&lt;/h4&gt;
&lt;p&gt;Los radio buttons definen sus valores como strings mientras que la propiedad del modelo MVC era booleano. Entre medias Knockout intentaba “lidiar” entre ambas, pero al recibir el modelo MVC de vuelta tras la validación, su valor booleano no bindeaba correctamente con los radio buttons por ser sus valores cadenas en lugar de booleanos también.&lt;/p&gt;
&lt;h4&gt;La solución&lt;/h4&gt;
&lt;p&gt;Probablemente haya múltiples, pero en mi caso la más sencilla fue utilizar un binding custom entre los radio buttons con valores string y la propiedad JS del viewModel.&lt;/p&gt;
&lt;p&gt; https://gist.github.com/javierholguera/7bad4fa6e6a4e1aa2ffb
&lt;p&gt;Utilizando un interceptor entre los valores que llegan de los radio buttons y la propiedad, podemos convertir en ambos sentidos entre booleanos y strings convenientemente.&lt;/p&gt;
&lt;p&gt;El custom binding se aplica sobre el binding “checked” habitual de los radio buttons, de forma que podemos reaprovechar todo el mecanismo ya existente.&lt;/p&gt;
&lt;h4&gt;Referencias&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10510683/knockoutjs-version-2-1-0-bind-boolean-value-to-select-box&quot;&gt;StackOverflow - Knockoutjs (version 2.1.0): bind boolean value to select box&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Jan 2015 17:42:50 +0000</pubDate>
        <link>http://javierholguera.com/2015/01/09/knockout-bindear-booleano-a-radio-button</link>
        <guid isPermaLink="true">http://javierholguera.com/2015/01/09/knockout-bindear-booleano-a-radio-button</guid>
        
        <category>Binding</category>
        
        <category>boolean</category>
        
        <category>custom binding</category>
        
        <category>knockout</category>
        
        <category>radio button</category>
        
        
        <category>Knockout</category>
        
      </item>
    
      <item>
        <title>Por qué hacemos self = this en JS?</title>
        <description>&lt;p&gt;Cuando empecé a utilizar Knockout JS, descubrí que existía una cierta convención según la cual, al crear la función Constructor del modelo que se “&lt;em&gt;bindea&lt;/em&gt;” con Knockout, la primera línea siempre era la siguiente:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;var self = this;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No tenía ni idea de porqué se hacía esto, pero entendía que era necesario para, posteriormente, poder definir y añadir los distintos métodos y propiedades que formaban el modelo.&lt;/p&gt;
&lt;p&gt;Ahora, gracias a los vídeos de “JavaScript The Good Parts” de Douglas Crockford en Pluralsight, por fin sé el porqué de esta misteriosa pero indispensable línea. Y las razones son realmente dos.&lt;/p&gt;
&lt;h4&gt;Una función anidada no tiene acceso al &lt;em&gt;this&lt;/em&gt; externo&lt;/h4&gt;
&lt;p&gt;Como bien explica Douglas, cuando dentro de una función definimos otra función, la función anidada no tiene acceso al puntero &lt;em&gt;this&lt;/em&gt; que la función externa ha recibido.&lt;/p&gt;
&lt;p&gt;Para superar esta limitación, en ocasiones veremos código en el que se define una línea como la siguiente.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;var that = this;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Con esto lo que conseguimos es capturar en la función superior el puntero &lt;em&gt;this&lt;/em&gt;, para posteriormente permitir a la función anidada acceder a la variable &lt;em&gt;that&lt;/em&gt; que contendrá el mismo valor que contenía &lt;em&gt;this&lt;/em&gt; cuando fue capturado.&lt;/p&gt;
&lt;p&gt;Exactamente la misma técnica es la que estaremos aplicando al capturar &lt;em&gt;this&lt;/em&gt; en una variable de nombre &lt;em&gt;self&lt;/em&gt;. De esta forma las distintas funciones que crearemos como parte de la definición del modelo, podrán acceder al &lt;em&gt;this&lt;/em&gt; que originalmente recibió la función constructora.&lt;/p&gt;
&lt;p&gt;Pero, por qué querríamos acceder a ese &lt;em&gt;this&lt;/em&gt; original que la función constructora recibe? Aquí entra en juego el segundo principio que define esta técnica.&lt;/p&gt;
&lt;h4&gt;La función constructora recibe el nuevo objeto en &lt;em&gt;this&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Esta es la otra clave de esta técnica. Cuando una función se invoca con el operador &lt;em&gt;new&lt;/em&gt; (como hacemos al crear el modelo), se crea un nuevo objeto y se asigna al puntero &lt;em&gt;this&lt;/em&gt; que recibe la función que estamos invocando con el operador.&lt;/p&gt;
&lt;p&gt;Esto a efectos prácticos significa que el &lt;em&gt;this&lt;/em&gt; que recibiremos en la función constructora es el propio nuevo objeto al que estaremos añadiendo propiedades y métodos como parte del código de dicha función.&lt;/p&gt;
&lt;p&gt;De este peculiar modo nuestra función constructora no sólo inicializa el objeto como haría un constructor de un lenguaje estático como Java o C#, sino que también añade la propia funcionalidad al asignar funciones y propiedades.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 17:55:54 +0000</pubDate>
        <link>http://javierholguera.com/2015/01/01/por-qu-hacemos-self-this-en-js</link>
        <guid isPermaLink="true">http://javierholguera.com/2015/01/01/por-qu-hacemos-self-this-en-js</guid>
        
        <category>Javascript KnockoutJS JS this</category>
        
        
        <category>Javascript</category>
        
      </item>
    
      <item>
        <title>Routing with WCF</title>
        <description>&lt;p&gt;Today we face a problem in Production environment. We needed to route some WCF requests from one “publicly visible” server to an internal one. A typical routing scenario.&lt;/p&gt;
&lt;p&gt;Fortunately these requests were received in a WCF service and this technology has a built-in routing feature since 4.0 version. To use it we don’t need to change any code, it is enough to modify the app.config/web.config of the services. Here we can see how to use it, step by step. All these XML code will be place inside &lt;em&gt;system.serviceModel&lt;/em&gt; tag&lt;/p&gt;
&lt;h4&gt;First Step – Define the new Service&lt;/h4&gt;
&lt;p&gt;We have to define a new Routing service that will receive all the requests. It will, later, internally dispatch them depending on certain routing rules. The XML necessary is:&lt;/p&gt;
&lt;pre&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;System.ServiceModel.Routing.RoutingService&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;behaviorConfiguration&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;routerConfig&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;endpoint&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;&quot;&lt;/span&gt;
              &lt;span class=&quot;attr&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;basicHttpBinding&quot;&lt;/span&gt;
              &lt;span class=&quot;attr&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;System.ServiceModel.Routing.IRequestReplyRouter&quot;&lt;/span&gt;
              &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;reqReplyEndpoint&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Two things that we may notice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The services needs a behavior configuration. In this configuration, later, we will define the routing table.&lt;/li&gt;
&lt;li&gt;We don’t define an address because we assume the service will be deployed in a IIS server. If we want to do some tests with Casinni, we will need to define an address.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Second Step – SVC hosting file for the new service&lt;/h4&gt;
&lt;p&gt;Since WCF 4.0 we don’t need the SVC files to host a WCF service, we can define them in app.config/web.config and the internal plumbery of WCF/IIS is smart enough to allow us calling the corresponding URL as if the SVC file really exists. This is the XML necessary for that:&lt;/p&gt;
&lt;pre&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;serviceHostingEnvironment&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;serviceActivations&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;relativeAddress&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;RiskManagementServiceUAT.svc&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;System.ServiceModel.Routing.RoutingService, System.ServiceModel.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;serviceActivations&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;serviceHostingEnvironment&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Two more points to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The relative address must contain an extension. For example, if we define it as “RiskManagementService.UAT”, without SVC extension, it will fail.&lt;/li&gt;
&lt;li&gt;The service needs to specify the complete qualify name in this case, but it is not usual. In other projects that we have used this “virtual SVC” system, it was not necessary. Apparently there is some kind of limitation with the RoutingService.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Third Step – Service behavior configuration&lt;/h4&gt;
&lt;p&gt;We referenced a service behavior when we defined the service in step 1. Below we can see that configuration, that will need to indicate what routing table we have to use.&lt;/p&gt;
&lt;pre&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;behaviors&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;serviceBehaviors&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;behavior&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;routerConfig&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;serviceMetadata&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;httpGetEnabled&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;serviceDebug&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;includeExceptionDetailInFaults&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;routing&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;routeOnHeadersOnly&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;filterTableName&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;routingTable&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;serviceBehaviors&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;behaviors&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Things to consider here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be sure the name of the behavior matches what you set when defined the service.&lt;/li&gt;
&lt;li&gt;serviceMetadata may not be necessary in a production environment, if you don’t expect new clients to be created from your service WSDL.&lt;/li&gt;
&lt;li&gt;serviceDebug MUST NOT be activated in production environment. It is a security risk.&lt;/li&gt;
&lt;li&gt;In the routing tag we will indicate the name for the routing table to be used in this RoutingService service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Fourth Step – Routing table&lt;/h4&gt;
&lt;p&gt;We are getting close to the end… We need to define the routing table. There is complex patterns that we may want to follow, like taking into account headers or contents in the messages. It is really useful for versioning, load-balancing and similar stuff. However, in our concrete scenario we only want to redirect all messages to the internal server, so we didn’t need a complex solution. This was our table:&lt;/p&gt;
&lt;pre&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;routing&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;matchAll&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;filterType&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;MatchAll&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;filterTables&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;filterTable&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;routingTable&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;filterName&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;matchAll&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;endpointName&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;RiskService&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;filterTable&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;filterTables&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;routing&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Three important points here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Under filters tag we will define all possible filters. In this case we use the MatchAll filter. In bibliography there is a link for all filter types in WCF.&lt;/li&gt;
&lt;li&gt;Under filterTables tag we define all the possible tables. We may have different tables for different routers. In our case, we define a “routingTable” in the service behavior in Step 3 and here it is.&lt;/li&gt;
&lt;li&gt;As part of every table we will bound filters with endpoints. This is a very flexible approach, we can define as many possible filters as we may need for all our endpoints and later just correlate them in the filter table.&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;filterName will be the name of the filter to apply.&lt;/li&gt;
&lt;li&gt;endpointName will be the name of the endpoint where the message will be routed when the filter is matched. This endpoint corresponds to a new element defined in the next step.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;h4&gt;Fifth Step – Client endpoints&lt;/h4&gt;
&lt;p&gt;The router is a sum of input messages, routing logic and destination services. We have defined 2 of 3. In this point we will define what services will receive the messages once the routing is done. Here it is is the XML.&lt;/p&gt;
&lt;pre&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;endpoint&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;RiskService&quot;&lt;/span&gt;
            &lt;span class=&quot;attr&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;http://appserver5/RiskManagementTool/RiskManagementService.svc&quot;&lt;/span&gt;
            &lt;span class=&quot;attr&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;basicHttpBinding&quot;&lt;/span&gt;
            &lt;span class=&quot;attr&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;So what do we have here? Just being “client” of the service where we want to send messages under certain criteria defined in Step 4. Pay attention to the name that we give to the endpoint, because this name must match the value for endpointName in the entries of the filter table defined in Step 4.&lt;/p&gt;
&lt;h4&gt;Conclusions&lt;/h4&gt;
&lt;p&gt;WCF is not a easy technology, but it is really powerful and, with enough knowledge and patience there is a great number of scenarios that you can cover with just defining appropriate XML configuration. No coding, no compiling, no deploying, just playing with the app.config/web.config and you get a very powerful Routing Service that is able to route base on headers, message content, protocol, etc.&lt;/p&gt;
&lt;h4&gt;Bibliography&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developers.de/blogs/damir_dobric/archive/2010/02/09/file-less-activation-of-routing-service.aspx&quot;&gt;Problem with File-less activation of Routing Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.prideparrot.com/blog/archive/2011/8/routing_service_and_content_based_routing&quot;&gt;Routing Service and Content Based Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dotnetcurry.com/ShowArticle.aspx?ID=470&quot;&gt;Creating Routing Service using WCF 4.0, .NET Framework 4.0 and Visual Studio 2010 RC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 18 Jul 2012 13:21:45 +0000</pubDate>
        <link>http://javierholguera.com/2012/07/18/routing-with-wcf</link>
        <guid isPermaLink="true">http://javierholguera.com/2012/07/18/routing-with-wcf</guid>
        
        
      </item>
    
      <item>
        <title>8 señas de una Aplicación Metro (II)</title>
        <description>&lt;p&gt;Siguiendo con la serie iniciada hace un par de días sobre las señales de identidad de una aplicación Metro, hoy continuo con la segunda entrega.&lt;/p&gt;
&lt;h6&gt;Rapidez y Fluidez (Fast &amp;amp; Fluid)&lt;/h6&gt;
&lt;p&gt;Este es uno de los aspectos más importantes del diseño de una Aplicación Metro y, en general, de una aplicación táctil. Se basa en cuatro importantes bases.&lt;/p&gt;
&lt;p&gt;El rendimiento es más importante todavía en una aplicación táctil, puesto que no existe un nivel de indirección como ocurre con el ratón o con el teclado. Una aplicación táctil que no responde inmediatamente hace sentir al usuario que su máquina está muerta.&lt;/p&gt;
&lt;p&gt;También es muy importante el uso de animaciones para elevar la percepción de calidad de la aplicación por parte del usuario. Permite elaborar interfaces fluidas en las que los elementos vienen de algún lugar y van a otro. Por suerte contaremos con una amplia colección de animaciones en WinRT, con las que gratis y sin complicaciones podremos añadir ese toque de calidad a nuestras aplicaciones Metro.&lt;/p&gt;
&lt;p&gt;El tercer y último punto donde se asientan el principio de Fast &amp;amp; Fluid es la definición de un nuevo lenguaje para la interfaz táctil. Utilizar estos gestos bien conocidos ayudará al usuario a familiarizarse con la interfaz de la aplicación muy rápidamente, lo que redunda en beneficio de la propia aplicación. En la imagen inferior podemos ver los nuevos gestos.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2012/04/image.png&quot;&gt;&lt;img style=&quot;border-top: 0px;border-right: 0px;border-bottom: 0px;padding-top: 0px;padding-left: 0px;border-left: 0px;padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://javierholguera.com/assets/image_thumb.png&quot; width=&quot;645&quot; height=&quot;322&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Para terminar, las aplicaciones Metro se deben diseñar pensando primero en el interfaz táctil. Por otra parte, si se utilizan los controles estándar que aparecen con Windows 8, será posible tener también una interfaz 100% usable con teclado y ratón, “gratis”. Es importante, sobretodo, no separar las interfaces táctil y de ratón, creando bases de código distintas para ambas.&lt;/p&gt;
&lt;h6&gt;Otras entregas&lt;/h6&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/index.php/2012/04/03/8-seas-de-una-aplicacin-metro/&quot;&gt;8 señas de una Aplicación Metro I: Diseño con Estilo Metro (Metro style design)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Apr 2012 20:19:30 +0000</pubDate>
        <link>http://javierholguera.com/2012/04/18/8-seas-de-una-aplicacin-metro-ii</link>
        <guid isPermaLink="true">http://javierholguera.com/2012/04/18/8-seas-de-una-aplicacin-metro-ii</guid>
        
        <category>Diseño</category>
        
        <category>Metro Apps</category>
        
        
        <category>Metro Apps</category>
        
      </item>
    
      <item>
        <title>[Metro] Diseño Metro–Principios y Personalidad</title>
        <description>&lt;p&gt;Rebuscando por los muchos e interesantes vídeos que hay en Channel 9 del Build de Septiembre ‘11 encontré éste, en el que se describen los principios sobre los que se fundamenta el estilo de diseño Metro.&lt;/p&gt;
&lt;p&gt;&lt;iframe style=&quot;height:360px;width:633px&quot; src=&quot;http://channel9.msdn.com/Events/BUILD/BUILD2011/APP-395T/player?w=633&amp;h=360&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;En el vídeo se explica que Metro tiene 3 influencias clave:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Diseño Moderno (Escuela Bauhaus), que se centra en eliminar todo lo que resulta innecesario en un diseño se centra en la funcionalidad. En su momento esta corriente surgió como reacción ante el sobre-adorno, algo que podría justificarse también hoy en día viendo el nivel de “glossy” de algunas interfaces.&lt;/li&gt;
&lt;li&gt;Estilo tipográfico internacional (Diseño Suizo): en este aspecto son 4 las razones a destacar.
&lt;ul&gt;
&lt;li&gt;Tipografía clara, limpia, alto contraste, colores planos&lt;/li&gt;
&lt;li&gt;Simetrías y jerarquías&lt;/li&gt;
&lt;li&gt;Lenguaje universal&lt;/li&gt;
&lt;li&gt;Fotografías en lugar de ilustraciones o gráficos, para aportar realidad&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Diseño en Movimiento (Motion), que permite darle vida al resultado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estas 3 influencias clave terminan fundamentando los 5 principios sobre los que se sustentará Metro:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Orgullo del trabajo detallista, casi artesanal.&lt;/li&gt;
&lt;li&gt;Rapidez y fluidez.&lt;/li&gt;
&lt;li&gt;Auténticamente digital. El mejor ejemplo lo tenemos en los nuevos iconos.&lt;/li&gt;
&lt;li&gt;Hacer más con menos.&lt;/li&gt;
&lt;li&gt;Ganar como uno, adaptándose, por ejemplo, a las estructuras que predefine Windows 8. Aporta homogeneidad y coherencia.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En fin, si queréis saber más de cada punto, tendréis que ver el vídeo &lt;img class=&quot;wlEmoticon wlEmoticon-smile&quot; style=&quot;border-style: none;&quot; src=&quot;http://javierholguera.com/assets/wlEmoticon-smile.png&quot; alt=&quot;Smile&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Apr 2012 18:07:46 +0000</pubDate>
        <link>http://javierholguera.com/2012/04/10/metro-diseo-metroprincipios-y-personalidad</link>
        <guid isPermaLink="true">http://javierholguera.com/2012/04/10/metro-diseo-metroprincipios-y-personalidad</guid>
        
        <category>Diseño</category>
        
        <category>Metro</category>
        
        <category>Metro Apps</category>
        
        
        <category>Metro Apps</category>
        
      </item>
    
      <item>
        <title>8 señas de una Aplicación Metro (I)</title>
        <description>&lt;p&gt;Durante el Build Jesen Harris, del equipo de Experiencia de Usuario de Windows, impartió una de las charlas más interesantes. En ella explicó las 8 señas de identidad de una Aplicación Metro.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Estas 8 señas son las siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Diseño con estilo Metro &lt;/li&gt;
&lt;li&gt;Rapidez y fluidez &lt;/li&gt;
&lt;li&gt;Partirse y redimensionarse con belleza &lt;/li&gt;
&lt;li&gt;Utilizar los contratos adecuados &lt;/li&gt;
&lt;li&gt;Invertir en un gran “Tile” &lt;/li&gt;
&lt;li&gt;Sentir la aplicación conectada y viva &lt;/li&gt;
&lt;li&gt;Mover datos a la nube &lt;/li&gt;
&lt;li&gt;Abrazar los principios de Metro &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En este post y sucesivos posts iremos analizando qué significan estos principios y cómo se traducen tanto desde un punto de vista de diseño, como de programación.&lt;/p&gt;
&lt;h6&gt;Diseño con Estilo Metro (Metro style design)&lt;/h6&gt;
&lt;p&gt;Las aplicaciones Metro van a tener una “silueta” común, entendida como una serie de principios y guías de estilo que todas deberían respetar para evitar que el usuario sienta incomodidad al pasar de una a otra.&lt;/p&gt;
&lt;p&gt;Seguir este estilo resultará sencillo gracias a las plantillas y otros recursos que vamos a tener a nuestra disposición. Bellas tipografías, espacios entre elementos estándar, etc. Todo ello podremos lograrlo con poco esfuerzo. Con estas &lt;strong&gt;plantillas tendremos aplicaciones armoniosas con el estilo Metro&lt;/strong&gt; y entre ellas.&lt;/p&gt;
&lt;p&gt;Otro punto importante de las aplicaciones Metro es &lt;strong&gt;primar el contenido sobre el “chrome” o marco&lt;/strong&gt;, entendido como la ventana y toda su decoración y elementos. Este tipo de aplicaciones clásicas de Windows seguirán teniendo su espacio para aplicaciones ricas orientadas a escritorio, teclado y ratón.&lt;/p&gt;
&lt;p&gt;Otro punto a considerar son los bordes de la aplicación, que van a coincidir con los bordes de la pantalla puesto que las aplicaciones Metro se ejecutan a pantalla completa por defecto. Los bordes izquierdo y derecho van a ser para el sistema operativo, siendo el izquierdo el encargado de mostrarnos las ventanas ya abiertas y el derecho los “charms” principales.&lt;/p&gt;
&lt;p&gt;Sin embargo los bordes superior e inferior son para que la aplicación haga el uso que crea conveniente de ellos. En estos bordes las aplicaciones deben poner la mayoría de sus comandos en barras en estos bordes, barras que aparecerán y desaparecerán dinámicamente y que evitarán estropear el contenido. Por supuesto aquellos comandos que tengan un uso muy habitual deben ir a la ventana principal como siempre.&lt;/p&gt;
&lt;p&gt;Otro aspecto a tener en cuenta es que estas aplicaciones van a utilizarse en muchas ocasiones con los dedos a través del interfaz táctil, por lo que es &lt;strong&gt;recomendable seguir algunas pautas, como colocar controles en los bordes, que son lugares mucho más accesibles&lt;/strong&gt; según los estudios de usabilidad realizados por Microsoft.&lt;/p&gt;
&lt;h6&gt;Otras Entregas&lt;/h6&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/index.php/2012/04/18/8-seas-de-una-aplicacin-metro-ii/&quot;&gt;8 señas de una Aplicación Metro II: Rapidez y Fluidez (Fast &amp;amp; Fluid)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Apr 2012 19:27:27 +0000</pubDate>
        <link>http://javierholguera.com/2012/04/03/8-seas-de-una-aplicacin-metro</link>
        <guid isPermaLink="true">http://javierholguera.com/2012/04/03/8-seas-de-una-aplicacin-metro</guid>
        
        <category>Diseño</category>
        
        <category>Metro Apps</category>
        
        
        <category>Metro Apps</category>
        
      </item>
    
      <item>
        <title>Instalar Windows Developer Preview</title>
        <description>&lt;p&gt;Ahora que se acerca el lanzamiento de la nueva versión de Windows 8 (sorprendentemente bautizada como Windows Consumer Preview, ¿dónde han quedado las “betas”?) es un buen momento para recapitulizar cómo podemos instalar una de estas versiones de evaluación junto con nuestro Windows 7 de trabajo diario, sin llorar por la pérdida de información.&lt;/p&gt;
&lt;h5&gt;Distintas opciones&lt;/h5&gt;
&lt;p&gt;Existen varias opciones para instalar Windows Developer Preview, tal como nos enumera Scott Haselman en este post de su blog. A la sazón serían:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solución de virtualización, como VMWare o Virtual Box.  &lt;/li&gt;
&lt;li&gt;Instalarlo en una máquina en solitario.  &lt;/li&gt;
&lt;li&gt;Quitarle el disco duro a una máquina y meter uno nuevo para instalar en él.  &lt;/li&gt;
&lt;li&gt;Arranque dual.  &lt;/li&gt;
&lt;li&gt;Arrancar con hardware real usando VHD (Virtual Hard Disk). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Coincido con Haselman en que la última es la mejor de todas las opciones, puesto que es la única que nos garantiza un rendimiento muy cercano al de una instalación directa contra el “hierro”, al tiempo que nos ahorra todos los inconvenientes de hacer una instalación 100% real.&lt;/p&gt;
&lt;h5&gt;Pasos&lt;/h5&gt;
&lt;p&gt;Veamos qué pasos tenemos que seguir para hacer esta instalación con tecnología VHD&lt;/p&gt;
&lt;h6&gt;Paso 1 – De ISO a USB&lt;/h6&gt;
&lt;p&gt;Lo primero será descargarse la ISO y pasarla a formato USB para que podamos pincharla en la máquina antes de empezar su instalación. Microsoft tiene una aplicación para hacer este paso muy sencilla y funcional llamada “&lt;a href=&quot;http://www.microsoftstore.com/store/msstore/html/pbPage.Help_Win7_usbdvd_dwnTool&quot;&gt;Windows 7 USB/DVD download tool&lt;/a&gt;”. No os dejéis engañar por su nombre rimbombante, no es más que una aplicación que “descomprime” ISOs en un pinchos USB para poder usarlos en instalaciones de estas características.&lt;/p&gt;
&lt;p&gt;&lt;img border=&quot;0&quot; alt=&quot;Choose Media Type&quot; src=&quot;http://javierholguera.com/assets/Windows%207%20USB_DVD%20Download%20Tool%20(71)_3.png&quot; width=&quot;500&quot; height=&quot;277&quot; /&gt;&lt;/p&gt;
&lt;h6&gt;Paso 2 – Crear el fichero VHD&lt;/h6&gt;
&lt;p&gt;VHD funciona con ficheros que simulan un disco duro sobre el que se realizar toda la instalación y funcionamiento del sistema operativo. Desde una consola de MS-DOS lanzada con privilegios de Administrador tendríamos que escribir “diskpart” para lanzar la consola de creación de ficheros VHD, que tendrá un aspecto similar al siguiente.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2012/02/image2.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px;padding-left: 0px;padding-right: 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://javierholguera.com/assets/image_thumb2.png&quot; width=&quot;504&quot; height=&quot;235&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Una vez en esta consola estos son los comandos que tenemos que introducir:&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot;&gt;
&lt;div style=&quot;border-bottom: silver 1px solid;text-align: left;border-left: silver 1px solid;padding-bottom: 4px;line-height: 12pt;background-color: #f4f4f4;margin: 20px 0px 10px;padding-left: 4px;width: 97.5%;padding-right: 4px;font-family: 'Courier New', courier, monospace;direction: ltr;font-size: 8pt;overflow: auto;border-top: silver 1px solid;cursor: text;border-right: silver 1px solid;padding-top: 4px&quot;&gt;
&lt;div style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: #f4f4f4;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: white;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #008000&quot;&gt;// maximum indica la cantidad máxima de GBs del disco&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: #f4f4f4;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;create vdisk file=d:VMsWin8.vhd type=expandable maximum=60000&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: white;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;&amp;nbsp;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: #f4f4f4;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #008000&quot;&gt;// seleccionamos el nuevo &quot;disco&quot; para trabajar con él&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: white;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;select vdisk file=d:VMsWin8.vhd&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: #f4f4f4;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;&amp;nbsp;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: white;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #008000&quot;&gt;// nos &quot;atachamos&quot;...&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: #f4f4f4;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;attach vdisk&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: white;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;&amp;nbsp;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: #f4f4f4;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #008000&quot;&gt;// ... y creamos una partición primaria&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: white;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;create partition primary&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Con estas pocas líneas ya tendríamos preparado el disco en formato fichero sobre el que vamos a realizar la instalación. Es importante que lo creemos en un disco duro real en el que tengamos espacio suficiente para la máxima expansión que puede alcanzar. De lo contrario tendríamos errores en tiempo de ejecución cuando el VHD intente expandirse en el disco duro real y no exista espacio disponible.&lt;/p&gt;
&lt;h6&gt;Paso 3 – Instalación&lt;/h6&gt;
&lt;p&gt;Los siguientes pasos son los habituales: pinchar el USB, seleccionar el arranque desde el pincho en el correspondiente menú que todas las BIOS nos ofrecen y esperar a que Windows termine de cargar los ficheros que necesita para empezar la instalación. Tan pronto lleguemos a la pantalla en que se los da a elegir dónde queremos instalar el sistema operativo, tendremos que pulsar “MAYUSCULAS” seguido de “F10”. Esto hará aparecer una consola en la que podremos seleccionar nuestro fichero VHD creado anteriormente y “cargarlo” para que se convierta en una de las unidades disponibles para la instalación. En las siguientes fotos nos lo enseñaba bien Haselman. Primero, el listado de las unidades disponibles para la instalación antes de cargar el VHD.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2012/02/foto_instalacion_antes.jpg&quot;&gt;&lt;img style=&quot;border-right-width: 0px;padding-left: 0px;padding-right: 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;foto_instalacion_antes&quot; src=&quot;http://javierholguera.com/assets/foto_instalacion_antes_thumb.jpg&quot; width=&quot;504&quot; height=&quot;377&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En la ventana de Consola que se ve en la imagen introduciríamos los siguientes comandos para “cargar” el VHD.&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot;&gt;
&lt;div style=&quot;border-bottom: silver 1px solid;text-align: left;border-left: silver 1px solid;padding-bottom: 4px;line-height: 12pt;background-color: #f4f4f4;margin: 20px 0px 10px;padding-left: 4px;width: 97.5%;padding-right: 4px;font-family: 'Courier New', courier, monospace;direction: ltr;font-size: 8pt;overflow: auto;border-top: silver 1px solid;cursor: text;border-right: silver 1px solid;padding-top: 4px&quot;&gt;
&lt;div style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: #f4f4f4;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: white;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #008000&quot;&gt;// seleccionamos el disco con la ruta que creamos antes&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: #f4f4f4;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;select vdisk file=d:VMsWin8.vhd&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: white;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;&amp;nbsp;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: #f4f4f4;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #008000&quot;&gt;// nos &quot;atachamos&quot;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;
&lt;pre style=&quot;border-bottom-style: none;text-align: left;padding-bottom: 0px;line-height: 12pt;background-color: white;margin: 0em;border-left-style: none;padding-left: 0px;width: 100%;padding-right: 0px;font-family: 'Courier New', courier, monospace;direction: ltr;border-top-style: none;color: black;border-right-style: none;font-size: 8pt;overflow: visible;padding-top: 0px&quot;&gt;attach vdisk&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Una vez hayamos hecho esto, volvemos a la ventana de selección de unidad y refrescamos con el botón correspondiente. Y tal como se puede ver en la siguiente imagen, tendremos una nueva unidad disponible para hacer la instalación sobre ella; la unidad representada por el fichero VHD.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2012/02/foto_instalacion_despues.jpg&quot;&gt;&lt;img style=&quot;border-right-width: 0px;padding-left: 0px;padding-right: 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;foto_instalacion_despues&quot; src=&quot;http://javierholguera.com/assets/foto_instalacion_despues_thumb.jpg&quot; width=&quot;504&quot; height=&quot;377&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seleccionaríamos esta unidad y continuaríamos con el proceso normalmente, incluso aunque recibamos algún aviso sobre la posibilidad de que no se pueda arrancar el sistema desde la unidad seleccionada. No debemos preocuparnos por esto, debemos seguir adelante hasta que se nos solicite reiniciar, momento en el que retiraremos el pincho USB y procederemos.&lt;/p&gt;
&lt;h6&gt;Paso 4 – Arranque Dual&lt;/h6&gt;
&lt;p&gt;Windows Developer Preview es lo suficientemente listo para instalarse como gestor de arranque y dejarnos asombrados al comprobar que, por fin, Windows tendrá un sistema de arranque gráfico y vistoso, no basado en consolas de MS-DOS como hasta ahora. En la siguiente imagen puede verse.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2012/02/booting.jpg&quot;&gt;&lt;img style=&quot;border-right-width: 0px;padding-left: 0px;padding-right: 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;booting&quot; src=&quot;http://javierholguera.com/assets/booting_thumb.jpg&quot; width=&quot;504&quot; height=&quot;492&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;Conclusión&lt;/h6&gt;
&lt;p&gt;La instalación no puede ser más sencilla y es, además, muy rápida, como todo lo que viene con Windows Developer Preview. No esperes más para empezar a “cacharrear” con el sistema operativo más esperado en los últimos años.&lt;/p&gt;
&lt;h6&gt;Bibliografía&lt;/h6&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hanselman.com/blog/GuideToInstallingAndBootingWindows8DeveloperPreviewOffAVHDVirtualHardDisk.aspx&quot;&gt;Scott Haselman – Guide to Installing and Booting Windows 8 Developer Preview off a VHD (Virtual Hard Disk)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Feb 2012 13:24:58 +0000</pubDate>
        <link>http://javierholguera.com/2012/02/26/instalar-windows-developer-preview</link>
        <guid isPermaLink="true">http://javierholguera.com/2012/02/26/instalar-windows-developer-preview</guid>
        
        <category>instalación</category>
        
        <category>VHD</category>
        
        <category>Windows 8</category>
        
        
        <category>Windows 8</category>
        
      </item>
    
      <item>
        <title>Cómo suprimir errores en proyectos de DB</title>
        <description>&lt;p&gt;Últimamente estoy teniendo que pelearme mucho con proyectos de bases de datos de Visual Studio y no puedo decir que lo esté disfrutando.&lt;/p&gt;
&lt;p&gt;Sin embargo he de reconocer que una de las cosas más interesantes que tienen es la posibilidad de compilar y analizar estáticamente el código TSQL de estos proyectos, como si se trata de código C# o VB.NET.&lt;/p&gt;
&lt;p&gt;Siendo como es una ventaja para escribir código primero correcto y, posteriormente, más óptimo y, en general, de mejor calidad, en ocasiones cabe la posibilidad de que queramos hacer caso omiso a los warnings y errores que nos lanza.&lt;/p&gt;
&lt;p&gt;A diferencia de sus equivalentes en código procedural, con los proyectos de base de datos no tenemos ni directivas pragma ni atributos SuppressMessage que nos permitan ignorar estas advertencias. Sin embargo no estamos perdidos del todo, tenemos dos posibles estrategias a seguir:&lt;/p&gt;
&lt;h6&gt;Fuerza bruta&lt;/h6&gt;
&lt;p&gt;Si eres de los que no le importa usar la fuerza bruta para resolver sus problemas lo más rápido posible, ésta es tu opción: simplemente eliminar todos los errores del tipo para todo el proyecto.&lt;/p&gt;
&lt;p&gt;En la siguiente imagen se pueden ver las propiedades del proyecto de base de datos, en concreto la pestaña de Build. En ella podemos introducir los números correspondiente a las reglas que queremos ignorar para el proyecto completo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2012/02/image1.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px;border-left: 0px;padding-left: 0px;padding-right: 0px;border-top: 0px;border-right: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://javierholguera.com/assets/image_thumb1.png&quot; width=&quot;504&quot; height=&quot;433&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;El modo preciso&lt;/h6&gt;
&lt;p&gt;La desventaja clara de la opción anterior es que perderemos ese tipo de avisos para posteriores errores que pudiéramos introducir en el proyecto. Sería mucho más práctico si pudiéramos reducir el alcance de la supresión a, por ejemplo, un único fichero, sabiendo que en los proyectos de bases de datos cada fichero contiene un único objeto de la base de datos.&lt;/p&gt;
&lt;p&gt;Pues bien, por suerte es posible y además es muy sencillo. Basta con pinchar en el fichero deseado y mostrar las propiedades del mismo. Veremos una caja de texto denominada “Suppress Warnings” en la que podremos introducir el código que representa la regla a suprimir. En la siguiente figura se puede ver.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2012/02/image.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px;padding-left: 0px;padding-right: 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://javierholguera.com/assets/image_thumb.png&quot; width=&quot;504&quot; height=&quot;404&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gracias a esta opción podremos seguir recibiendo los avisos de este error en otros ficheros en los que nos equivoquemos.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Feb 2012 22:05:43 +0000</pubDate>
        <link>http://javierholguera.com/2012/02/13/cmo-suprimir-errores-en-proyectos-de-db</link>
        <guid isPermaLink="true">http://javierholguera.com/2012/02/13/cmo-suprimir-errores-en-proyectos-de-db</guid>
        
        <category>database</category>
        
        <category>warnings</category>
        
        
        <category>Databases</category>
        
      </item>
    
      <item>
        <title>El Patrón Promise</title>
        <description>&lt;p align=&quot;justify&quot;&gt;El patrón Promise es precisamente nuevo, pero está creciendo en popularidad a raíz del gran uso que se hace de él en la API de WinJS, el wrapper JavaScript para hacer a la nueva API WinRT en Windows 8. El objetivo de este patrón es facilitar el modelado de procesos asíncronos, de forma que el código que consuma operaciones que no van a retornar inmediatamente sea lo más legible y fácil de escribir posible.&lt;/p&gt;
&lt;h6 align=&quot;justify&quot;&gt;Escenario actual&lt;/h6&gt;
&lt;p align=&quot;justify&quot;&gt;La asincronía está de moda. La Nube, aplicaciones “responsivas”, etc. Todo parece empujar a los desarrolladores a hacer un uso cada vez mayor de este tipo de construcciones programáticas. Microsoft ha decidido hacer una apuesta decidida por la asincronía en las aplicaciones Metro con Javascript, por muchas razones. &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;En primer lugar hay que tomar en consideración también el hecho de que JavaScript sea un lenguaje de ejecución basado en un único hilo, lo que hace que cualquier tarea de larga duración congele la interfaz gráfica, con la consiguiente mala imagen para la aplicación frente al usuario. Además, la visión de Microsoft con respecto a las aplicaciones Metro se basa en fluidez, rapidez de respuesta y sensación de inmediatez, de ahí que la asincronía pase de ser una característica deseada a una obligación absoluta.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Por estas razones Microsoft ha decidido ofrecer versiones asíncronas de la gran mayoría de llamadas al sistema que WinRT pone a disposición de los desarrolladores. Estas llamadas van a implementar, en su gran mayoría, el patrón Promise, para simplificar su uso asíncrono.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Pero, ¿cómo es este patrón? ¿Qué características tiene y cómo podemos usarlo? Veámoslo.&lt;/p&gt;
&lt;h6 align=&quot;justify&quot;&gt;El Patrón&lt;/h6&gt;
&lt;p align=&quot;justify&quot;&gt;Promises/A es el &lt;a href=&quot;http://wiki.commonjs.org/wiki/Promises/A&quot;&gt;nombre del estándar&lt;/a&gt; detrás de este patrón. En él se propone que los objetos Promise tengan una propiedad then que será una función con tres parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;Handler para gestionar el resultado satisfactorio. &lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;Handler para gestionar los errores. &lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;Handler para gestionar el progreso de la operación. &lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;justify&quot;&gt;Al retornar un objeto promise la función estará “prometiendo” retornar un valor en algún punto del futuro próximo.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Esta implementación del estándar es exactamente la misma que ha hecho Microsoft en su librería. En el siguiente fragmento de código &lt;/p&gt;
&lt;div class=&quot;csharpcode&quot; align=&quot;justify&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;myWebService.get(&lt;span class=&quot;str&quot;&gt;&amp;quot;http://www.javierholguera.com&amp;quot;&lt;/span&gt;)&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;csharpcode&quot; align=&quot;justify&quot;&gt;
&lt;pre&gt;    .then(&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;csharpcode&quot; align=&quot;justify&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;       &lt;span class=&quot;kwrd&quot;&gt;function&lt;/span&gt;(result) { &lt;span class=&quot;rem&quot;&gt;/* gestionar resultado correcto */&lt;/span&gt;},&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;csharpcode&quot; align=&quot;justify&quot;&gt;
&lt;pre&gt;        &lt;span class=&quot;kwrd&quot;&gt;function&lt;/span&gt;(error) { &lt;span class=&quot;rem&quot;&gt;/* manejar error */&lt;/span&gt;},&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;csharpcode&quot; align=&quot;justify&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;       &lt;span class=&quot;kwrd&quot;&gt;function&lt;/span&gt;(progress) { &lt;span class=&quot;rem&quot;&gt;/* informar sobre avances */&lt;/span&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;csharpcode&quot; align=&quot;justify&quot;&gt;
&lt;pre&gt;     );&lt;/pre&gt;
&lt;/div&gt;
&lt;style type=&quot;text/css&quot;&gt;
&lt;p&gt;.csharpcode, .csharpcode pre&lt;br /&gt;
{&lt;br /&gt;
	font-size: small;&lt;br /&gt;
	color: black;&lt;br /&gt;
	font-family: consolas, &quot;Courier New&quot;, courier, monospace;&lt;br /&gt;
	background-color: #ffffff;&lt;br /&gt;
	/*white-space: pre;*/&lt;br /&gt;
}&lt;br /&gt;
.csharpcode pre { margin: 0em; }&lt;br /&gt;
.csharpcode .rem { color: #008000; }&lt;br /&gt;
.csharpcode .kwrd { color: #0000ff; }&lt;br /&gt;
.csharpcode .str { color: #006080; }&lt;br /&gt;
.csharpcode .op { color: #0000c0; }&lt;br /&gt;
.csharpcode .preproc { color: #cc6633; }&lt;br /&gt;
.csharpcode .asp { background-color: #ffff00; }&lt;br /&gt;
.csharpcode .html { color: #800000; }&lt;br /&gt;
.csharpcode .attr { color: #ff0000; }&lt;br /&gt;
.csharpcode .alt&lt;br /&gt;
{&lt;br /&gt;
	background-color: #f4f4f4;&lt;br /&gt;
	width: 100%;&lt;br /&gt;
	margin: 0em;&lt;br /&gt;
}&lt;br /&gt;
.csharpcode .lnum { color: #606060; }&lt;/style&gt;
&lt;p align=&quot;justify&quot;&gt;&amp;#160;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Para terminar uno de los principales beneficios del patrón es la facilidad para componer unos promises con otros. Por ejemplo, imaginemos que queremos realizar un proceso asíncrono A y cuando hayamos terminado dicho proceso satisfactoriamente, quedemos ejecutar un segundo proceso asíncrono B. Con el siguiente fragmento de código podemos ver cómo lo haríamos.&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;procesoA.ejecutar(&lt;span class=&quot;str&quot;&gt;&amp;quot;http://www.javierholguera.com&amp;quot;&lt;/span&gt;)&lt;/pre&gt;
&lt;pre&gt;    .then(&lt;span class=&quot;kwrd&quot;&gt;function&lt;/span&gt;(result) { &lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;         &lt;span class=&quot;rem&quot;&gt;// gestionamos el resultado de A ejecutando el proceso B&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;        &lt;span class=&quot;rem&quot;&gt;// esta funcion retorna el promise del proceso B&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; procesoB.ejecutar(result); &lt;/pre&gt;
&lt;pre&gt;    })&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    .then(&lt;span class=&quot;kwrd&quot;&gt;function&lt;/span&gt;() {&lt;/pre&gt;
&lt;pre&gt;        &lt;span class=&quot;rem&quot;&gt;// gestion del exito del proceso B&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        console.log(&lt;span class=&quot;str&quot;&gt;'B finalizo correctamente'&lt;/span&gt;);&lt;/pre&gt;
&lt;pre&gt;    }, &lt;span class=&quot;kwrd&quot;&gt;function&lt;/span&gt;(error) {&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        &lt;span class=&quot;rem&quot;&gt;// gestion del error del proceso B &lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;        console.log(&lt;span class=&quot;str&quot;&gt;'B finalizo con errores'&lt;/span&gt;);&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    });&lt;/pre&gt;
&lt;/div&gt;
&lt;style type=&quot;text/css&quot;&gt;
.csharpcode, .csharpcode pre&lt;br /&gt;
{&lt;br /&gt;
	font-size: small;&lt;br /&gt;
	color: black;&lt;br /&gt;
	font-family: consolas, &quot;Courier New&quot;, courier, monospace;&lt;br /&gt;
	background-color: #ffffff;&lt;br /&gt;
	/*white-space: pre;*/&lt;br /&gt;
}&lt;br /&gt;
.csharpcode pre { margin: 0em; }&lt;br /&gt;
.csharpcode .rem { color: #008000; }&lt;br /&gt;
.csharpcode .kwrd { color: #0000ff; }&lt;br /&gt;
.csharpcode .str { color: #006080; }&lt;br /&gt;
.csharpcode .op { color: #0000c0; }&lt;br /&gt;
.csharpcode .preproc { color: #cc6633; }&lt;br /&gt;
.csharpcode .asp { background-color: #ffff00; }&lt;br /&gt;
.csharpcode .html { color: #800000; }&lt;br /&gt;
.csharpcode .attr { color: #ff0000; }&lt;br /&gt;
.csharpcode .alt&lt;br /&gt;
{&lt;br /&gt;
	background-color: #f4f4f4;&lt;br /&gt;
	width: 100%;&lt;br /&gt;
	margin: 0em;&lt;br /&gt;
}&lt;br /&gt;
.csharpcode .lnum { color: #606060; }&lt;/style&gt;
&lt;p align=&quot;justify&quot;&gt;Podemos apreciar en el código como el segundo .then está ejecutándose sobre el resultado retornado por el primer .then, que es en realidad el promise correspondiente al proceso B. En este caso he omitido, por claridad, el handler para el error en el promise del proceso A, pero podría haberse añadido perfectamente justo a continuación del manejador para el resultado exitoso del proceso A.&lt;/p&gt;
&lt;h6 align=&quot;justify&quot;&gt;Conclusión&lt;/h6&gt;
&lt;p align=&quot;justify&quot;&gt;Promise es un patrón sencillo pero que nos ayuda a gestionar la asincronía de una forma fácil y limpia. Este patrón tiene una larga vida por delante, como parte fundamental de la API de WinJS en Windows 8, por lo que cuanto antes lo dominemos, antes empezaremos a escribir co´digo asíncrono como las aplicaciones Metro nos exigen.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Feb 2012 23:14:46 +0000</pubDate>
        <link>http://javierholguera.com/2012/02/07/el-patrn-promise</link>
        <guid isPermaLink="true">http://javierholguera.com/2012/02/07/el-patrn-promise</guid>
        
        <category>Javascript</category>
        
        <category>Metro Apps</category>
        
        <category>Windows 8</category>
        
        
        <category>Javascript</category>
        
        <category>Metro Apps</category>
        
        <category>Windows 8</category>
        
      </item>
    
      <item>
        <title>Move y Merge en TFS</title>
        <description>&lt;p&gt;El equipo en el que trabajo está mejorando sus políticas de branching e intentando ser más riguroso a la hora de hacer Scrum.&lt;/p&gt;
&lt;p&gt;Recientemente nos vimos en una situación que, aunque debería ser marginal, ocurre en todos los sprints (y probablemente en los de todos los equipos, para ser sinceros): un Product Backlog Item no se completó en el sprint.&lt;/p&gt;
&lt;p&gt;Nuestra política de ramas es “un branch por característica”, por lo que tenemos tantos branches como PBIs. Además, para ser un poco más organizados, creamos carpetas padre para los PBIs que se hicieron en un sprint. Por eso, si el sprint es “Release 1 – Sprint 2”, tendremos una carpeta R1S2 que contendrá todos los branches correspondientes a los PBIs de ese sprint.&lt;/p&gt;
&lt;h3&gt;Solución 1: Llevar a Main&lt;/h3&gt;
&lt;p&gt;No podemos llevar el código inestable que hay en la rama original a Main y de ahí crear una nueva rama, puesto que estaríamos “rompiendo” Main. Además, tampoco tendría mucho sentido esta duplicidad.&lt;/p&gt;
&lt;h3&gt;Solución 2: Branch de Branch&lt;/h3&gt;
&lt;p&gt;Otra posible opción sería hacer un branch del branch original, en la nueva carpeta. Por ejemplo, hacer un branch de R1S2PBIXXX a R1S3PBIXXX, donde XXX es el ID del PBI no completado. El problema de esta solución es que, a la hora de llevar los cambios a Main, nos obligaría a ir hacia atrás en el tiempo, de la última rama a la anterior, y de ahí a Main. También nos obligaría a mantener “viva” la rama original, a la espera de recibir los cambios para poder, después, merguearse a Main y “morir”.&lt;/p&gt;
&lt;h3&gt;Solución 3: Move del Branch&lt;/h3&gt;
&lt;p&gt;Está creíamos que era la mejor solución: mover la rama de la carpeta original a la nueva. Por ejemplo, de R1S2 a R1S3. De este modo mantendríamos la rama “enganchada” a Main y podemos hacer el branch directamente desde la nueva posición.&lt;/p&gt;
&lt;p&gt;Sin embargo, aquí viene TFS con las rebajas: al hacer el merge de vuelta a Main, &lt;strong&gt;interpreta TODOS los ficheros como mergeables&lt;/strong&gt;, por haber sido movidos. Lo peor es que, si confirmamos el checkin, la historia de ese fichero refleja dicha entrada, aun cuando no hay diferencias reales en su contenido.&lt;/p&gt;
&lt;p&gt;Parece ser que este comportamiento es premeditado y probablemente existan buenas razones para ello, pero a nosotros nos obliga a prescindir de esta solución, para no convertir el History de los ficheros en un pequeño caos.&lt;/p&gt;
&lt;h3&gt;Conclusiones&lt;/h3&gt;
&lt;p&gt;No existe una buena solución, pero tendremos que tirar con la Solución 2 porque es la única viable a día de hoy.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Oct 2011 13:03:03 +0000</pubDate>
        <link>http://javierholguera.com/2011/10/26/move-y-merge-en-tfs</link>
        <guid isPermaLink="true">http://javierholguera.com/2011/10/26/move-y-merge-en-tfs</guid>
        
        <category>Merge</category>
        
        <category>Move</category>
        
        <category>TFS</category>
        
        
        <category>Visual Studio 2010</category>
        
      </item>
    
      <item>
        <title>WebBrowser + Mango = IE9</title>
        <description>&lt;p&gt;El otro día me llegó al correo una pregunta que, como de costumbre, no supe responder. Me preguntaban si podíamos esperar que WebBrowser utilizara IE9 como navegador en Mango.&lt;/p&gt;
&lt;p&gt;Lo primero que me sugería la lógica es que sí. WebBrowser había estado utilizando IE7 hasta ahora y, puesto que Mango trae como una de sus principales novedades IE9 como navegador, lo normal era esperar que fuera así.&lt;/p&gt;
&lt;p&gt;Rebuscando por MSDN (ese sitio donde está toda la información pero es casi imposible encontrar nada), encontré &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/hh202996(v=vs.92).aspx&quot;&gt;un pequeño artículo sobre los cambios e incompatibilidades de Mango&lt;/a&gt; en el que, explícitamente, citaban a WebBrowser y decían lo siguiente (traducción de cosecha propia):&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;El control WebBrowser para Windows Phone se ha actualizado para soportar Internet Explorer 9. Las aplicaciones que usen este control deberían re-testearse para asegurar su compatibilidad con Internet Explorer 9.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Parecía suficiente, pero ya que tengo instalado Mango en el teléfono, decidí probarlo por mí mismo. Creé un proyecto en el que simplemente incrusté un WebBrowser y una caja de texto para meter una dirección. El resultado lo podéis en la siguientes imágenes, primero navegando a &lt;a title=&quot;http://user-agent-string.info/parse&quot; href=&quot;http://user-agent-string.info/parse&quot;&gt;http://user-agent-string.info/parse&lt;/a&gt; para conseguir información sobre el User Agent String que está enviando el control WebBrowser.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2011/07/MangoBrowser_7-31-2011_13.10.33.888.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px; padding-top: 0px&quot; title=&quot;MangoBrowser_7-31-2011_13.10.33.888&quot; border=&quot;0&quot; alt=&quot;MangoBrowser_7-31-2011_13.10.33.888&quot; src=&quot;http://javierholguera.com/assets/MangoBrowser_7-31-2011_13.10.33.888_thumb.png&quot; width=&quot;262&quot; height=&quot;434&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Y, en esta otra, navegando al test ACID3, que aunque no valga de mucho por ser muy poco exhaustivo, sí nos sirve para diferenciar entre IE7 e IE9.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2011/07/MangoBrowser_ACID3_7-31-2011_13.14.50.684.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px; padding-top: 0px&quot; title=&quot;MangoBrowser_ACID3_7-31-2011_13.14.50.684&quot; border=&quot;0&quot; alt=&quot;MangoBrowser_ACID3_7-31-2011_13.14.50.684&quot; src=&quot;http://javierholguera.com/assets/MangoBrowser_ACID3_7-31-2011_13.14.50.684_thumb.png&quot; width=&quot;262&quot; height=&quot;434&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En definitiva, &lt;strong&gt;WebBrowser en Mango SÍ funcionará sobre Internet Explorer 9&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Jul 2011 11:16:28 +0000</pubDate>
        <link>http://javierholguera.com/2011/07/31/webbrowser-mango-ie9</link>
        <guid isPermaLink="true">http://javierholguera.com/2011/07/31/webbrowser-mango-ie9</guid>
        
        <category>IE9</category>
        
        <category>Silverlight</category>
        
        <category>WebBrowser</category>
        
        <category>WP7</category>
        
        
        <category>Silverlight</category>
        
      </item>
    
      <item>
        <title>Permisos a NetworkService en remoto</title>
        <description>&lt;p&gt;Hoy me he encontrado con una situación que, no siendo habitual, tampoco es tan extraña. Tenía una máquina con un servidor de aplicaciones IIS que hospedaba una aplicación web (unos servicios WCF, por concretar). El Application Pool sobre el que corría dicha aplicación web estaba utilizando la cuenta de Network Service de la máquina, y era preciso que accediera a una base de datos &lt;u&gt;en otra máquina.&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;Parece fácil, ¿no? Pero, ¿cómo darle permisos a una cuenta que no está en nuestra máquina y que tampoco es una cuenta del dominio en el que se encuentran ambas máquinas? La primera pista la podemos encontrar en IIS.NET, en &lt;a href=&quot;http://learn.iis.net/page.aspx/624/application-pool-identities/&quot;&gt;este post&lt;/a&gt; (en inglés). En él nos explican, entre otras muchas cosas, que cada cuenta Network Service de una máquina se convierte en una cuenta distinta cuando trata de acceder a recursos en máquinas distintas. Esta cuenta en la que se “transmuta” Network Service cumple el siguiente patrón:&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&amp;lt;nombre_de_dominio&amp;gt;&amp;lt;nombre_de_maquina&amp;gt;$&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Con lo cual, si nuestra máquina XXX se encuentra en el dominio YYY, su cuenta “transmutada” sería: &lt;strong&gt;YYYXXX$&lt;/strong&gt;. Fácil, ¿verdad? Ahora sólo haría falta dar permisos a dicha cuenta utilizando Management Studio, en el servidor de bases de datos al que queremos atacar. Sin embargo, aquí nos encontramos con otro pequeño problema: Management Studio no es capaz de reconocer dicha cuenta.&lt;/p&gt;
&lt;p&gt;Por eso, en su lugar, tendremos que tirar de consola (o de una ventana de query del Management Studio) y ejecutar el siguiente procedimiento almacenado:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;exec &lt;/span&gt;&lt;span style=&quot;color: maroon&quot;&gt;sp_grantlogin &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;'nombre_de_dominionombre_de_maquina$'&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Y, ahora sí, refrescando la carpeta de Logins del servidor SQL Server, podremos a este nuevo login y configurarlo para que tenga los permisos necesarios para acceder a la base de datos que toca.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jul 2011 15:32:08 +0000</pubDate>
        <link>http://javierholguera.com/2011/07/28/permisos-a-networkservice-en-remoto</link>
        <guid isPermaLink="true">http://javierholguera.com/2011/07/28/permisos-a-networkservice-en-remoto</guid>
        
        <category>network service</category>
        
        <category>permisos</category>
        
        <category>sql server</category>
        
        
        <category>SQL Server</category>
        
      </item>
    
      <item>
        <title>[WCF] Nombres de máquina incorrectos en WSDL</title>
        <description>&lt;p&gt;Nos había pasado anteriormente y nos ha vuelto a pasar: WCF nos generaba el documento WSDL con el nombre de la máquina, no con su dominio.&lt;/p&gt;
&lt;p&gt;Esto hacía que, por ejemplo, una máquina con nombre XXX en un dominio YYY, aunque su WSDL estuviera accesible en &lt;a href=&quot;http://XXX/Servicio.svc?wsdl&quot;&gt;http://XXX/Servicio.svc?wsdl&lt;/a&gt;, internamente las rutas del documento WSDL hicieran referencia a &lt;a href=&quot;http://XXX.YYY/&quot;&gt;http://XXX.YYY/&lt;/a&gt;, lo que hacía el WSDL inservible.&lt;/p&gt;
&lt;p&gt;Parece ser que, hasta WCF 4.0, la solución no era sencilla: había que parchear este &amp;quot;bug”, “feature” o como queramos llamarlo, tal como se explica en este KB de Microsoft: &lt;a title=&quot;http://support.microsoft.com/kb/971842/en-us&quot; href=&quot;http://support.microsoft.com/kb/971842/en-us&quot;&gt;http://support.microsoft.com/kb/971842/en-us&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sin embargo, a partir de WCF se ha incorporado la corrección y ya podemos tirar directamente de XML y olvidarnos de DLLs. El fragmento sería tan sencillo como éste:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceBehaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behavior&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;      &amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Necessary to avoid problems with domain/computer names &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;--&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;useRequestHeadersForMetadataAddress&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;defaultPorts&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;add &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;scheme&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;http&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: red&quot;&gt;port&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;80&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;defaultPorts&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;useRequestHeadersForMetadataAddress&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behavior&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceBehaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Con esto ya tendremos nuestros WSDLs enlazando internamente de forma correcta el resto de elementos de que se compone. &lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jul 2011 12:34:31 +0000</pubDate>
        <link>http://javierholguera.com/2011/07/27/wcf-nombres-de-mquina-incorrecta-en-wsdl</link>
        <guid isPermaLink="true">http://javierholguera.com/2011/07/27/wcf-nombres-de-mquina-incorrecta-en-wsdl</guid>
        
        <category>request headers</category>
        
        <category>WCF</category>
        
        <category>wsdl</category>
        
        
        <category>Visual Studio 2010</category>
        
      </item>
    
      <item>
        <title>Rulesets y branches</title>
        <description>&lt;p&gt;Desde la versión 2010 de Visual Studio podemos configurar rulesets específicos para cada proyecto, que se guardan como ficheros con extensión .ruleset.&lt;/p&gt;
&lt;p&gt;Esta nueva forma de gestionarlo es muy flexible y nos permite controlar cómo de estricto es Code Analysis a la hora de realizar el análisis estático de cada uno de los proyectos de nuestra solución.&lt;/p&gt;
&lt;p&gt;Por supuesto, si todo el proyecto comparte unas mismas reglas, es perfectamente posible compartir un único fichero (la solución que, en mi caso, adopto el 99% de las ocasiones).&lt;/p&gt;
&lt;p&gt;Puesto que los rulesets pueden definirse para cada proyecto, dicha configuración se refleja en el .csproj. de dicho proyecto. La buena noticia es que la ruta es relativa, con lo cual en el momento de crear nuevas ramas, no tendremos ningún problema. La nueva versión del .csproj en la nueva rama hará referencia directamente a la nueva versión del fichero .ruleset que también habremos brancheado (ojo con esto si estamos haciendo branches parciales).&lt;/p&gt;
&lt;p&gt;Sin embargo, hay un comportamiento no deseado: cuando se mueve un proyecto, la ruta relativa no se actualiza. Por lo tanto, deja de hacer referencia a nada que exista, al haberse desplazado la posición del fichero .csproj.&lt;/p&gt;
&lt;p&gt;En este caso, al compilar en Visual Studio, recibiremos un warning avisando de que, al no haber podido cargar el ruleset para el proyecto, no se ha ejecutado Code Analysis.&lt;/p&gt;
&lt;p&gt;La solución es fácil: abrir las propiedades del proyecto y volver a seleccionar el ruleset correspondiente a la rama en la que nos encontramos. Pero ojo al realizar esta operación, puesto que en el combo de seleccionar, por defecto, no vamos a ver ese fichero.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2011/07/ruleset.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&quot; title=&quot;ruleset&quot; border=&quot;0&quot; alt=&quot;ruleset&quot; src=&quot;http://javierholguera.com/assets/ruleset_thumb.png&quot; width=&quot;599&quot; height=&quot;350&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En su lugar, sí nos va a aparecer una entrada relativa al fichero original, aquél del que hemos hecho el branch, y es muy sencillo no percatarnos de ellos y elegirlo (puesto que, al ser nuestro branch una copia, tendrá el mismo nombre).&lt;/p&gt;
&lt;p&gt;En definitiva, los rulesets y los branches funcionan perfectamente, pero debemos tener cierto cuidado en caso de que movamos alguno de nuestros proyectos. En tal situación, actualizar las propiedades del proyecto con cierto cuidado de no elegir el ruleset equivocado.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Jul 2011 10:09:00 +0000</pubDate>
        <link>http://javierholguera.com/2011/07/15/rulesets-y-branches</link>
        <guid isPermaLink="true">http://javierholguera.com/2011/07/15/rulesets-y-branches</guid>
        
        <category>branch</category>
        
        <category>ruleset</category>
        
        <category>Visual Studio 2010</category>
        
        
      </item>
    
      <item>
        <title>CollectionAssert.AreEqual vs CollectionAssert.AreEquivalent</title>
        <description>&lt;p&gt;Como parte de mi trabajo diario tengo que hacer bastantes tests unitarios. Por esta razón me he ido familiarizando con las distintas clases que el framework de testeo de Visual Studio nos ofrece al respecto.&lt;/p&gt;
&lt;p&gt;Una de las últimas que descubrí pero, por otra parte, de las más útiles, es CollectionAssert. Esta clase permite realizar aserciones sobre colecciones y listas, como su propio nombre indica.&lt;/p&gt;
&lt;p&gt;Dos son los métodos que más frecuentemente utilizo, pero cuya semántica es lo bastante parecida como para merecer una explicación un poco más detallada:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms244187.aspx&quot;&gt;AreEqual&lt;/a&gt;: este método compara dos colecciones y se asegura de ambas tienen los mismos elementos, en el mismo orden y la misma cantidad.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.collectionassert.areequivalent(v=VS.100).aspx&quot;&gt;AreEquivalente&lt;/a&gt;: este método, sin embargo, simplemente comprueba que ambas colecciones tengan los mismos elementos y en la misma cantidad, sin importar el orden en que se encuentren.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por lo tanto, AreEqual no es más que una versión más restricctiva de AreEquivalent, útil si queremos hacer una aserción más precisa en nuestras pruebas.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jul 2011 14:22:56 +0000</pubDate>
        <link>http://javierholguera.com/2011/07/07/collectionassert-areequal-vs-collectionassert-areequivalent</link>
        <guid isPermaLink="true">http://javierholguera.com/2011/07/07/collectionassert-areequal-vs-collectionassert-areequivalent</guid>
        
        <category>C#</category>
        
        <category>CollectionAssert</category>
        
        <category>Testing</category>
        
        
      </item>
    
      <item>
        <title>Estudio sobre IE9 y los nuevos estándares</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2011/05/IE92.png&quot;&gt;&lt;img style=&quot;background-image: none; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;&quot; title=&quot;IE9&quot; src=&quot;http://javierholguera.com/assets/IE9_thumb2.png&quot; border=&quot;0&quot; alt=&quot;IE9&quot; width=&quot;167&quot; height=&quot;183&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2011/05/image2.png&quot;&gt;&lt;img style=&quot;background-image: none; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;&quot; title=&quot;image&quot; src=&quot;http://javierholguera.com/assets/image_thumb2.png&quot; border=&quot;0&quot; alt=&quot;image&quot; width=&quot;317&quot; height=&quot;181&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Como dije en la presentación del “Estudio sobre Internet Explorer 9 y los nuevos estándares web” que he elaborado, no siempre me queda el tiempo que me gustaría para poder actualizar periódicamente el blog.&lt;/p&gt;
&lt;p&gt;Hoy vuelvo después de un par de meses sin escribir nada, poniendo a disposición de quien esté interesado este whitepaper. La temática del mismo es analizar, en primer lugar, todo lo que tiene que ver con estándares web, sus organismos, sus etapas de madurez etc.&lt;/p&gt;
&lt;p&gt;El whitepaper hace un especial énfasis en todo lo que tiene que ver con el testeo y prueba de los nuevos estándares, particularmente HMTL5. Este tema está sujeto a un alto grado de desinformación, por lo que me parece muy importante tener claro qué podemos considerar información útil y qué simple FUD.&lt;/p&gt;
&lt;p&gt;También se analiza en detalle el papel que está desempeñando Microsoft en el proceso de publicación de estos nuevos estándares web, tanto desde el punto de vista de colaboración con el W3C como en la implementación que se ha hecho de ellos en IE9. En este sentido, se aporta información profunda y detallada de cada estándar implementado así como las características soportadas del mismo.&lt;/p&gt;
&lt;p&gt;Por último, aún cuando no es estrictamente un tema relacionado con estándares, se dedican unas cuantas páginas a analizar las mejoras de rendimiento de IE9 y la nueva característica de “Sitios Anclados” (Pinned Sites en inglés), que facilita un altísimo grado de integración de los sitios web con el sistema operativo, consiguiendo que su experiencia de uso se asemeje a la de una aplicación de escritorio.&lt;/p&gt;
&lt;p&gt;Espero que os guste y, por supuesto, son bienvenidos todos los comentarios, tanto los laudatorios como los críticos (estos nunca faltan :) )&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: La gente de Microsoft ha tenido el detalle de colgarlo en sus servidores, así que también podéis descargarlo en &lt;a href=&quot;http://download.microsoft.com/download/8/B/C/8BC56A8E-4AEB-4EF2-8781-023B0908C7D5/Estudio_sobre_Internet_Explorer_9_y_los_nuevos_estandares_web_12_05_13.pdf&quot;&gt;formato PDF&lt;/a&gt; y en &lt;a href=&quot;http://download.microsoft.com/download/8/B/C/8BC56A8E-4AEB-4EF2-8781-023B0908C7D5/Estudio_sobre_Internet_Explorer_9_y_los_nuevos_estandares_web_12_05_13.xps&quot;&gt;formato XPS&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 May 2011 14:40:16 +0000</pubDate>
        <link>http://javierholguera.com/2011/05/11/estudio-sobre-ie9-y-los-nuevos-estndares</link>
        <guid isPermaLink="true">http://javierholguera.com/2011/05/11/estudio-sobre-ie9-y-los-nuevos-estndares</guid>
        
        <category>estándar</category>
        
        <category>estudio</category>
        
        <category>IE9</category>
        
        <category>Internet Explorer 9</category>
        
        <category>W3C</category>
        
        <category>whitepaper</category>
        
        
        <category>HTML5</category>
        
      </item>
    
      <item>
        <title>HTML5: Primeros pasos</title>
        <description>&lt;p&gt;Es la tecnología del momento, y probablemente del futuro: HTML5. &lt;/p&gt;
&lt;p&gt;En este primer post voy a empezar por lo más básico: algunas de las nuevas etiquetas que han aparecido con el nuevo (futuro) estándar. En concreto, estas nuevas etiquetas han surgido con la idea de dotar de una mayor semántica a la Web. Hace unos años la gente de Google realizó un estudio sobre los “class names” más populares. En el Top-20 aparecieron términos como “footer”, “header” “nav” o “sidebar”. No es, en realidad, nada sorprendente si tenemos en cuenta que muchos sitios web siguen una misma estructura.&lt;/p&gt;
&lt;p&gt;Con HTML5 sus creadores han pensado que, en lugar de seguir utilizando etiquetas &amp;lt;div&amp;gt; sin ningún tipo de semántica para definir estas partes de las páginas web, resulta mucho más interesante poder definirlas con etiquetas específicamente pensadas para ellas, que ayuden a identificar sin ninguna duda que el contenido es una cabecera, un pie, una barra lateral, etc. Sin embargo, nos debemos confundir semántica con estructura. Es decir, cuando estemos utilizando una de estas etiquetas, estaremos indicando que lo que contienen es una cabecera, pie, etc, pero no su posición o aspecto en ningún modo.&lt;/p&gt;
&lt;p&gt;Veamos estas nuevas etiquetas y el uso recomendado de ellas.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h6&gt;&lt;font size=&quot;4&quot;&gt;Etiqueta &amp;lt;header&amp;gt;&lt;/font&gt;&lt;/h6&gt;
&lt;p&gt;La etiqueta &amp;lt;header&amp;gt; está pensada para definir, como su nombre indica, cabeceras de elementos. No está restringida sólo a su uso a nivel de página. Es decir, que podemos encontrar etiquetas &amp;lt;header&amp;gt; como cabecera de otros elementos, como podría ser el título de un artículo en un blog o el encabezado en una lista de secciones.&lt;/p&gt;
&lt;p&gt;No es una etiqueta obligatoria y su uso más habitual será como primer elemento de la página, conteniendo el título de la página, logos o elementos de navegación comunes a todo el sitio.&lt;/p&gt;
&lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;
&lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;header&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Esto es una cabecera.&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;header&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Por otra parte, la etiqueta &amp;lt;header&amp;gt; también puede contener los típicos enlaces navegacionales que se comparten entre todas las páginas web y que, semánticamente hablando, también forman parte de la cabecera del sitio.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h6&gt;Etiqueta &amp;lt;nav&amp;gt;&lt;/h6&gt;
&lt;p&gt;La etiqueta &amp;lt;nav&amp;gt; está pensada para destacar una sección en la página que contenga enlaces a otras páginas o a la misma, lo cual no significa que cualquier conjunto de enlaces sean candidatos a ir contenidos dentro de una etiqueta &amp;lt;nav&amp;gt;. En la misma especificación se propone un ejemplo de enlaces que &lt;u&gt;no&lt;/u&gt; se envuelven en una etiqueta: los enlaces que aparece en el pie de página, apuntando a información legal, copyright, etc; en este caso basta con envolverlos en una etiqueta &amp;lt;footer&amp;gt; (de la que hablaremos más adelante).&lt;/p&gt;
&lt;p&gt;Como ocurre con la etiqueta &amp;lt;header&amp;gt;, es posible hacer uso de más de una etiqueta &amp;lt;nav&amp;gt; en una misma página. Otro ejemplo típico de esta posibilidad es una página en la que tengamos enlaces a la navegación a través del sitio en la cabecera (en este caso la etiqueta &amp;lt;nav&amp;gt; muy probablemente irá insertada dentro de una etiqueta &amp;lt;header&amp;gt;), mientras que en el contenido de la página podemos tener una serie de enlaces apuntando a secciones dentro de ese contenido.&lt;/p&gt;
&lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;
&lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;header&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Mi sitio web&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;nav&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h2&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Enlaces del sitio:&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h2&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;ul&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;li&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;a&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;default.aspx&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Portada&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;li&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;li&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;a&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;articulos.aspx&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Articulos&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;li&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;li&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;a&lt;/span&gt; &lt;span style=&quot;color: #ff0000&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;=&amp;quot;contacto.aspx&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Contacto&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;li&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;ul&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;nav&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;header&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;En este ejemplo podemos ver las etiquetas &amp;lt;header&amp;gt; y &amp;lt;nav&amp;gt; juntas. La etiqueta &amp;lt;nav&amp;gt; no es más que un contenedor, es decir, no sustituye a las etiquetas &amp;lt;ul&amp;gt; y &amp;lt;ol&amp;gt; a la hora de definir una lista de enlaces. Por otra parte, los enlaces pueden presentarse en otro formato que no sea una lista, si se considera oportuno.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h6&gt;Etiqueta &amp;lt;footer&amp;gt;&lt;/h6&gt;
&lt;p&gt;La etiqueta &amp;lt;footer&amp;gt; representa un pie para varios tipos elementos de una página y no sólo la página en sí misma. Algunos de estos elementos son elementos &amp;lt;article&amp;gt;, &amp;lt;nav&amp;gt;, &amp;lt;aside&amp;gt;, &amp;lt;section&amp;gt;, &amp;lt;blockquote&amp;gt;, etc. En general, es posible tener un pie en cualquier elemento “&lt;a href=&quot;http://www.w3.org/TR/html5/content-models.html#sectioning-content&quot;&gt;sectioning content&lt;/a&gt;” y “&lt;a href=&quot;http://www.w3.org/TR/html5/sections.html#sectioning-root&quot;&gt;sectioning root&lt;/a&gt;”. Podemos intuir, por tanto, que es posible tener más de un elemento &amp;lt;footer&amp;gt; por página.&lt;/p&gt;
&lt;p&gt;En estos elementos &amp;lt;footer&amp;gt; normalmente incluiremos información sobre la sección a la que se asocian; información como quién la escribió, enlaces a documentos relacionados, copyright, etc. (según se define en la especificación).&lt;/p&gt;
&lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;
&lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;body&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;header&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Mi sitio&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;header&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;article&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h2&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Mi articulo&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Contenido del articulo&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;footer&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Pie del articulo&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;footer&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;article&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;footer&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h3&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Pie de la pagina&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h3&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Informacion de copyright&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;footer&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;body&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;En este ejemplo podemos ver juntas etiquetas &amp;lt;footer&amp;gt; como pie de un elemento (en este caso el elemento &amp;lt;article&amp;gt;, que veremos más adelante) y como pie de la página web entera.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h6&gt;Etiqueta &amp;lt;section&amp;gt;&lt;/h6&gt;
&lt;p&gt;La etiqueta &amp;lt;section&amp;gt; ha sido creada con la idea de representar secciones de contenido relacionado en un documento, normalmente con una cabecera. Esta definición resulta lo suficientemente genérica como para que algunos se hayan aventurado a apuntar a esta etiqueta como el sustituto de la etiqueta &amp;lt;div&amp;gt;.&lt;/p&gt;
&lt;p&gt;Sin embargo, en la especificación se nos previene específicamente contra este mal uso, indicándonos una regla para poder discernir cuándo elegir una de las dos. Una traducción “libre” de la documentación sería ésta:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cuando un elemento se crea para darle estilo o para realizar scripting sobre él, se debe utilizar una etiqueta &amp;lt;div&amp;gt;. En general, la etiqueta &amp;lt;section&amp;gt; es conveniente si va a aparecer explícitamente listada y visible en el documento.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Otra controversia de esta etiqueta es con dos parientes “cercanos”, nuevas etiquetas también, que veremos más adelante: &amp;lt;article&amp;gt; y &amp;lt;aside&amp;gt;. La razón es su similitud semántica, especialmente con la primera de ellas. Sin embargo, en la especificación se define un modo sencillo y directo de diferenciar entre ambas etiquetas:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se debe utilizar &amp;lt;article&amp;gt; en lugar de &amp;lt;section&amp;gt; cuando tiene sentido la sindicación del contenido del elemento.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Un ejemplo de uso de &amp;lt;section&amp;gt; y &amp;lt;article&amp;gt; combinados podemos verlo en el siguiente punto.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h6&gt;Etiqueta &amp;lt;article&amp;gt;&lt;/h6&gt;
&lt;p&gt;La etiqueta &amp;lt;article&amp;gt; está diseñada para representar elementos “auto-contenidos”; es decir, son elementos que pueden ser distribuidos o publicados (mediante sindicación) de forma independiente. Los ejemplos más típicos son posts de un blog, comentarios, respuestas de un foro, artículos, etc.&lt;/p&gt;
&lt;p&gt;Esta etiqueta permite anidar en su interior otras etiquetas &amp;lt;article&amp;gt; iguales. Tomando los ejemplos anteriores, podríamos definir una entrada de un blog como &amp;lt;article&amp;gt; y hacer lo propio con etiquetas &amp;lt;article&amp;gt; anidadas para cada uno de los comentarios de dicha entrada.&lt;/p&gt;
&lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;
&lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;article&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h2&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Mi nueva entrada&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h2&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Este es el contenido de la nueva entrada en mi blog&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;section&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h3&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Comentarios&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h3&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;article&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Mi comentario a tu entrada&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;footer&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;        &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Por usuario1&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;footer&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;article&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;article&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Otro comentario a tu entrada&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;footer&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;        &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Por usuario2&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;      &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;footer&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;    &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;article&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;section&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;article&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h6&gt;Etiqueta &amp;lt;aside&amp;gt;&lt;/h6&gt;
&lt;p&gt;La etiqueta &amp;lt;aside&amp;gt; nos permite representar el concepto de “sidebar” o barra lateral. Sin embargo, no debemos pensar que necesariamente estará situada en una posición determinada. Como con todas las etiquetas presentadas en este artículo, su contenido es meramente semántico, no estructural o posicional.&lt;/p&gt;
&lt;p&gt;La definición que nos aporta el estándar describe este elemento como una sección del elemento con contenido tangencial al mismo, relacionado pero separado. Entre los ejemplos que podemos encontrar, destacan las clásicas barras laterales que aparecen en muchas páginas web, así como otros menos intuitivos los “pullquotes” (textos destacados dentro de un artículo para enfatizar). En ambos casos es posible su eliminación sin afectar al contenido.&lt;/p&gt;
&lt;div style=&quot;border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px&quot; id=&quot;codeSnippetWrapper&quot;&gt;
&lt;div style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot; id=&quot;codeSnippet&quot;&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;aside&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Datos HTML5&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;  &lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;Aquí podríamos indicar un hecho relevante sobre HTML5 pero no relacionado con este articulo&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/p&gt;
&lt;pre style=&quot;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000&quot;&gt;aside&lt;/span&gt;&lt;span style=&quot;color: #0000ff&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!--CRLF--&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h6&gt;Conclusiones&lt;/h6&gt;
&lt;p&gt;Hemos visto algunas de las nuevas etiquetas que se han añadido a HTML5 con la idea de dotar de mayor semántica al lenguaje a la hora de definir los contenidos. Sin embargo, no debemos perder de vista que estas etiquetas sólo aportan semántica; es decir, no nos indican ni la estructura ni la posición ni el orden de los elementos que, con ellas, estamos definiendo. Por tanto, no debemos pensar que sólo existirá un &amp;lt;header&amp;gt; o un &amp;lt;footer&amp;gt; en una página, o que deberán aparecer al principio o al final de la misma, o que los elementos dentro de &amp;lt;aside&amp;gt; deben colocarse en un lateral.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;BIBLIOGRAFÍA&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML5 for Web Designers, de Jeremy Keith&lt;/li&gt;
&lt;li&gt;Introducing HTML5, de Lawson y Sharp.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/html5/&quot;&gt;Especificación HTML5 del W3C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 23 Dec 2010 00:14:18 +0000</pubDate>
        <link>http://javierholguera.com/2010/12/23/html5-primeros-pasos</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/12/23/html5-primeros-pasos</guid>
        
        <category>article</category>
        
        <category>aside</category>
        
        <category>footer</category>
        
        <category>header</category>
        
        <category>HTML5</category>
        
        <category>nav</category>
        
        <category>section</category>
        
        
        <category>HTML5</category>
        
      </item>
    
      <item>
        <title>IE9 y el Dead Code Elimination</title>
        <description>&lt;p&gt;Llevamos muchos años oyendo que Mozilla Firefox es el navegador más rápido. Unos cuantos menos oyendo que Google Chrome es aún más rápido. Y aún más oyendo decir que Internet Explorer era el más lento de todos. Se ha convertido en una especie de mantra, de verdad fundamental e incuestionable. Casi tan incuestionable como que los ingenieros de Microsoft son todos borderline.&lt;/p&gt;
&lt;p&gt;Pero resulta que en el último año los borderline se han puesto las pilas con Internet Explorer 9 y llevan un año mostrándonos como, Platform Preview tras Platform Preview, IE9 iba poco a poco reduciendo la diferencia que le separaba de Firefox y Chrome en muchos aspectos, especialmente en el capítulo de soporte a estándares y rendimiento.&lt;/p&gt;
&lt;p&gt;En cuanto al primero, asistimos a un ejercicio curioso de manipulación. Cualquiera que esté mínimamente informado sabrá que HTML5 no es un estándar, sino un borrador de trabajo (Working Draft) sobre un futuro estándar. Borrador de trabajo que, por cierto, algunos estiman que &lt;a href=&quot;○ http://blogs.techrepublic.com.com/programming-and-development/?p=718&quot;&gt;no será aprobado como estándar de forma oficial hasta… ¡2022!&lt;/a&gt; (no lo digo yo, ni Microsoft, lo dice el editor del estándar, empleado de Google para más señas).&lt;/p&gt;
&lt;p&gt;Pues esta verdad con respecto a HTML5 y al hecho de que no es más que un borrador, no impide a algunos atacar a otros bajo la ofensa de no haber implementado características del borrador que no son, ni mucho menos, estables. Sentencia: se sigue sin ser respetuoso con los estándares (a pesar de no existir como tales).&lt;/p&gt;
&lt;h6&gt;La Noticia&lt;/h6&gt;
&lt;p&gt;Pero si el proceso resulta bastante evidente con respecto al soporte a estándares, no menos lo es en lo que respeta al rendimiento. Está claro que no resulta sencillo aceptar que las cosas están cambiando. A todos nos pasa, damos algo tan por sentado que cuando deja de ser así, preferimos mirar para otro lado o rebelarnos ante ello. Esto último está pasando con la reciente noticia de que &lt;a href=&quot;http://www.downloadsquad.com/2010/11/17/internet-explorer-9-preview-7-available-takes-sunspider-crown-13-million-downloads/&quot;&gt;IE9 Platform Preview es el navegador más rápido en el test de SunSpider&lt;/a&gt;. No voy a hablar de aceleración por hardware, porque si nos metemos en ese terreno la ventaja es tan abrumadora que nadie podría poner en duda que IE9 es, hoy en día, líder indiscutible en prácticamente todos los aspectos.&lt;/p&gt;
&lt;h6&gt;EL FUD (Fear, Uncertainty and Doubt)&lt;/h6&gt;
&lt;p&gt;El FUD, ese viejo conocido. Si preguntas a cualquier persona que pertenezca al software libre o que tenga antipatía de algún modo por Microsoft (puedes entrar en Barrapunto o Meneame y elegir al azar), te dirá que lo inventó Microsoft.&lt;/p&gt;
&lt;p&gt;Puede que sea verdad, pero lo que es indudablemente cierto es que ha hecho aparición para amortiguar el efecto mediático que habría supuesto que IE9 fuera más rápido que ningún otro navegador, en un microbenchmark creado por la competencia (Sunspider es obra de la gente de WebKit, motor de Safari y Chrome entre otros).&lt;/p&gt;
&lt;p&gt;El resultado ha sido muy satisfactorio. Acceder a Google, poner los términos Internet Explorer y Sunspider, no nos devuelve ningún resultado la primera página relacionado con el éxito de IE9, sólo nos habla del posible (para algunos indudable) asunto de las “trampas” en el microbenchmark. Es decir, hemos pasado de una publicidad positiva basada en hechos objetivos, a una publicidad negativa basada en un supuesto no demostrado y en la viralidad que cualquier crítica, justificada o no, adquiere cuando el objeto del chismorreo es Microsoft. Si esto no es FUD de manual, ya me diréis.&lt;/p&gt;
&lt;h6&gt;El Chismorreo&lt;/h6&gt;
&lt;p&gt;El chismorreo empezó como empiezan estas cosas, con una opinión legítima: un desarrollador de Mozilla se preguntaba porqué Chackra, el motor de Javascript que lleva IE9, no ejecutaba una función parte de uno de los tests (math-cordic) que se ejecutan en Sunspider. En principio se planteaba si era posible que se debiera a la detección de ese método como candidato a una &lt;a href=&quot;http://en.wikipedia.org/wiki/Dead_code_elimination&quot;&gt;Dead Code Elimination&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Una optimización de este tipo busca código que no tiene ningún efecto de un programa y lo elimina. Cuando trabajamos con entornos sin análisis estático del código, es relativamente sencillo no darse cuenta de que, probablemente por un error de programación, estamos ejecutando código que no produce ningún resultado. Un ejemplo burdo:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;public int &lt;/span&gt;Multiplicar(&lt;span style=&quot;color: blue&quot;&gt;int &lt;/span&gt;operando1, &lt;span style=&quot;color: blue&quot;&gt;int &lt;/span&gt;operando2)
{
    &lt;span style=&quot;color: blue&quot;&gt;int &lt;/span&gt;resultado = 0;
    &lt;span style=&quot;color: blue&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;int &lt;/span&gt;i=0; i&amp;lt;operando2; i++)
    {
        resultado += operando1;
    }

    &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;operando1 * operando2;
}&lt;/pre&gt;
&lt;p&gt;En este ejemplo, el bucle es un candidado a ser eliminado, puesto que no realiza ningún función práctica. Exactamente lo mismo ocurría con el método cordicsincos() objeto de esta polémica.&lt;/p&gt;
&lt;p&gt;A partir de aquí, el revuelo cuando alguien decidió sugerir que esto no era una simple característica nueva en Chackra sino una optimización específicamente pensada para mejorar los resultados en Sunspider y colocarse primero. “Cheat” y “Microsoft” juntos en la misma frase, resultado esperado: el rumor se extendió por la pólvora. La base para tal afirmación estaba en el hecho de que, &lt;a href=&quot;http://news.ycombinator.com/item?id=1913315&quot;&gt;modificando el código y manteniendo un fragmento candidado a ser eliminado, el sistema de análisis del DCE no lo descubría y no lo borraba&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;De poco ha valido la explicación que ha aportado la gente del equipo de IE9 en su blog: DCE &lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2010/11/17/html5-and-real-world-site-performance-seventh-ie9-platform-preview-available-for-developers.aspx&quot;&gt;es una nueva característica, está en desarrollo y no cubre todos los escenarios&lt;/a&gt;, además de ser necesario mantener un balance entre la cantidad de análisis que se hace sobre el código JS antes de compilarlo, y el rendimiento. Obviamente este tipo de análisis no son triviales y requieren de un tiempo que puede, en definitiva, no merecer la pena cuando va a resultar más rápido ejecutar directamente el código innecesario.&lt;/p&gt;
&lt;p&gt;Con lo que el escenario en que ahora mismo nos encontramos es que la noticia con respecto a IE9 no es que sea tanto o más rápido que sus competidores en este microbenchmark, sino que un ingenierio de la competencia descubrió que el nuevo sistema de DCE de un código que no es ni siquiera una beta, no es capaz de detectar todos los posibles escenarios, pero sí lo hace con uno concreto que forma parte de un microbenchmark (al que tanto Microsoft como &lt;a href=&quot;http://weblogs.mozillazine.org/asa/archives/2010/10/some_sunspider_numbe.html&quot;&gt;gente de Mozilla han restado importancia&lt;/a&gt; puesto que no se asemeja al funcionamiento de los sitios web del mundo real).&lt;/p&gt;
&lt;h6&gt;Mi conclusión&lt;/h6&gt;
&lt;p&gt;Creo que no hace falta que la aporte, porque ya se desprende de mi tono en el artículo. Mi experiencia profesional es limitada y también mi conocimiento de los navegadores. No viví la famosa guerra de los 90, ni la forma en que se regía y comportaba Microsoft en aquellos años. No dudo que fuera el “evil” en el que, supuestamente, Google no quiere convertirse.&lt;/p&gt;
&lt;p&gt;Pero desde que yo estoy en esta profesión, apróximadamente 2006, no he visto ningún movimiento por parte de Microsoft que haya sido mejor o peor que los que ha llevado a cabo Google, Apple o cualquiera de las grandes compañías en el sector. Sin embargo, mientras a Apple se le ríen las gracias (ayer mismo compré un cable para mi Touch que, por no ser de Apple, no lleva un chip y resulta totalmente inútil, 13 euros a la basura), a Google se le permite que gestione nuestros datos personales con mucha alegría y poca gente habla de lo que está haciendo Oracle con MySQL y Java, a Microsoft se la mira con una lupa lo suficientemente potente como para distorsionar la realidad y ver oscuras conspiraciones donde no hay más que un fragmento de código que no es lo suficientemente completo y maduro como para cubrir todos los escenarios posibles.&lt;/p&gt;
&lt;p&gt;Flaco favor nos hacemos los unos a los otros si el escenario de “batalla” se desplaza de la mera destreza técnica a las más burdas tácticas propagandísticas.&lt;/p&gt;
&lt;h6&gt;Bibliografía:&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2010/11/17/html5-and-real-world-site-performance-seventh-ie9-platform-preview-available-for-developers.aspx&quot;&gt;Explicación oficial del equipo de IE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://digitizor.com/2010/11/17/internet-explorer-9-caught-cheating-in-sunspider-benchmark/&quot;&gt;FUD del bueno&lt;/a&gt;: aprovechando el asunto, se llegan a poner en duda los resultados en los tests de HTML5 (que fueron llevados a cabo por la propia W3C)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=1913315&quot;&gt;Hilo de pruebas en Hacker News&lt;/a&gt;: ejemplos que sí detecta y ejemplos que no detecta&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arstechnica.com/microsoft/news/2010/11/lies-damned-lies-and-benchmarks-is-ie9-cheating-at-sunspider.ars&quot;&gt;Arstecnica poniendo un poco de cordura sobre el asunto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.mozilla.com/rob-sayre/2010/11/17/dead-code-elimination-for-beginners/&quot;&gt;El ingeniero de Mozilla sigue apuntando a la trampa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 21 Nov 2010 14:48:26 +0000</pubDate>
        <link>http://javierholguera.com/2010/11/21/ie9-y-el-dead-code-elimination</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/11/21/ie9-y-el-dead-code-elimination</guid>
        
        <category>cheat</category>
        
        <category>Dead Code Elimination</category>
        
        <category>FUD</category>
        
        <category>IE9</category>
        
        <category>trampas</category>
        
        
        <category>Otros</category>
        
      </item>
    
      <item>
        <title>Forzar ejecución en 32 bits</title>
        <description>&lt;p&gt;Escenario: una aplicación .NET ejecutándose en una máquina de 64 bits, que falla. Exactamente el mismo ejecutable, sobre una máquina de un compañero en 32 bits, funciona perfectamente. ¿Podemos forzar a esa aplicación a ejecutarse con compatibilidad 32 bits, como hacen montones de aplicación hoy en día en los entornos de 64 (me viene a la cabeza Visual Studio 2010, por ejemplo). Claramente, sí.&lt;/p&gt;
&lt;p&gt;Después de un poco de investigación, encontré &lt;a href=&quot;http://davidstechtips.com/2010/06/force-net-application-to-run-in-32-bit-process-on-64-bit-windows&quot;&gt;este enlace&lt;/a&gt; describiendo las distintas posibilidades que tenemos. Voy a explicar cuál es la que aplicaba a mi escenario.&lt;/p&gt;
&lt;h6&gt;Modificar flag en Assembly&lt;/h6&gt;
&lt;p&gt;En mi caso, dado que era un compilado ya desplegado (fuera la opción VS) y que era una aplicación de escritorio (fuera la opción de IIS), me quedé con la posibilidad de modificar un flag del assembly.&lt;/p&gt;
&lt;p&gt;En cada assembly existen unas ciertas cabeceras que son modificables mediante la herramienta “CoreFlags”. En este caso concreto, es el flag 32BIT el que tenemos que modificar. Para hacer el cambio, abriríamos una consola de Visual Studio y ejecutaríamos el siguiente comando, para marcar el flag y asegurarnos de que nuestra aplicación se ejecuta sobre 32 bits&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;CorFlags Assembly_a_modificar.exe /32BIT+&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para desactivar el flag, el comando es casi idéntico.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;CorFlags Assembly_a_modificar.exe /32BIT-&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Espero que os resulte tan útil como a mí.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Nov 2010 16:51:20 +0000</pubDate>
        <link>http://javierholguera.com/2010/11/20/forzar-ejecucin-en-32-bits</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/11/20/forzar-ejecucin-en-32-bits</guid>
        
        <category>32bit</category>
        
        <category>corflags</category>
        
        <category>ejecucion</category>
        
        <category>forzar</category>
        
        
        <category>Visual Studio 2010</category>
        
      </item>
    
      <item>
        <title>Silverlight–FallbackValue y TargetNullValue</title>
        <description>&lt;p&gt;En estos días me encuentro inmerso en un proyecto con Silverlight. Uno de los últimos problemas que me he encontrado involucraba el siguiente escenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Control cuya visibilidad está enlazado a una propiedad de un objeto (en este caso, un campo del Content de un NavigationFrame)&lt;/li&gt;
&lt;li&gt;Este frame, en un primer momento, tiene null en esta propiedad Content, hasta que navega.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El problema es que esta navegación se producía un instante después de que el control se creara, por lo que durante ese instante, el binding fallaba y la propiedad de visibilidad se establecía a Visible, que supongo que es el valor por defecto. Después de darle muchas vueltas encontré estas dos propiedades interesantes para este tipo de escenarios.&lt;/p&gt;
&lt;h5&gt;FallbackValue&lt;/h5&gt;
&lt;p&gt;Nos sirve para establecer un valor para el binding, cuando el binding no es capaz de resolverse y obtener un valor. Por ejemplo, en mi escenario, hasta que el NavigationFrame no navegaba por primera vez a alguna pantalla, su Content era null. Al estar mi binding enlazado a una de las propiedades del objeto que esperaba encontrar en Content, y ser éste un null, internamente el Binding estaba fallando con NullReferenceException.&lt;/p&gt;
&lt;p&gt;Para esta situación de fallo, FallbackValue es perfecta. Básicamente estás diciéndole al binding: “si no eres capaz de calcular un valor, ponme éste directamente”.&lt;/p&gt;
&lt;h5&gt;TargetNullValue&lt;/h5&gt;
&lt;p&gt;Esta otra propiedad nos ayuda en otro escenario típico: el valor al que estamos enlazando, es null. Si por ejemplo la visibilidad de nuestro control dependiera de una propiedad string con valores “VISIBLE” y “NOVISIBLE”, podríamos crear un sencillo conversor que se encargara de devolver Visibility.Visible para el primer valor, y Visibility.Collapsed para el segundo.&lt;/p&gt;
&lt;p&gt;¿Qué pasaría si la propiedad string contuviera un null? En tal caso, podríamos o bien modificar nuestro conversor para devolver Visibility.Collapsed también con un valor null. Pero, ¿y si no hemos creado ningún conversor? ¿No es un poco tedioso tener que crear uno sólo para gestionar los valores null? &lt;/p&gt;
&lt;p&gt;Para eso precisamente existe TargetNullValue, que nos permite indicarle al Binding qué valor por defecto queremos que se asigne a la propiedad bindeada, en caso de que el origen del binding (source) tenga un valor null.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Espero que le resulte útil a alguien. A mí ya me hizo perder una hora y pico…&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;3&quot;&gt;Bibliografía&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.data.bindingbase.fallbackvalue(v=VS.95).aspx&quot;&gt;MSDN: BindingBase.FallbackValue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.data.bindingbase.targetnullvalue(v=VS.95).aspx&quot;&gt;MSDN: BindingBase.TargetNullValue&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Nov 2010 10:00:39 +0000</pubDate>
        <link>http://javierholguera.com/2010/11/03/silverlightfallbackvalue-y-targetnullvalue</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/11/03/silverlightfallbackvalue-y-targetnullvalue</guid>
        
        <category>Binding</category>
        
        <category>Null</category>
        
        <category>Silverlight</category>
        
        <category>Value</category>
        
        
        <category>Silverlight</category>
        
      </item>
    
      <item>
        <title>PDC 2010 vía streaming en directo</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/10/pdc_online_10_480x325.jpg&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;pdc_online_10_480x325&quot; border=&quot;0&quot; alt=&quot;pdc_online_10_480x325&quot; src=&quot;http://javierholguera.com/assets/pdc_online_10_480x325_thumb.jpg&quot; width=&quot;360&quot; height=&quot;252&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Me ha llegado un email de la gente de Microsoft comentando que van a ofrecer en directo en sus oficinas el PDC, via streaming. El evento es los días 28 y 29 de Septiembre, a partir de las 18:00 (hora peninsular). &lt;/p&gt;
&lt;p&gt;Entre las actividades que han programado, aparte de presenciar el evento, tenemos esto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video streaming en directo y bajo demanda se presentará en alta resolución (720p) utilizando la tecnología Smooth Streaming de Silverlight.&lt;/li&gt;
&lt;li&gt;Vista en doble pantalla del ponente y de los demos/códigos presentados, con SCREEN PINNING y la posibilidad de etiquetar y marcar como favorito al contenido video.&lt;/li&gt;
&lt;li&gt;Audio traducido y subtítulos en inglés, también en directo.&lt;/li&gt;
&lt;li&gt;Interacción online – Clientes Twitter, un sondeo en tiempo real y una sesión de Q&amp;amp;A en directo con los responsables de producto y expertos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El registro para asistir a esta sesión presencial en Microsoft, &lt;a href=&quot;https://msevents.microsoft.com/cui/EventDetail.aspx?culture=es-ES&amp;amp;EventID=1032460105&amp;amp;IO=nsYgBBXyTg2c24nxvSwkPg%3d%3d&quot;&gt;aquí&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Para los que prefieren verlo tirados desde casa, podéis acceder online desde &lt;a href=&quot;http://player.microsoftpdc.com/session?refid=73301&quot;&gt;aquí&lt;/a&gt;.&amp;#160; &lt;/p&gt;
&lt;p&gt;Y para los que se les olvida todo y luego se arrepienten, sabed que las sesiones quedarán grabadas y podréis disfrutarlas “asíncronamente” cuando os apetezca.&lt;/p&gt;
&lt;h3&gt;¿Qué es el PDC?&lt;/h3&gt;
&lt;p&gt;¿Cómo, que no sabes lo que es el PDC? Pues según dice Microsoft…&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Desde 1991, la Conferencia de Desarrolladores Profesionales (PDC) ha sido el epicentro de los anuncios más importantes acerca del futuro de la plataforma de Microsoft.&amp;#160; Sus sesiones son de un alto nivel técnico, y facilitadas por líderes y equipos que han creado y desarrollado estas mismas tecnologías. Si eres un desarrollador o arquitecto con mucha experiencia, o un líder en el sector informático que toma decisiones estratégicas para su empresa u organización, no puedes perderte la PDC. Para más información visite&amp;#160; microsoftpdc.com.&amp;#160; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Con eso está todo dicho, ¿no? Imprescindible para estar a la última.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Oct 2010 15:21:42 +0000</pubDate>
        <link>http://javierholguera.com/2010/10/27/pdc-2010-va-streaming-en-directo</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/10/27/pdc-2010-va-streaming-en-directo</guid>
        
        <category>conferencia</category>
        
        <category>evento</category>
        
        <category>microsoft</category>
        
        <category>pdc</category>
        
        <category>pdc10</category>
        
        
        <category>Innovacion</category>
        
      </item>
    
      <item>
        <title>Evento “Ciclo de vida unplugged” con Madrid.NET</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/09/SquareWheels.gif&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;SquareWheels&quot; border=&quot;0&quot; alt=&quot;SquareWheels&quot; src=&quot;http://javierholguera.com/assets/SquareWheels_thumb.gif&quot; width=&quot;783&quot; height=&quot;283&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Observemos la imagen que preside este post. ¿Qué podemos ver en ella? ¿Una litografía sobre personas empujando un carro con ruedas cuadradas? No, en realidad lo que vemos es un proyecto software clásico.&lt;/p&gt;
&lt;p&gt;En la delantera tenemos al jefe de proyecto, que desconocedor de la existencia de las ruedas redondas, ha intentado idear un mecanismo para que el proyecto avance más rápidamente que si hubiera que desplazar su pesada carga a mano. Sin embargo, sus buenas intenciones se han plasmado en un EPIC FAIL de ruedas cuadradas del que, por mucho que tira, no consigue poner en marcha.&lt;/p&gt;
&lt;p&gt;Detrás, ejerciendo un terrible esfuerzo empujando el proyecto, tenemos al grupo de sufridos desarrolladores que, más mal que bien, intentan hacer avanzar el engendro rodándolo sobre esas ruedas cuadradas que tan desacertadamente ha diseñado el jefe de proyecto.&lt;/p&gt;
&lt;p&gt;Si quieres evitar ser víctima de semejante estampa, vente al evento de Madrid.NET el próximo jueves 23 de Septiembre. La idea es tener un coloquio/mesa redonda/charla distendida con gurús de la gestión de proyectos como &lt;a href=&quot;http://www.lfraile.net/&quot;&gt;Luis Fraile&lt;/a&gt; y &lt;a href=&quot;http://www.elbruno.com/&quot;&gt;El Bruno&lt;/a&gt;, al tiempo que todos aprendemos de todos y de nuestras propias ruedas cuadradas.&lt;/p&gt;
&lt;p&gt;El link para registrarse es éste: &lt;a title=&quot;https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032462873&amp;amp;Culture=es-ES&quot; href=&quot;https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032462873&amp;amp;Culture=es-ES&quot;&gt;https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032462873&amp;amp;Culture=es-ES&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nos vemos allí.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Sep 2010 13:12:03 +0000</pubDate>
        <link>http://javierholguera.com/2010/09/17/evento-ciclo-de-vida-unplugged-con-madrid-net</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/09/17/evento-ciclo-de-vida-unplugged-con-madrid-net</guid>
        
        <category>ALM</category>
        
        <category>evento</category>
        
        <category>gestión</category>
        
        <category>madrid.net</category>
        
        <category>madriddotnet</category>
        
        
        <category>Otros</category>
        
      </item>
    
      <item>
        <title>Silverlight: Binding de textboxs a propiedades nullables</title>
        <description>&lt;p&gt;No descubro nada si digo que Silverlight tiene un magnífico sistema de binding, con el que nos podemos ahorrar muchísimo “code behind”. Sin embargo, me he encontrado un extraño comportamiento cuando se combina con propiedades nulables, como serían int?. Mi escenario era el siguiente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un textbox bindeado a una propiedad int? en una entidad que era el data context de mi control&lt;/li&gt;
&lt;li&gt;Un botón que, al pulsarlo, lanzaba de forma manual el checkeo de los bindings de todos los textboxs, incluido el anterior (método UpdateSource del binding)&lt;/li&gt;
&lt;li&gt;Todos los métodos set de las propiedades son correctamente invocados, menos el de mi propiedad nulable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¿Por qué? Además, como corolario, todos aquellos que no estaban correctamente formateados, se marcaban con el correspondiente borde rojo, incluido el que aparentemente no había llegado a checkearse. Y por si esto no fuera suficiente misterio, el mensaje que acompañaba al borde rojo, aparentemente había salido de ninguna parte; yo no lo había definido.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h6&gt;MISTERIO DESENTREAÑADO&lt;/h6&gt;
&lt;p&gt;Después de buscar bastante por Internet, llegué a &lt;a href=&quot;http://jeffhandley.com/archive/2008/07/09/binding-to-nullable-values-in-xaml.aspx&quot;&gt;esta página&lt;/a&gt; en la que explicaban el porqué de la situación. Al parecer, los bindings de Silverlight no se actualizan cuando no son capaces de deducir si el valor del control, es “casteable” a la propiedad que se está intentando asignar.&lt;/p&gt;
&lt;p&gt;En mi caso, el textbox, al estar vacío, provocaba que el binding no supiera convertir un string.Empty a un int?, algo lógico por otra parte. De ahí que el método set de la propiedad nunca llegara a llamarse. La última pieza del misterio, el mensaje salido de la nada, era responsabilidad del propio binding, avisando de que no es capaz de hacer la conversión.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h6&gt;La solución&lt;/h6&gt;
&lt;p&gt;Ahora que ya sabemos el porqué, lo mejor es saber cómo resolverlo. Es fácil, necesitamos que “algo” convierta los valores que el binding no va a ser capaz de resolver, a valores que sí sean asignables a nuestras propiedades nulables. Por ejemplo, que cada string.Empty o puñado de caracteres vacíos, se conviertan en un null, algo con lo que el binding sí va a poder manejarse y setear en nuestra propiedades. En definitiva, necesitamos un Converter. Un ejemplo de uno totalmente funcional lo tenéis a continuación:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Class that converts a value from an UI control to a nullable property value.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
/// &amp;lt;remarks&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;This class intents to resolve a &amp;quot;gap&amp;quot; in the Silverlight binding model.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Currently, the binding model is not able to invoke the setter of a nullable property, if
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;the value inside the control is empty.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Silverlight binding mechanism always avoids to invoke a setter if it is not sure how to
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;represent the type of the property to which is binded. For example, in a textbox with an empty
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;value for Text property, it will not set this value to a int? property in the underlying model.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/remarks&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;NullableValueConverter &lt;/span&gt;: &lt;span style=&quot;color: #2b91af&quot;&gt;IValueConverter
&lt;/span&gt;{
    &lt;span style=&quot;color: blue&quot;&gt;#region &lt;/span&gt;IValueConverter Members

    &lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
    /// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Converts a value from the underlying entity into its UI control representation.
    &lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;value&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Value to convert.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;targetType&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Target type.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;parameter&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Conversion parameter.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;culture&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Culture to use in the conversion.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Object converted.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/returns&amp;gt;
    &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;public object &lt;/span&gt;Convert(&lt;span style=&quot;color: blue&quot;&gt;object &lt;/span&gt;value, &lt;span style=&quot;color: #2b91af&quot;&gt;Type &lt;/span&gt;targetType, &lt;span style=&quot;color: blue&quot;&gt;object &lt;/span&gt;parameter, System.Globalization.&lt;span style=&quot;color: #2b91af&quot;&gt;CultureInfo &lt;/span&gt;culture)
    {
        &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;value;
    }

    &lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
    /// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Converts a value from a UI control to its representation in the underlying entity.
    &lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;value&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Value to convert.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;targetType&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Target type.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;parameter&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Conversion parameter.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;culture&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Culture to use in the conversion.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Object converted.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/returns&amp;gt;
    &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;public object &lt;/span&gt;ConvertBack(&lt;span style=&quot;color: blue&quot;&gt;object &lt;/span&gt;value, &lt;span style=&quot;color: #2b91af&quot;&gt;Type &lt;/span&gt;targetType, &lt;span style=&quot;color: blue&quot;&gt;object &lt;/span&gt;parameter, System.Globalization.&lt;span style=&quot;color: #2b91af&quot;&gt;CultureInfo &lt;/span&gt;culture)
    {
        &lt;span style=&quot;color: blue&quot;&gt;string &lt;/span&gt;castedValue = (&lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;)value;
        &lt;span style=&quot;color: blue&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;.IsNullOrEmpty(castedValue) == &lt;span style=&quot;color: blue&quot;&gt;true &lt;/span&gt;|| castedValue.Trim().Length == 0)
        {
            &lt;span style=&quot;color: blue&quot;&gt;return null&lt;/span&gt;;
        }

        &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;value;
    }

    &lt;span style=&quot;color: blue&quot;&gt;#endregion
&lt;/span&gt;}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Y ya lo único que nos faltaría sería utilizarlo en nuestro código XAML, en dos pasos. El primero, definirlo como recurso dentro del XAML en que vamos a usarlo:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;UserControl.Resources&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;        
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;controls&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;NullableValueConverter &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Key&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&amp;quot;NullableValueConverter&amp;quot;/&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;UserControl.Resources&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Y el segundo, asociándolo al binding que hemos establecido entre el control y la propiedad nulable.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: red&quot;&gt;Text&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&amp;quot;{&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Binding &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;MyNullableProperty&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Mode&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=TwoWay, &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;NotifyOnValidationError&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=true, &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;ValidatesOnExceptions&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=true, &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Converter&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;StaticResource &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;NullableValueConverter&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;}}&amp;quot;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Y esto es todo. Espero que os sea de utilidad.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Aug 2010 15:12:55 +0000</pubDate>
        <link>http://javierholguera.com/2010/08/13/silverlight-binding-de-textboxs-a-propiedades-nullables</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/08/13/silverlight-binding-de-textboxs-a-propiedades-nullables</guid>
        
        <category>Binding</category>
        
        <category>nullable</category>
        
        <category>property</category>
        
        <category>Silverlight</category>
        
        
        <category>Silverlight</category>
        
      </item>
    
      <item>
        <title>Filtrar generación en Moles</title>
        <description>&lt;p&gt;Últimamente me he tenido que pelear un poco con Moles. Para los que no sepan qué es Moles, pueden consultar este &lt;a href=&quot;http://javierholguera.com/technoblog/?p=51&quot;&gt;post mío&lt;/a&gt; de hace un tiempo (ya me parezco a Enrique Dans autocitándome). Para los perezosos, resumir en que es un framework para testing que permite inyectar código en cualquier llamada al framework .NET. El ejemplo que suele verse en la mayoría de vídeos y textos demuestra cómo se puede “configurar” lo que queremos que devuelva DataTime.UtcNow, algo que sin Moles resulta imposible, pues UtcNow no tiene método set.&lt;/p&gt;
&lt;p&gt;Bien, si en una librería que estás intentando “molear” tienes un tipo rebelde que se te rompe la generación, o bien prefieres limitar el número de clases que se molean a sólo aquellas que van a utilizar, esto te puede ser de utilidad. En cada mole tendremos un fichero XXX.moles, donde XXX es el ensamblado que hemos moleado. En dicho fichero podemos configurar algunas de las características del mole, lo que hará que se vuelva a generar teniendo en cuenta nuestra configuración.&lt;/p&gt;
&lt;p&gt;Si quisiéramos evitar que se generara código para la clase DateTime en el ensamblado System, deberíamos añadir algo parecido a esto en nuestro fichero .moles:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Moles &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;xmlns&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;http://schemas.microsoft.com/moles/2010/&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Assembly &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;System&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
  &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;CodeStyle &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;DisableUniqueAlias&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;true&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
  &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;StubGeneration&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Types&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Remove &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Namespace&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;System&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: red&quot;&gt;TypeName&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;DateTime&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Types&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;StubGeneration&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;MoleGeneration&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Types&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Remove &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Namespace&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;System&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: red&quot;&gt;TypeName&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;DateTime&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Types&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;MoleGeneration&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Moles&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;El fragmento es bastante autoexplicativo: le estamos indicando que, tanto de la generación de Stubs como de Moles, nos elimine la clase DateTime dentro del espacio de nombres System. Podremos introducir tantas entradas dentro de las etiquetas Types, como tipos queramos evitar “molear”.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Visto en los &lt;a href=&quot;http://social.msdn.microsoft.com/Forums/en/pex/thread/2b8b44e0-6979-4d25-8f49-4c65ece72b46&quot;&gt;Foros de social.msdn.microsoft.com&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Jul 2010 19:10:33 +0000</pubDate>
        <link>http://javierholguera.com/2010/07/27/filtrar-generacin-en-moles</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/07/27/filtrar-generacin-en-moles</guid>
        
        <category>C#</category>
        
        <category>filter</category>
        
        <category>moles</category>
        
        <category>Testing</category>
        
        
        <category>Testing</category>
        
      </item>
    
      <item>
        <title>Atributo InternalsVisibleTo</title>
        <description>&lt;p&gt;El atributo InternalsVisibleTo puede resultarnos muy útil en situaciones en las que tengamos la necesidad de acceder, desde un ensamblado, a los miembros Internal de las clases de otro ensamblado.&lt;/p&gt;
&lt;p&gt;Un ejemplo que me he encontrado últimamente de su uso es en el testeo de aplicaciones Silverlight. Por desgracia, Silverlight no tiene ningún framework de testeo que sea capaz de generar accessors, probablemente porque Reflection no funciona para campos privados en Silverlight.&lt;/p&gt;
&lt;p&gt;Para sustituir esta carencia, en algunos casos podremos marcar la visibilidad de miembros que queramos testear como Internal en lugar de Private y, haciendo uso de InternalsVisibleTo, acceder a ellos desde los correspondientes tests. ¿Cómo lo lograríamos? Son unos pocos pasos:&lt;/p&gt;
&lt;h6&gt;Primer paso: obtener la clave pública &lt;/h6&gt;
&lt;p&gt;Necesitamos conocer la clave pública de firmado del ensamblado al que queremos conceder el privilegio de poder acceder a los miembros internal. Para ello, en una consola de Visual Studio, deberemos introducir el siguiente comando:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;sn -Tp c:UsersjavierprojectsMyProjectDllToGrantAccessToInternals.dll&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;De la salida que nos genera este comando, nos la copiamos para hacer el siguiente paso.&lt;/p&gt;
&lt;h6&gt;Segundo paso: definir el atributo&lt;/h6&gt;
&lt;p&gt;Ahora que ya conocemos la PublicKey del ensamblado (no confudir con la PublicKeyToken que aparece en los qualified names), necesitamos definir el atributo en el fichero AssemblyInfo del proyecto. En dicho fichero deberemos añadir algo como lo siguiente:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;[assembly: InternalsVisibleTo(&amp;quot;DllToGrantAccessToInternals.dll, PublicKey=0024000004…)]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;¿Sencillo no? Con esto ya podríamos ver los miembros Internal del ensamblado en que hemos definido el atributo, desde el ensamblado DllToGrantAccessToInternals.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Jul 2010 18:54:15 +0000</pubDate>
        <link>http://javierholguera.com/2010/07/27/atributo-internalsvisibleto</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/07/27/atributo-internalsvisibleto</guid>
        
        <category>C#</category>
        
        <category>internalsVisibleTo</category>
        
        <category>Silverlight</category>
        
        
        <category>Silverlight</category>
        
      </item>
    
      <item>
        <title>Invocando dinámicamente un método genérico</title>
        <description>&lt;p&gt;No sé si es debido a un bug o simplemente es algo a lo que no hay modo sencillo de dar soporte, pero el caso es que los accessors que podemos utilizar en los proyectos de testing en Visual Studio 2008, no son capaces de invocar métodos que sean privados, estáticos y genéricos (a la vez).&lt;/p&gt;
&lt;p&gt;Una posible solución (desconozco si hay más y más sencillas) es la invocación de estos métodos en nuestros tests mediante Reflection. Con este tipo de fragmentos de código vuelves una y otra vez a por ellos según vas pasando de proyecto en proyecto, aquí queda para el futuro.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   1:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;// Obtener el MethodInfo asociado al metodo a invocar&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   2:  &lt;/span&gt;MethodInfo methodInfo = &lt;span class=&quot;kwrd&quot;&gt;typeof&lt;/span&gt;(ClassToInvoke).GetMethod(&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   3:  &lt;/span&gt;    &lt;span class=&quot;str&quot;&gt;&amp;quot;MethodToInvoke&amp;quot;&lt;/span&gt;, System.Reflection.BindingFlags.Static | BindingFlags.Public);&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   4:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   5:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;// Bindear el tipo con el metodo que queremos invocar&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   6:  &lt;/span&gt;Type[] genericArguments = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Type[] { genericType };&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   7:  &lt;/span&gt;MethodInfo genericMethodInfo = methodInfo.MakeGenericMethod(genericArguments);&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;   8:  &lt;/span&gt;&amp;#160;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;   9:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;// Invocar el metodo y pasarle los parametros necesarios&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  10:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;// El parametro null es el objeto desde el que se invoca el metodo. &lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  11:  &lt;/span&gt;&lt;span class=&quot;rem&quot;&gt;// Al ser un estatico, debe ser null&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  12:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;try&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  13:  &lt;/span&gt;{&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  14:  &lt;/span&gt;    genericMethodInfo.Invoke(&lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt;[] { value1, value2 });&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  15:  &lt;/span&gt;}&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  16:  &lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;catch&lt;/span&gt; (TargetInvocationException ex)&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  17:  &lt;/span&gt;{&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  18:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;// Cualquier excepción lanzada por el método irá wrappeada dentro &lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  19:  &lt;/span&gt;    &lt;span class=&quot;rem&quot;&gt;// de una TargetInvocationException&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  20:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (ex.InnerException != &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  21:  &lt;/span&gt;    {&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  22:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt; ex.InnerException;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  23:  &lt;/span&gt;    }&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  24:  &lt;/span&gt;    &lt;span class=&quot;kwrd&quot;&gt;else&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  25:  &lt;/span&gt;    {&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  26:  &lt;/span&gt;        &lt;span class=&quot;kwrd&quot;&gt;throw&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;lnum&quot;&gt;  27:  &lt;/span&gt;    }&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;lnum&quot;&gt;  28:  &lt;/span&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;style type=&quot;text/css&quot;&gt;
.csharpcode, .csharpcode pre&lt;br /&gt;
{&lt;br /&gt;
	font-size: small;&lt;br /&gt;
	color: black;&lt;br /&gt;
	font-family: consolas, &quot;Courier New&quot;, courier, monospace;&lt;br /&gt;
	background-color: #ffffff;&lt;br /&gt;
	/*white-space: pre;*/&lt;br /&gt;
}&lt;br /&gt;
.csharpcode pre { margin: 0em; }&lt;br /&gt;
.csharpcode .rem { color: #008000; }&lt;br /&gt;
.csharpcode .kwrd { color: #0000ff; }&lt;br /&gt;
.csharpcode .str { color: #006080; }&lt;br /&gt;
.csharpcode .op { color: #0000c0; }&lt;br /&gt;
.csharpcode .preproc { color: #cc6633; }&lt;br /&gt;
.csharpcode .asp { background-color: #ffff00; }&lt;br /&gt;
.csharpcode .html { color: #800000; }&lt;br /&gt;
.csharpcode .attr { color: #ff0000; }&lt;br /&gt;
.csharpcode .alt&lt;br /&gt;
{&lt;br /&gt;
	background-color: #f4f4f4;&lt;br /&gt;
	width: 100%;&lt;br /&gt;
	margin: 0em;&lt;br /&gt;
}&lt;br /&gt;
.csharpcode .lnum { color: #606060; }&lt;/style&gt;
</description>
        <pubDate>Wed, 26 May 2010 15:10:35 +0000</pubDate>
        <link>http://javierholguera.com/2010/05/26/invocando-dinmicamente-un-mtodo-genrico</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/05/26/invocando-dinmicamente-un-mtodo-genrico</guid>
        
        <category>estático</category>
        
        <category>genérico</category>
        
        <category>invocación</category>
        
        <category>Reflection</category>
        
        
        <category>Visual Studio 2008</category>
        
      </item>
    
      <item>
        <title>Web Deploy: Instalación y Uso (Actualizado)</title>
        <description>&lt;p&gt;&lt;strong&gt;Actualización&lt;/strong&gt;: He añadido al artículo original una explicación de porqué es más seguro utilizar usuarios de IIS en lugar de cuentas Windows, así como los problemas que podemos tener con el certificado a la hora de realizar los despliegues. Gracias desde aquí a Fernando Guillot por sus sugerencias.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Son muchas las novedades que han aparecido en Visual Studio 2010, entre ellas varias relacionadas con el despliegue de aplicaciones. A partir de ahora, en el menú contextual de cada proyecto web en VS2010 tendremos tres nuevas opciones, como se muestra en la siguiente imagen: generar un paquete de despliegue (un archivo zip), publicar utilizando alguna de las tecnologías disponibles y establecer la configuración del empaquetamiento/publicación.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/NuevasOpcionesDespliegue.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;NuevasOpcionesDespliegue&quot; border=&quot;0&quot; alt=&quot;NuevasOpcionesDespliegue&quot; src=&quot;http://javierholguera.com/assets/NuevasOpcionesDespliegue_thumb.png&quot; width=&quot;109&quot; height=&quot;194&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Respecto a la publicación, sin duda la principal novedad es poder utilizar la tecnología de Web Deploy, presente en IIS (Internet Information Services) y que ayudará a administradores a simplificar la migración, gestión y despliegue de servidores web IIS. A continuación, vamos a ver cómo instalar y configurar esta tecnología en un servidor Windows Server 2008 R2. Al final del post se detallará cómo configurar Visual Studio 2010 para poder hacer uso de esta nueva forma de despliegue.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h4&gt;Instalación&lt;/h4&gt;
&lt;p&gt;Vamos a partir de una instalación en limpio de Window Server 2008 R2 Standard.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h5&gt;Añadir rol de servidor web&lt;/h5&gt;
&lt;p&gt;El primer paso es añadir el rol de servidor web a nuestra máquina Windows Server. Lanzamos la herramienta “Server Manager” y pulsamos en la opción “Roles”, en el árbol de la parte izquierda. En el centro de la ventana podremos ver una opción para añadir un nuevo rol, como a continuación.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/AnadirRolWeb_Paso1.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;AnadirRolWeb_Paso1&quot; border=&quot;0&quot; alt=&quot;AnadirRolWeb_Paso1&quot; src=&quot;http://javierholguera.com/assets/AnadirRolWeb_Paso1_thumb.png&quot; width=&quot;244&quot; height=&quot;174&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En el asistente que nos aparece, pulsamos el botón “Siguiente” hasta que nos aparezca la lista de roles que podemos instalar. Seleccionamos el rol “Web Server (IIS)” tal como muestra la imagen bajo estas líneas.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/AnadirRolWeb_Paso2.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;AnadirRolWeb_Paso2&quot; border=&quot;0&quot; alt=&quot;AnadirRolWeb_Paso2&quot; src=&quot;http://javierholguera.com/assets/AnadirRolWeb_Paso2_thumb.png&quot; width=&quot;244&quot; height=&quot;181&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Completaremos la instalación del rol indicando que queremos instalar también el servicio de Management, como se puede ver en la siguiente figura. Después, sólo queda esperar a que la instalación termine.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/AnadirRolWeb_Paso3.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;AnadirRolWeb_Paso3&quot; border=&quot;0&quot; alt=&quot;AnadirRolWeb_Paso3&quot; src=&quot;http://javierholguera.com/assets/AnadirRolWeb_Paso3_thumb.png&quot; width=&quot;244&quot; height=&quot;181&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h5&gt;Instalar Web Deploy Tool&lt;/h5&gt;
&lt;p&gt;Ya tenemos instalado nuestro servidor IIS. Ahora debemos “ampliarlo” instalando la herramienta de Web Deploy. Lo primero será &lt;a href=&quot;http://www.iis.net/download/webdeploy&quot;&gt;descargarnos el instalable&lt;/a&gt; y ejecutarlo. &lt;/p&gt;
&lt;p&gt;Una vez ejecutado el fichero que acabamos de descargar, sólo tenemos que seguir el asistente pulsando el botón “Siguiente” hasta que nos ofrezca elegir qué tipo de instalación queremos realizar. Debemos instalar la versión completa si queremos tener a nuestra disposición el servicio “Web Deployment Agent”. &lt;/p&gt;
&lt;p&gt;Tras terminar la instalación, será necesario arrancar a mano este servicio, puesto que está configurado por defecto como manual y parado. Lo haremos abriendo una consola y ejecutando el siguiente comando.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;net start msdepsvc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h4&gt;Configuración del Web Deployment Handler&lt;/h4&gt;
&lt;p&gt;Ya tenemos Web Deploy instalado. Con esto podríamos generar paquetes de instalación con Visual Studio 2010 y desplegarlos en nuestra máquina destino utilizando IIS Manager. Sin embargo, para poder utilizar un perfil de despliegue desde el menú correspondiente de Visual Studio 2010, aún tenemos que dar algunos pasos más.&lt;/p&gt;
&lt;p&gt;Lo primero será activar las conexiones remotas al servicio de Management. Para ello, utilizando el IIS Manager, debemos seleccionar el nodo del servidor y, dentro de la vista de Features, hacer doble click en el icono de “Management Service”. Una vez en la pantalla correspondiente, tal como muestra la siguiente imagen, podremos habilitar las conexiones remotas e indicar que será posible autenticarse tanto con cuentas Windows como con credenciales del IIS Manager.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/ActivarConexionesRemotas.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;ActivarConexionesRemotas&quot; border=&quot;0&quot; alt=&quot;ActivarConexionesRemotas&quot; src=&quot;http://javierholguera.com/assets/ActivarConexionesRemotas_thumb.png&quot; width=&quot;244&quot; height=&quot;175&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;El siguiente paso a ejecutar es conceder privilegios sobre la carpeta en la que se van a hacer los despliegues. En este punto tenemos dos estrategias posibles a seguir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concederle permisos a la cuenta sobre la que corre el servicio de Management, por defecto “Local Service”. Es la opción más sencilla, puesto que no tendremos que crear cuentas extra y, además, más adelante al definir las distintas reglas de despliegue, nos simplificará uno de los pasos. &lt;/li&gt;
&lt;li&gt;La otra opción es crear una cuenta específica y concederle a ella esos privilegios. También podemos optar por crear un grupo y concederle a dicho grupo los permisos. De este modo, permitir a más usuarios poder realizar el despliegue sería tan sencillo como añadirlos al grupo. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sea cual sea el enfoque que tomemos, es importante aclarar que los mismos permisos que se asignan aquí, se deberán conceder más adelante sobre el fichero applicationHost.config, por lo que la decisión tiene claras implicaciones de seguridad.&lt;/p&gt;
&lt;p&gt;Por simplicidad, aquí vamos a concederle los privilegios a “Local Service”. Lo haremos sobre la carpeta donde vamos a desplegar las aplicaciones web, es decir, sobre Inetpubwwwroot, tal como se puede ver en la imagen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/PermisosDirectorioDeploy.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;PermisosDirectorioDeploy&quot; border=&quot;0&quot; alt=&quot;PermisosDirectorioDeploy&quot; src=&quot;http://javierholguera.com/assets/PermisosDirectorioDeploy_thumb.png&quot; width=&quot;244&quot; height=&quot;184&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;El siguiente paso sería crear el usuario de IIS al que queremos conceder la posibilidad de hacer despliegues remotos de aplicaciones. Podríamos crear, en su lugar, una nueva cuenta Windows y realizar todo el proceso con ella. Sin embargo, tendremos un nivel extra de seguridad si utilizamos un usuario de IIS puesto que, en caso de ser comprometido, este usuario no sería reconocido por el sistema ni por ninguna otra aplicación de la máquina. Para ello, de nuevo es necesario utilizar IIS Manager, pulsar sobre el nodo del servidor y, en la ventana de Features, hacer doble click, esta vez sobre el icono de “IIS Manager Users”. En la parte derecha de la pantalla encontraremos un enlace para añadir nuevos usuarios. Tras pulsar en él, podremos introducir en la ventana emergente un nombre para el usuario y una contraseña.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/AnadirIISManagerUsuario.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;AnadirIISManagerUsuario&quot; border=&quot;0&quot; alt=&quot;AnadirIISManagerUsuario&quot; src=&quot;http://javierholguera.com/assets/AnadirIISManagerUsuario_thumb.png&quot; width=&quot;244&quot; height=&quot;184&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Debemos dar permisos al usuario que acabamos de crear sobre el sitio web en el que va a realizar sus despliegues. Para ello, todavía en IIS Manager, pulsamos sobre el nodo que corresponde al sitio web. Sobre la ventana de Features, en este caso correspondiente al sitio web, debemos hacer doble click en el icono de “IIS Manager Permissions”. En la parte derecha de la pantalla podremos ver un enlace para añadir un usuario, que nos mostrará una ventana como la que se ve el imagen que sigue. Esta pantalla permite elegir entre cuentas Windows o cuentas de IIS Manager. Puesto que el usuario que hemos añadido en el paso anterior es del segundo tipo, usaremos el segundo botón para elegirlo de la lista de usuarios de IIS Manager y añadirlo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/AsignarPermisosSobreSitio.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;AsignarPermisosSobreSitio&quot; border=&quot;0&quot; alt=&quot;AsignarPermisosSobreSitio&quot; src=&quot;http://javierholguera.com/assets/AsignarPermisosSobreSitio_thumb.png&quot; width=&quot;244&quot; height=&quot;184&quot; /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h4&gt;Reglas de delegación&lt;/h4&gt;
&lt;p&gt;Recapitulando, en este punto tenemos correctamente creado nuestro usuario IIS y asignados permisos sobre el sitio web. Necesitamos ahora crear diferentes reglas relacionadas con el despliegue de aplicaciones. Vamos a crear un total de tres, siempre utilizando IIS Manager.&lt;/p&gt;
&lt;p&gt;Para crear cada una de las reglas, debemos lanzar IIS Manager si no lo tenemos todavía abierto y pinchar sobre el nodo del servidor. Como en pasos anteriores, pulsaremos en la vista de Features y haremos doble click sobre uno de sus iconos: el que corresponde a “Management Service Delegation”. Pulsando en la parte derecha de la pantalla sobre “Add Rule” aparecerá una ventana emergente como la que muestra la siguiente imagen. Seleccionaremos una regla de tipo “Deploy Applications with Content”. Quedémonos con la secuencia de pasos que nos ha llevado a esta ventana de selección de reglas, puesto que volveremos a ella dos veces más.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/AnadirReglaParaUsuario.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;AnadirReglaParaUsuario&quot; border=&quot;0&quot; alt=&quot;AnadirReglaParaUsuario&quot; src=&quot;http://javierholguera.com/assets/AnadirReglaParaUsuario_thumb.png&quot; width=&quot;244&quot; height=&quot;184&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Aceptamos la configuración por defecto para la regla pulsando OK y en la ventana que aparece despues introducimos el nombre que hayamos dado a nuestro usuario IIS. El resultado que veríamos sería parecido a la siguiente imagen.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/ResultadoReglaDespliegue.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;ResultadoReglaDespliegue&quot; border=&quot;0&quot; alt=&quot;ResultadoReglaDespliegue&quot; src=&quot;http://javierholguera.com/assets/ResultadoReglaDespliegue_thumb.png&quot; width=&quot;244&quot; height=&quot;175&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hay más reglas que podemos configurar, como se ha visto en la pantalla anterior. Otra de las reglas permite al usuario configurar las listas ACL (Access Control Lists) de los ficheros que componen la aplicación web. Para añadirla, es preciso seguir los pasos anteriores y seleccionar en la pantalla de tipos de regla, la denominada “Set Permissions”. Pulsaremos OK en la ventana que aparecerá para crear la regla con sus valores por defecto, y de nuevo introduciremos el nombre del usuario IIS que creamos varios pasos antes.&lt;/p&gt;
&lt;p&gt;La última regla que vamos a añadir permite al usuario la creación de aplicaciones en el servidor IIS. La regla a seleccionar de entre los distintos tipos que aparecen en la ventana tras pulsar el botón de “Add Rule” se llama “Mark Folders as Applications” y presenta una pequeña diferencia con las anteriores: no podemos aceptar la configuración por defecto, puesto que tenemos que seleccionar como cuenta de usuario para ejecutar la regla, la cuenta actual (“Local Service”). Para que la regla funcione correctamente, es necesario que la cuenta sobre la que se ejecuta tenga permisos de escritura sobre el fichero c:windowssystem32inetsvcconfigapplicationHost.config. Por tanto, lo primero será dirigirnos a la carpeta que contiene ese fichero y concederle privilegios de escritura a la cuenta “Local Service”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/PermisosApplicationHosts.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;PermisosApplicationHosts&quot; border=&quot;0&quot; alt=&quot;PermisosApplicationHosts&quot; src=&quot;http://javierholguera.com/assets/PermisosApplicationHosts_thumb.png&quot; width=&quot;244&quot; height=&quot;184&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Una vez hecho eso, añadiremos la regla siguiendo los pasos anteriores. En la ventana que nos aparece tras pulsar “Add Rule”, debemos seleccionar la opción CurrentUser&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/ModificacionReglaAplicaciones.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;ModificacionReglaAplicaciones&quot; border=&quot;0&quot; alt=&quot;ModificacionReglaAplicaciones&quot; src=&quot;http://javierholguera.com/assets/ModificacionReglaAplicaciones_thumb.png&quot; width=&quot;160&quot; height=&quot;244&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Una vez modificada la regla, tras pulsar el botón de OK, la asociaremos con el usuario de IIS como hemos hecho con las anteriores reglas. Con esto, podemos dar la configuración por terminada.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h4&gt;Conexión desde IIS Manager&lt;/h4&gt;
&lt;p&gt;Para comprobar si hemos completado correctamente todo el proceso, podemos &lt;a href=&quot;http://www.iis.net/download/iismanager&quot;&gt;descargar la herramienta de administración remota de IIS&lt;/a&gt; y tratar de conectarnos al servidor que acabamos de configurar.&lt;/p&gt;
&lt;p&gt;Una vez instalada y arrancada, es posible probar si nuestra configuración es correcta intentando conectarnos al sitio con el usuario IIS que creamos. Para ello, tendremos que pulsar en el menú “File” y seleccionar la opción “Connect to a Site”.&lt;/p&gt;
&lt;p&gt;En el asistente que va a aparecer tendremos que meter los siguientes datos en la primera pantalla:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server name: dirección IP o nombre de la máquina que hemos configurado. &lt;/li&gt;
&lt;li&gt;Site name: nombre del sitio. Si es el sitio por defecto de IIS, será “Default Web Site”. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/PrimeraPantallaWizardConexion.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;PrimeraPantallaWizardConexion&quot; border=&quot;0&quot; alt=&quot;PrimeraPantallaWizardConexion&quot; src=&quot;http://javierholguera.com/assets/PrimeraPantallaWizardConexion_thumb.png&quot; width=&quot;244&quot; height=&quot;186&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En la siguiente pantalla del asistente, tendremos que introducir las credenciales de nuestro usuario IIS. Si todo es correcto, tras conectarse nos solicitará confirmación de que confiamos en el certificado con el que se está cifrando la conexión. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/AceptarCertificado.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;AceptarCertificado&quot; border=&quot;0&quot; alt=&quot;AceptarCertificado&quot; src=&quot;http://javierholguera.com/assets/AceptarCertificado_thumb.png&quot; width=&quot;244&quot; height=&quot;170&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Este error nos aparece puesto que el nombre del servidor no coincide con la máquina para la que se ha emitido este certificado. Si pulsamos sobre el botón “View Certificate” para ver más información del mismo, podremos comprobar que en el campo “Issued to” aparecerá siempre “WMSvc-“ seguido del nombre de la máquina. Sin embargo, si generamos un nuevo certificado en IIS con el nombre de la máquina, configuramos el servicio de Management para usarlo con la conexión SSL y especificamos el nombre de la máquina en lugar de su dirección IP para conectarnos a ella, recibiremos este otro aviso. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/10/AvisoCertificadoInvalido_2.png&quot;&gt;&lt;img style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&quot; title=&quot;AvisoCertificadoInvalido_2&quot; border=&quot;0&quot; alt=&quot;AvisoCertificadoInvalido_2&quot; src=&quot;http://javierholguera.com/assets/AvisoCertificadoInvalido_2_thumb.png&quot; width=&quot;244&quot; height=&quot;179&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En este caso, si pinchamos sobre “View details…” nos encontraremos con un poco útil mensaje indicándonos que ha habido un error desconocido. Si las máquina servidor y cliente estuvieran en un dominio en el que ambas confiaran en una máquina con autoridad certificadora, podríamos generar un certificado de dominio y resolver el problema. Sin embargo, en instalaciones de prueba como la de este ejemplo, bajo grupos de trabajo, no resulta práctico y es más productivo instalar el certificado para poder completar el proceso.&lt;/p&gt;
&lt;p&gt;Tras conectarnos y darle un nombre a la nueva conexión, podremos ver información sobre el servidor IIS remoto en nuestra ventana de IIS Manager. Ahora que sabemos que está listo para conectarse a él, nos queda utilizarlo desde Visual Studio 2010.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h4&gt;Conexión desde Visual Studio 2010&lt;/h4&gt;
&lt;p&gt;Ya estamos donde queríamos estar. Tenemos listo Web Deploy en el servidor donde vamos desplegar nuestras aplicaciones web, y ahora sólo nos resta configurar Visual Studio para empezar a disfrutar de las ventajas de esta tecnología.&lt;/p&gt;
&lt;p&gt;En cualquier proyecto web que queramos desplegar, sobre el nombre del proyecto, con el botón derecho del ratón, haremos aparecer el menú que veíamos en la primera imagen de este artículo. Debemos pulsar sobre la opción “Publish” para que se muestre una ventana como la siguiente.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/05/PerfilDespliegueVS2010.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; margin: 4px 10px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;PerfilDespliegueVS2010&quot; border=&quot;0&quot; alt=&quot;PerfilDespliegueVS2010&quot; src=&quot;http://javierholguera.com/assets/PerfilDespliegueVS2010_thumb.png&quot; width=&quot;182&quot; height=&quot;244&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Los datos a introducir serían:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un nombre para el nuevo perfil de publicación. En el ejemplo, “WebDeploy DevIIS”. &lt;/li&gt;
&lt;li&gt;Seleccionar un método de publicación: Web Deploy. &lt;/li&gt;
&lt;li&gt;La dirección del servicio, que será, por defecto, &lt;a href=&quot;http://servidor:8172/MsDeploy.axd&quot;&gt;http://servidor:8172/MsDeploy.axd&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;La aplicación web a crear. Puesto que estamos creando sobre el sitio “Default Web Site”, deberá aparecer antes de la barra. Al otro lado, podemos dar el nombre de una aplicación existente o crear una nueva. &lt;/li&gt;
&lt;li&gt;Si marcamos el checkbox que viene inmediatamente después, estaremos indicando que queremos crear una aplicación en IIS al hacer el despliegue. &lt;/li&gt;
&lt;li&gt;Necesitamos activar el checkbox relacionado con las credenciales si tenemos un certificado de desarrollo, como en este ejemplo. &lt;/li&gt;
&lt;li&gt;Por último, introducimos las credenciales del usuario IIS que definimos varios pasos antes en este artículo. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Una vez configurado correctamente el perfil de despliegue, sólo necesitaremos pulsar el botón de Publish para ver cómo, de forma rápida, limpia y segura, tenemos desplegada nuestra aplicación web en nuestro servidor.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h4&gt;Conclusiones&lt;/h4&gt;
&lt;p&gt;Puede que el proceso inicial de configuración del servidor resulte laborioso, pero una vez completados los pasos, la ganancia que en tiempo, facilidad y seguridad de despliegue van a obtener tanto administradores como desarrolladores, bien merece la inversión. Desde el punto de vista de los administradores, la granularidad a la hora de controlar qué tareas se permiten para cada usuario, independizando las cuentas del sistema de las cuentas únicamente destinadas a la gestión del servidor web, justifican el esfuerzo.&lt;/p&gt;
&lt;p&gt;Y desde el punto de vista de los desarrolladores, resulta toda una gozada poder desplegar nuestras aplicaciones a entornos de desarrollo, preproducción y producción con en tres clicks. De este modo, pasar de unos entornos a otros dejará de ser la tarea complicada a y propensa a errores que es actualmente.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h4&gt;Bibliografía&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.salvoz.com/2010/02/03/DeployingAspNetMVC2ApplicationToRemoteWebServerUsingMSDeploy.aspx&quot;&gt;Deploying Asp.Net MVC 2 Application to Remote WebServer using MSDeploy&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.iis.net/krolson/archive/2009/11/04/using-iis-manager-accounts-for-web-deployment-tool-msdeploy-delegation.aspx&quot;&gt;Using IIS Manager accounts for Web Deployment Tool (msdeploy) delegation&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iis.net/download/webdeploy&quot;&gt;Web Deploy Home&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://learn.iis.net/page.aspx/421/installing-web-deploy/&quot;&gt;Installing Web Deploy&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 19 May 2010 22:38:35 +0000</pubDate>
        <link>http://javierholguera.com/2010/05/19/web-deploy-instalacin-y-uso</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/05/19/web-deploy-instalacin-y-uso</guid>
        
        <category>IIS</category>
        
        <category>Visual Studio 2010</category>
        
        <category>web deploy</category>
        
        
        <category>Visual Studio 2010</category>
        
      </item>
    
      <item>
        <title>Recetas de Joel para ser número 1</title>
        <description>&lt;p&gt;Me ha encantado esta conferencia de Joel Spolsky sobre cómo hacer que tu aplicación sea la número 1 y no la número 2, 3, etc. Me ha gustado mucho porque la propia conferencia es un ejemplo en sí de que las recetas que Joel propone en ella, realmente funcionan. Aplicadas a su propia conferencia, he disfrutado durante 40 minutos de charla no especialmente relacionada con mis intereses. Pero la forma tan inteligente en que viene “empaquetada” ha conseguido de mí venir rápidamente a mi blog a compartirla con todo el mundo, algo que no he hecho con otras charlas probablemente más orientadas a mis intereses.&lt;/p&gt;
&lt;p&gt;&lt;embed src=&quot;http://blip.tv/play/AYGVmhUC&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;480&quot; height=&quot;390&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
&lt;p&gt;Creo que la lección a aprender es sencilla: los productos que tienen éxito son aquellos que parecen tener un toque mágico. Probablemente sea porque todos llevamos un pequeño niño dentro que se siente inmediatamente atraído por estas cosas que parecen brillar con luz propia.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Apr 2010 14:21:49 +0000</pubDate>
        <link>http://javierholguera.com/2010/04/03/recetas-de-joel-para-ser-nmero-1</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/04/03/recetas-de-joel-para-ser-nmero-1</guid>
        
        <category>conferencia</category>
        
        <category>consejos</category>
        
        <category>joel spolsky</category>
        
        
        <category>Otros</category>
        
      </item>
    
      <item>
        <title>Silverlight: Watermarked control</title>
        <description>&lt;p&gt;Mi experiencia con Silverlight no está siendo todo lo placentera que me gustaría. Me estoy encontrado permanentemente en la necesidad de cambiar las cosas que presume por defecto esta tecnología, para adecuarla a mis necesidades.&lt;/p&gt;
&lt;p&gt;Una de ellas ha sido la creación de un control Textbox con marca de agua. Buscando un poco por Internet el primer enlace redirige al blog de Tim Heuer, donde tenemos un &lt;a href=&quot;http://timheuer.com/blog/archive/2008/10/22/silverlight-watermark-text-box-control.aspx&quot;&gt;ejemplo de implementación&lt;/a&gt; de este control.&lt;/p&gt;
&lt;p&gt;El problema se plantea cuando se quiere utilizar este control para usarlo como control de password. No nos ofrece la posibilidad de enmascarar los caracteres. La solución podría ser algo como esto (no recuerdo si se me ocurrió a mí, lo leí por ahí o adapté algo que hubiera encontrado):&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Changes the visual state when the control changes its text.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;sender&quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Sender of the event.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;e&quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Event arguments.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;private void &lt;/span&gt;OnTextChanged(&lt;span style=&quot;color: blue&quot;&gt;object &lt;/span&gt;sender, &lt;span style=&quot;color: #2b91af&quot;&gt;TextChangedEventArgs &lt;/span&gt;e)
{
    &lt;span style=&quot;color: blue&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.IsPasswordBox == &lt;span style=&quot;color: blue&quot;&gt;true&lt;/span&gt;)
    {
        &lt;span style=&quot;color: #2b91af&quot;&gt;TextBox &lt;/span&gt;textBox = sender &lt;span style=&quot;color: blue&quot;&gt;as &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;TextBox&lt;/span&gt;;
        &lt;span style=&quot;color: blue&quot;&gt;if &lt;/span&gt;(textBox != &lt;span style=&quot;color: blue&quot;&gt;null&lt;/span&gt;)
        {
            &lt;span style=&quot;color: blue&quot;&gt;string &lt;/span&gt;newText = textBox.Text;

            &lt;span style=&quot;color: green&quot;&gt;// If we don't have text, clean the plain text back up.
            &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;.IsNullOrEmpty(newText) == &lt;span style=&quot;color: blue&quot;&gt;true&lt;/span&gt;)
            {
                &lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.Plaintext = &lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;.Empty;
                &lt;span style=&quot;color: blue&quot;&gt;return&lt;/span&gt;;
            }

            &lt;span style=&quot;color: green&quot;&gt;// If the new text is shorter than the previous text, we simply cut the previous text
            &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;if &lt;/span&gt;(newText.Length &amp;lt; &lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.Plaintext.Length)
            {
                &lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.Plaintext = &lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.Plaintext.Substring(0, newText.Length);
                &lt;span style=&quot;color: blue&quot;&gt;return&lt;/span&gt;;
            }

            &lt;span style=&quot;color: green&quot;&gt;// We have an string longer than the previous one. We can have a new character in any place
            // inside the text, so we go along the string to find the new characters (probably only one).
            // This new character will not be the &quot;hidden&quot; character
            &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;StringBuilder &lt;/span&gt;newBackup = &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;StringBuilder&lt;/span&gt;();

            &lt;span style=&quot;color: green&quot;&gt;// We will use the offset because every time we find a character in the new text that is clear,
            // it is a new character. For example, if the new character is in the 5º position, and the next
            // 6º character is hidden, it would be in the 5º position of the old text. So we use the offset
            // to count in which place the character is in the old text.
            &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;int &lt;/span&gt;offset = 0;
            &lt;span style=&quot;color: blue&quot;&gt;for &lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;int &lt;/span&gt;i = 0; i &amp;lt; newText.Length; i++)
            {
                &lt;span style=&quot;color: blue&quot;&gt;if &lt;/span&gt;(newText[i] == &lt;span style=&quot;color: #a31515&quot;&gt;'u25CF'&lt;/span&gt;)
                {
                    &lt;span style=&quot;color: green&quot;&gt;// We add this character from the original plain text to the new one
                    &lt;/span&gt;newBackup.Append(&lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.Plaintext[i + offset]);
                }
                &lt;span style=&quot;color: blue&quot;&gt;else
                &lt;/span&gt;{
                    &lt;span style=&quot;color: green&quot;&gt;// We add this character from the new text, because it's one of the new characters
                    &lt;/span&gt;newBackup.Append(newText[i]);

                    &lt;span style=&quot;color: green&quot;&gt;// We must update the offset
                    &lt;/span&gt;offset--;

                    &lt;span style=&quot;color: green&quot;&gt;// We must change this character in the new text for the hidden character.
                    &lt;/span&gt;newText = newText.Substring(0, i) + &lt;span style=&quot;color: #a31515&quot;&gt;'u25CF' &lt;/span&gt;+ newText.Substring(i + 1, newText.Length - i - 1);
                }
            }

            &lt;span style=&quot;color: green&quot;&gt;// Set the masked text in the control
            &lt;/span&gt;textBox.Text = newText;

            &lt;span style=&quot;color: green&quot;&gt;// Move the caret to the end of the text
            &lt;/span&gt;textBox.SelectionStart = textBox.Text.Length;

            &lt;span style=&quot;color: green&quot;&gt;// Update the backup plain text
            &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.Plaintext = newBackup.ToString();
        }
    }

    &lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.ChangeVisualState(&lt;span style=&quot;color: blue&quot;&gt;true&lt;/span&gt;);
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Por último, quedaría la validación del control. Por desgracia para los que no estamos muy informados sobre cómo funciona Silverlight, el ejemplo de Tim no incluía nada relacionado con la validación del control. Es decir, la validación en sí se realiza con mecanismos ajenos al control, como los Data Annotations. El problema es que, una vez validado el control y encontrado que no es correcta su información, es necesario que pase a un estado “No Válido” y que muestre alguna forma de error.&lt;/p&gt;
&lt;p&gt;Después de darle un poco de vueltas y echarle un vistazo a estilos de otros controles por defecto de Silverlight, ésta es la solución que me está funcionando a las mil maravillas (esta vez, sí, cosecha propia 100%).&lt;/p&gt;
&lt;p&gt;En primer lugar, el estilo para el control. Me voy a limitar a mostrar las partes directamente relacionadas con la validación, puesto que al final del artículo adjunto tanto el estilo del control como el código del mismo.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;VisualStateManager.VisualStateGroups&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;VisualStateGroup &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;ValidationStates&quot;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;VisualState &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Valid&quot;/&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;VisualState &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;InvalidUnfocused&quot;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Storyboard&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ObjectAnimationUsingKeyFrames &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Storyboard.TargetName&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;ValidationErrorElement&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Storyboard.TargetProperty&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Visibility&quot;&amp;gt;
                    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;KeyTime&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;0&quot;&amp;gt;
                        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                            &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Visibility&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Visible&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Visibility&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
            &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Storyboard&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;VisualState&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;VisualState &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;InvalidFocused&quot;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Storyboard&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ObjectAnimationUsingKeyFrames &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Storyboard.TargetName&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;ValidationErrorElement&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Storyboard.TargetProperty&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Visibility&quot;&amp;gt;
                    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;KeyTime&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;0&quot;&amp;gt;
                        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                            &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Visibility&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Visible&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Visibility&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ObjectAnimationUsingKeyFrames &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Storyboard.TargetName&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;validationTooltip&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Storyboard.TargetProperty&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;IsOpen&quot;&amp;gt;
                    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;KeyTime&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;0&quot;&amp;gt;
                        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                            &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Boolean&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;True&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Boolean&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
            &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Storyboard&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;VisualState&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;VisualStateGroup&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;VisualStateManager.VisualStateGroups&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Border &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;ValidationErrorElement&quot;
        &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Visibility&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Collapsed&quot;
        &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;BorderBrush&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;#FFDB000C&quot;
        &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;BorderThickness&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;1&quot;
        &amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ToolTipService.ToolTip&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ToolTip &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;validationTooltip&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Template&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;{&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;StaticResource &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;CommonValidationToolTipTemplate&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;}&quot;
            &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;DataContext&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;{&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Binding &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;RelativeSource&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;RelativeSource &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;TemplatedParent&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;}}&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Placement&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Right&quot;
            &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;PlacementTarget&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;{&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Binding &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;RelativeSource&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;RelativeSource &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;TemplatedParent&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;}}&quot;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ToolTip.Triggers&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;EventTrigger &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;RoutedEvent&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Canvas.Loaded&quot;&amp;gt;
                    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;BeginStoryboard&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Storyboard&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                            &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ObjectAnimationUsingKeyFrames &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Storyboard.TargetName&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;validationTooltip&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Storyboard.TargetProperty&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;IsHitTestVisible&quot;&amp;gt;
                                &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;KeyTime&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;0&quot;&amp;gt;
                                    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                                        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Boolean&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Boolean&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                                    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                                &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                            &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Storyboard&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;BeginStoryboard&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
                &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;EventTrigger&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
            &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ToolTip.Triggers&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ToolTip&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ToolTipService.ToolTip&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Grid &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Height&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;12&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;HorizontalAlignment&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Right&quot;
          &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Margin&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;1,-4,-4,0&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;VerticalAlignment&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Top&quot;
          &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Width&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;12&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Background&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Transparent&quot;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Path &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Fill&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;#FFDC000C&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Margin&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;1,3,0,0&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z&quot;/&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Path &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Fill&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;#ffffff&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Margin&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;1,3,0,0&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;M 0,0 L2,0 L 8,6 L8,8&quot;/&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Grid&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Border&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;A destacar especialmente que hay dos partes claramente diferenciadas en el estilo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La parte en la que se definen el grupo de estados “ValidationStates”, formado por los estados “Valid”, “InvalidUnfocused” y “InvalidFocused”. Con estos tres cubriríamos todas las posibilidades relacionadas con el estado del control y su validación.&lt;/li&gt;
&lt;li&gt;La otra parte relevante del estilo es la definición de un elemento “ValidationErrorElement”, que junto al tooltip nos permite marcar, en este caso en rojo, el control que ha fallado y mostrar un mensaje con información del error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La segunda parte de este truco consiste en definir las transacciones correspondientes entre los estados del control así como dispararlas ante eventos concretos que acontezcan en el control. En este caso, es necesario definir una propiedad “isErroneous” para indicar cuándo el control ha pasado al estado erróneo. Esta propiedad la controlaremos conectándonos al evento BindingValidationError, tal como se muestra en el siguiente extracto del código del control:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Indicates if the control is in an erroneous state.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;private bool &lt;/span&gt;isErroneous;

&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Initializes a new instance of the &lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;see cref=&quot;WatermarkedTextBox&quot;/&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;class.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;public &lt;/span&gt;WatermarkedTextBox()
{
    &lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.BindingValidationError += &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;EventHandler&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #2b91af&quot;&gt;ValidationErrorEventArgs&lt;/span&gt;&amp;gt;(WatermarkedTextBox_BindingValidationError);
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;El código que vamos a ligar al evento es tan sencillo como lo que podemos ver a continuación:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Configures the properties of the control to indicate it has an error.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;sender&quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Sender of the event.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;e&quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Event arguments.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;private void &lt;/span&gt;WatermarkedTextBox_BindingValidationError(&lt;span style=&quot;color: blue&quot;&gt;object &lt;/span&gt;sender, &lt;span style=&quot;color: #2b91af&quot;&gt;ValidationErrorEventArgs &lt;/span&gt;e)
{
    &lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.isErroneous = e.Action == &lt;span style=&quot;color: #2b91af&quot;&gt;ValidationErrorEventAction&lt;/span&gt;.Added ? &lt;span style=&quot;color: blue&quot;&gt;true &lt;/span&gt;: &lt;span style=&quot;color: blue&quot;&gt;false&lt;/span&gt;;
    &lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.ChangeVisualState(&lt;span style=&quot;color: blue&quot;&gt;true&lt;/span&gt;);
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Controlando la acción que acompaña como argumento al evento, podremos saber si la función ha saltado porque el control ha entrado o ha salido del estado erróneo. Toda la lógica, y por tanto lo relevante, queda relegado al método ChangeVisualState. Este método controlará las transacciones entre los distintos estados en los que puede estar el control. Un extracto de este método, específico para la parte de validación de errores, en el siguiente fragmento:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Change to the correct visual state for the textbox.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;useTransitions&quot;&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;true to use transitions when updating the visual state, false to
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;snap directly to the new visual state.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;private void &lt;/span&gt;ChangeVisualState(&lt;span style=&quot;color: blue&quot;&gt;bool &lt;/span&gt;useTransitions)
{

    &lt;span style=&quot;color: green&quot;&gt;// Update the ValidationStates group
    &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.hasFocus &amp;amp;&amp;amp; &lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.isErroneous)
    {
        &lt;span style=&quot;color: #2b91af&quot;&gt;VisualStateHelper&lt;/span&gt;.GoToState(&lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;, useTransitions, &lt;span style=&quot;color: #2b91af&quot;&gt;VisualStateHelper&lt;/span&gt;.InvalidFocused, &lt;span style=&quot;color: #2b91af&quot;&gt;VisualStateHelper&lt;/span&gt;.InvalidUnfocused);
    }
    &lt;span style=&quot;color: blue&quot;&gt;else if &lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;.isErroneous)
    {
        &lt;span style=&quot;color: #2b91af&quot;&gt;VisualStateHelper&lt;/span&gt;.GoToState(&lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;, useTransitions, &lt;span style=&quot;color: #2b91af&quot;&gt;VisualStateHelper&lt;/span&gt;.InvalidUnfocused);
    }
    &lt;span style=&quot;color: blue&quot;&gt;else
    &lt;/span&gt;{
        &lt;span style=&quot;color: #2b91af&quot;&gt;VisualStateHelper&lt;/span&gt;.GoToState(&lt;span style=&quot;color: blue&quot;&gt;this&lt;/span&gt;, useTransitions, &lt;span style=&quot;color: #2b91af&quot;&gt;VisualStateHelper&lt;/span&gt;.StateValid);
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;Cómo se puede ver, dependiendo de si el control tiene foco o no, se pasa a los distintos estados inválidos en caso de existir errores. Caso de no haberlos, se pasa a un estado de validez que desactiva los adornos de estilo informativos.&lt;/p&gt;
&lt;p&gt;El resultado es un control que se comporta igual que los textbox por defecto de Silverlight, a pesar de ser totalmente personalizado. En cualquier caso, cambiar el aspecto que mostrará al entrar en estado erróneo es tan sencillo como modificar el estilo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/03/Ejemplo.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;Ejemplo&quot; src=&quot;http://javierholguera.com/assets/Ejemplo_thumb.png&quot; border=&quot;0&quot; alt=&quot;Ejemplo&quot; width=&quot;373&quot; height=&quot;166&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Descargas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/03/WatermarkedTextbox.cs.txt&quot;&gt;Watermarked Textbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/03/ControlTemplates.xaml&quot;&gt;Control Template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PD: Perdonad los comentarios en inglés en el código, pero es para un proyecto de la empresa en la que trabajo y la pereza me impide ponerme a traducirlo todo :)&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Mar 2010 00:16:41 +0000</pubDate>
        <link>http://javierholguera.com/2010/03/26/silverlight-watermarked-control</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/03/26/silverlight-watermarked-control</guid>
        
        <category>password</category>
        
        <category>Silverlight</category>
        
        <category>textbox</category>
        
        <category>watermarked</category>
        
        
        <category>Silverlight</category>
        
      </item>
    
      <item>
        <title>Desarrollando con Silverlight: Data binding</title>
        <description>&lt;p&gt;Unos cuantos apuntes rápidos sobre Silverlight y Data binding, más a título personal (para no olvidarme de estos recursos y estas conclusiones) que con ánimo de salvarle la vida a nadie (no he conseguido ni arreglar mis propios problemas…).&lt;/p&gt;
&lt;p&gt;En primer lugar, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc278072(VS.95).aspx&quot;&gt;este artículo en MSDN sobre Data Binding&lt;/a&gt;. Algunas de las conclusiones que he podido sacar son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Usar la propiedad DataContext de los objetos para enlazarlos con objetos del CLR (sources). Permite herencia hacia abajo y también se hereda de los controles padre, por lo que si no queremos que un objeto tenga el mismo valor que su padre, habrá que sobreescribirla.&lt;/li&gt;
&lt;li&gt;La propiedad ElementName nos vale para enlazar a otros controles XAML en lugar de a un objeto del CLR&lt;/li&gt;
&lt;li&gt;La propiedad RelativeSource para servir para enlazar a elementos en un Control Template.&lt;/li&gt;
&lt;li&gt;Es necesario implementar INotifyPropertyChanged en los objetos que queramos que funcionen como sources, si queremos tener TwoWay en el binding. Si lo queremos hacer con una colección, tendrá que implementar INotifyCollectionChanged. En cualquier caso, la colección ObservableCollection&amp;lt;T&amp;gt; ya lo hace, con lo que es una buena opción para no reinventar la rueda.&lt;/li&gt;
&lt;li&gt;Si queremos que nos aparezcan esos cartelitos rojos tan chulos con los mensajes de error que hayamos definido (aquí entra en juego los Data Annotations, estupendos para poder hacer validaciones más finas), tenemos que marcar a true las propiedades ValidatesOnException y NotifyOnValidationError del binding, en el fragmento XAML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El punto en que me encuentro ahora es que tengo una validación correcta, pero al estar usando un control con su propio manejo de los estados, no es capaz de mostrar los errores (más bien, imagino que pasar a un estado “erróneo” que, por defecto en SL, tendrá asociada una transición que hace aparecer la caja con el error y demás artificios visuales).&lt;/p&gt;
&lt;p&gt;Enlaces sobre los que trabajar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.silverlight.net/blogs/jesseliberty/archive/2008/10/09/custom-controls-the-denouement.aspx&quot;&gt;Jesse Liberty hablando de controles custom&lt;/a&gt; y cómo definir transiciones con Visual State Manager, entre otros puntos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.silverlight.net/blogs/jesseliberty/archive/2009/07/18/what-s-new-in-silverlight-3-validation.aspx&quot;&gt;Jesse Liberty hablando sobre la validación en controles SL&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tan pronto resuelva el problema, publicaré puntualmente.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Mar 2010 23:54:20 +0000</pubDate>
        <link>http://javierholguera.com/2010/03/23/desarrollando-con-silverlight-data-binding</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/03/23/desarrollando-con-silverlight-data-binding</guid>
        
        <category>custom controls</category>
        
        <category>data binding</category>
        
        <category>enlaces</category>
        
        <category>Silverlight</category>
        
        
        <category>Silverlight</category>
        
      </item>
    
      <item>
        <title>Bing Maps y la realidad aumentada</title>
        <description>&lt;p&gt;Por romper mi silencio reciente (cosas de la ausencia de inspiración), un vídeo espectacular que he descubierto vía el &lt;a href=&quot;http://www.microsoft.com/spain/blog/&quot;&gt;blog corporativo de Microsoft Ibérica&lt;/a&gt;. Trata sobre Bing Maps y, en general, sobre la realidad aumentada, la próxima revolución en cuanto a información se trata.&lt;/p&gt;
&lt;p&gt; &lt;object width=&quot;446&quot; height=&quot;326&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://video.ted.com/assets/player/swf/EmbedPlayer.swf&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;wmode&quot; value=&quot;transparent&quot; /&gt;&lt;param name=&quot;bgColor&quot; value=&quot;#ffffff&quot; /&gt;&lt;param name=&quot;flashvars&quot; value=&quot;vu=http://video.ted.com/talks/dynamic/BlaiseAguerayArcas_2010-medium.mp4&amp;amp;su=http://images.ted.com/images/ted/tedindex/embed-posters/BlaiseAgueraYArcas-2010.embed_thumbnail.jpg&amp;amp;vw=432&amp;amp;vh=240&amp;amp;ap=0&amp;amp;ti=766&amp;amp;introDuration=16500&amp;amp;adDuration=4000&amp;amp;postAdDuration=2000&amp;amp;adKeys=talk=blaise_aguera;year=2010;theme=a_taste_of_ted2010;theme=new_on_ted_com;theme=the_creative_spark;event=TED2010;&amp;amp;preAdTag=tconf.ted/embed;tile=1;sz=512x288;&quot; /&gt;&lt;embed src=&quot;http://video.ted.com/assets/player/swf/EmbedPlayer.swf&quot; pluginspace=&quot;http://www.macromedia.com/go/getflashplayer&quot; type=&quot;application/x-shockwave-flash&quot; wmode=&quot;transparent&quot; bgcolor=&quot;#ffffff&quot; width=&quot;446&quot; height=&quot;326&quot; allowfullscreen=&quot;true&quot; flashvars=&quot;vu=http://video.ted.com/talks/dynamic/BlaiseAguerayArcas_2010-medium.mp4&amp;su=http://images.ted.com/images/ted/tedindex/embed-posters/BlaiseAgueraYArcas-2010.embed_thumbnail.jpg&amp;vw=432&amp;vh=240&amp;ap=0&amp;ti=766&amp;introDuration=16500&amp;adDuration=4000&amp;postAdDuration=2000&amp;adKeys=talk=blaise_aguera;year=2010;theme=a_taste_of_ted2010;theme=new_on_ted_com;theme=the_creative_spark;event=TED2010;&quot;&gt;&lt;/embed&gt;&lt;/object&gt;
&lt;p&gt;Lo reconozco, me encanta la realidad aumentada. Creo que la era de la información en bruto pero desordenada se termina, y el contexto va a ser la próxima revolución.&lt;/p&gt;
&lt;p&gt;Lástima que a día de hoy los servicios que podemos ver en el vídeo no se ofrezcan sobre ciudades españolas. Aunque, al ritmo que progresamos en nuevas tecnologías en este país, lo mismo lo tenemos para… 2020.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2010 17:30:17 +0000</pubDate>
        <link>http://javierholguera.com/2010/02/23/bing-maps-y-la-realidad-aumentada</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/02/23/bing-maps-y-la-realidad-aumentada</guid>
        
        <category>aumentada</category>
        
        <category>bing</category>
        
        <category>maps</category>
        
        <category>realidad</category>
        
        <category>TED</category>
        
        
        <category>Innovacion</category>
        
      </item>
    
      <item>
        <title>WCF4: Activación sin fichero .svc</title>
        <description>&lt;p&gt;Hoy mismo hablaba con un compañero del trabajo sobre los ficheros svc, esos simpáticos amigos que nos permiten identificar la dirección sobre la que tiene que consumirse un servicio web en WCF. Nuestra conversación giraba en torno a la posibilidad de hostear un servicio WCF en una dirección que terminara en .asmx, para reemplazar un servicio web ASP.NET “de los antiguos” por uno de WCF sin que la URL cambiara. ¿Se podrá, pensábamos? Seguramente sí, pero a partir de WCF4 es seguramente más fácil que nunca gracias a la activación de servicios WCF sin fichero .svc.&lt;/p&gt;
&lt;p&gt;¿Cómo hacerlo? Tirando, como no, del app.config. Como siempre, lo más fácil es verlo con un ejemplo. Vamos a partir de un proyecto WCF de ejemplo, de los que nos crea Visual Studio 2010. El contrato de servicio tendrá un método GetData y habrá una clase que implemente dicho servicio. En realidad, nos da un poco igual para lo que vamos a ver.&lt;/p&gt;
&lt;p&gt;Vamos al tema. Nuestro fichero app.config tendrá un aspecto parecido a éste:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;configuration&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceHostingEnvironment&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceActivations&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;add &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;relativeAddress&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&quot;&lt;span style=&quot;color: blue&quot;&gt;MyVirtualSvcFile.svc&lt;/span&gt;&quot; &lt;span style=&quot;color: red&quot;&gt;service&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&quot;&lt;span style=&quot;color: blue&quot;&gt;WcfService.Service&lt;/span&gt;&quot;&lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceActivations&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceHostingEnvironment&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;configuration&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;Como ya hemos comentado en post anteriores, la configuración se reduce a la mínima expresión en WCF4. En este caso estamos dejando al framework que se encargue de generarnos los bindings por defecto, y simplemente le indicamos que vamos a tener la dirección virtual con un “fichero” svc que activará el servicio indicado en el atributo “service”.&lt;/p&gt;
&lt;p&gt;De este modo, cuando nos dirijamos a la dirección &lt;a href=&quot;http://dominio/RutaServicio/MyVirtualSvcFile.svc&quot;&gt;http://dominio/RutaServicio/MyVirtualSvcFile.svc&lt;/a&gt; veremos la clásica pantalla de WCF indicándonos que no tenemos los metadatos activados, como se muestra en la siguiente imagen:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/02/ServicelessActivation.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;ServicelessActivation&quot; src=&quot;http://javierholguera.com/assets/ServicelessActivation_thumb.png&quot; border=&quot;0&quot; alt=&quot;ServicelessActivation&quot; width=&quot;487&quot; height=&quot;350&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Todo esto es muy bonito, pero no responde a la pregunta original: ¿podríamos usar una URL terminada en .asmx para activar el servicio WCF? Pues, al menos con esta aproximación mediante las nuevas configuraciones de WCF4… NO. Éste es el bonito error que obtenemos cuando lo intentemos:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/02/ServicelessActivationFailed.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;ServicelessActivationFailed&quot; src=&quot;http://javierholguera.com/assets/ServicelessActivationFailed_thumb.png&quot; border=&quot;0&quot; alt=&quot;ServicelessActivationFailed&quot; width=&quot;484&quot; height=&quot;351&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Una pena. En cualquier caso, esta nueva forma de activar los servicios nos ahorrará tener que andar preocupados de crear N ficheros .svc, tantos como servicios queramos activar. Mucho mejor tenerlos convenientemente descritos en el fichero app.config.&lt;/p&gt;
&lt;p&gt;Actualización: El problema lo da con cualquier extensión que no sea .svc. De paso, &lt;a href=&quot;http://social.msdn.microsoft.com/Forums/en/wcfprerelease/thread/8ff1ab96-f5d2-4ea7-b536-4fce5f480e9d&quot;&gt;hay quien dice que ya no está disponible esta característica&lt;/a&gt;. ¡ Para luego hacerle caso a a los de Microsoft !&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Feb 2010 23:39:27 +0000</pubDate>
        <link>http://javierholguera.com/2010/02/10/wcf4-activacin-sin-fichero-svc</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/02/10/wcf4-activacin-sin-fichero-svc</guid>
        
        <category>activation</category>
        
        <category>fileless</category>
        
        <category>service</category>
        
        <category>wcf4</category>
        
        
        <category>Visual Studio 2010</category>
        
      </item>
    
      <item>
        <title>WCF: OneWay y bloqueo del cliente</title>
        <description>&lt;p&gt;Cuando me estaba preparando el MCTS sobre WCF leí una afirmación sorprendente en el Training Kit oficial de Microsoft. En él venían a decir sus autores, en una traducción más o menos libre, lo siguiente sobre el patrón de intercambio de mensajes OneWay:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Dada la naturaleza OneWay del canal, uno podría pensar que, tan pronto el consumidor envía el mensaje, éste se procesa asíncronamente y el cliente es libre de hacer otras cosas. Sin embargo, la forma en que la maquinaria de WCF funciona significa que el consumidor, de hecho, se bloquea, incluso si el mensaje es OneWay, hasta que el dispatcher entrega el mensaje a una instancia del servicio, en la forma de una llamada a un método del objeto.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Teniendo en cuenta que OneWay es un patrón “Fire-and-Forget”, no encaja mucho que el cliente tenga que mantenerse bloqueado hasta que el servidor entrega el mensaje a un objeto que implemente el contrato de servicio. Es importante recordar que alguna de las particularidades de OneWay no hacen sino resaltar esta naturaleza “Fire-and-Forget”; por ejemplo, las siguientes dos propiedades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un método OneWay no soporta retornar ningún resultado, siempre será un método void. Tampoco soporta el atributo FaultContract, pues no pueden definirse errores que vaya a devolver al no tener capacidad de devolver nada.&lt;/li&gt;
&lt;li&gt;Un método OneWay no soporta fluir transacciones entre el cliente y el servidor, y viceversa.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No parece que lo afirmado por los autores del Training Kit encaje mucho con estas propiedades (y otras que se quedan en el tintero) de OneWay. Así que lo mejor es salir de dudas con un pequeño ejemplo, para ver la validez de dicho comentario. &lt;/p&gt;
&lt;p&gt;La forma más sencilla de poder comprobarlo es aprovecharse de la forma en que está definido el pipeline de WCF. Son varios los puntos de extensibilidad que tiene este framework. Si colocáramos en uno de ellos una clase que retuviera la entrega del mensaje a un objeto servidor, podríamos comprobar si efectivamente el cliente sigue bloqueado. Para comprobarlo, vamos a usar un Message Inspector.&lt;/p&gt;
&lt;h5&gt;Inyectar un Message Inspector&lt;/h5&gt;
&lt;p&gt;Vamos a partir de un nuevo proyecto de librería WCF. La estructura que nos genera Visual Studio nos vale; dejaremos únicamente un método que no devuelva nada, como se ve a continuación.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;One Way Service.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;[&lt;span style=&quot;color: #2b91af&quot;&gt;ServiceContract&lt;/span&gt;]
&lt;span style=&quot;color: blue&quot;&gt;public interface &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;IService
&lt;/span&gt;{
    &lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
    /// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;OneWay method.
    &lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;value&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Value to send.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
    &lt;/span&gt;[&lt;span style=&quot;color: #2b91af&quot;&gt;OperationContract&lt;/span&gt;(IsOneWay=&lt;span style=&quot;color: blue&quot;&gt;true&lt;/span&gt;)]
    &lt;span style=&quot;color: blue&quot;&gt;void &lt;/span&gt;SendData(&lt;span style=&quot;color: blue&quot;&gt;int &lt;/span&gt;value);
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;La implementación de este contrato de servicio no tiene demasiada importancia, con saber que deberíamos colocar un breakpoint al comienzo del método para saber en qué momento es realmente invocado, es suficiente.&lt;/p&gt;
&lt;p&gt;Vamos ahora a empezar a crear el Message Inspector. Crearemos una clase que implemente la interfaz IDispatchMessageInspector e implementaremos uno de sus métodos.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;My message inspector class.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;MyMessageInspector &lt;/span&gt;: &lt;span style=&quot;color: #2b91af&quot;&gt;IDispatchMessageInspector
&lt;/span&gt;{
    &lt;span style=&quot;color: blue&quot;&gt;public object &lt;/span&gt;AfterReceiveRequest(
        &lt;span style=&quot;color: blue&quot;&gt;ref &lt;/span&gt;System.ServiceModel.Channels.&lt;span style=&quot;color: #2b91af&quot;&gt;Message &lt;/span&gt;request, 
        System.ServiceModel.&lt;span style=&quot;color: #2b91af&quot;&gt;IClientChannel &lt;/span&gt;channel, 
        System.ServiceModel.&lt;span style=&quot;color: #2b91af&quot;&gt;InstanceContext &lt;/span&gt;instanceContext)
    {
        &lt;span style=&quot;color: green&quot;&gt;// Crear un &amp;quot;replicador&amp;quot; de mensajes y usarlo para obtener una copia del mismo
        &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;MessageBuffer &lt;/span&gt;buffer = request.CreateBufferedCopy(&lt;span style=&quot;color: blue&quot;&gt;int&lt;/span&gt;.MaxValue);
        &lt;span style=&quot;color: blue&quot;&gt;string &lt;/span&gt;messageContent = buffer.CreateMessage().GetReaderAtBodyContents().ReadOuterXml();
        System.Diagnostics.&lt;span style=&quot;color: #2b91af&quot;&gt;Debug&lt;/span&gt;.WriteLine(messageContent);
        
        &lt;span style=&quot;color: green&quot;&gt;// Asignar una copia sin leer del mensaje en request, para que otros 
        // componentes del pipeline de WCF puedan leerlo sin fallar.
        &lt;/span&gt;request = buffer.CreateMessage();

        &lt;span style=&quot;color: green&quot;&gt;// Devolver null como resultado, que será lo que reciba el metodo BeforeSendReply
        // en el parámetro correlationState
        &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;return null&lt;/span&gt;;
    }

    &lt;span style=&quot;color: blue&quot;&gt;public void &lt;/span&gt;BeforeSendReply(
        &lt;span style=&quot;color: blue&quot;&gt;ref &lt;/span&gt;System.ServiceModel.Channels.&lt;span style=&quot;color: #2b91af&quot;&gt;Message &lt;/span&gt;reply, 
        &lt;span style=&quot;color: blue&quot;&gt;object &lt;/span&gt;correlationState)
    {
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;En cuanto al método AfterReceiveRequest, se ejecuta en el camino de subida del mensaje desde la red hacia el objeto que va a servir esta petición. Queremos mostrarlo en la consola, para lo cual vamos a crear un buffer y generar una copia del mismo. Es importante usar el buffer en primer lugar, puesto que un mensaje no puede leerse dos veces. Si lo hiciéramos con el parámetro request, luego no podría leerse otra vez por otros componentes del pipeline de WC y cada petición fallaría irremediablemente.&lt;/p&gt;
&lt;p&gt;En cuanto al método BeforeSendReply, no queremos hacer nada especial con él así que simplemente dejamos pasar el mensaje reply, sin leerlo para no tener el problema antes comentado de lecturas. Como curiosidad, decir que lo que devuelve el método AfterReceiveRequest lo recibe el método BeforeSendReply en su parámetro correlationState, para poder relacionar ambas llamadas entre sí.&lt;/p&gt;
&lt;p&gt;Ahora que ya tenemos el Inspector, es el momento de modificar la configuración de WCF para usarlo. Para ello tenemos que crear una clase que modifique el comportamiento del endpoint sobre el que vamos a escuchar. Para ello, tendremos que implementar la interfaz IEndpointBehavior.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Custom endpoint behavior.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;MyEndpointBehavior &lt;/span&gt;: &lt;span style=&quot;color: #2b91af&quot;&gt;IEndpointBehavior
&lt;/span&gt;{
    &lt;span style=&quot;color: blue&quot;&gt;public void &lt;/span&gt;AddBindingParameters(&lt;span style=&quot;color: #2b91af&quot;&gt;ServiceEndpoint &lt;/span&gt;endpoint, 
        System.ServiceModel.Channels.&lt;span style=&quot;color: #2b91af&quot;&gt;BindingParameterCollection &lt;/span&gt;bindingParameters)
    {
    }

    &lt;span style=&quot;color: blue&quot;&gt;public void &lt;/span&gt;ApplyClientBehavior(&lt;span style=&quot;color: #2b91af&quot;&gt;ServiceEndpoint &lt;/span&gt;endpoint, 
        System.ServiceModel.Dispatcher.&lt;span style=&quot;color: #2b91af&quot;&gt;ClientRuntime &lt;/span&gt;clientRuntime)
    {
    }

    &lt;span style=&quot;color: blue&quot;&gt;public void &lt;/span&gt;ApplyDispatchBehavior(&lt;span style=&quot;color: #2b91af&quot;&gt;ServiceEndpoint &lt;/span&gt;endpoint, 
        System.ServiceModel.Dispatcher.&lt;span style=&quot;color: #2b91af&quot;&gt;EndpointDispatcher &lt;/span&gt;endpointDispatcher)
    {
        endpointDispatcher.DispatchRuntime.MessageInspectors.Add(&lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;MyMessageInspector&lt;/span&gt;());
    }

    &lt;span style=&quot;color: blue&quot;&gt;public void &lt;/span&gt;Validate(&lt;span style=&quot;color: #2b91af&quot;&gt;ServiceEndpoint &lt;/span&gt;endpoint)
    {
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;De esta interfaz, como se puede observar, sólo nos interesa implementar el método ApplyDispatchBehavior, puesto que nuestro MessageInspector sólo va a actuar en el lado del servidor. Es importante no dejarnos ningún método con su implementación por defecto, puesto que tirar una NotImplementedException en cualquiera de ello tendría consecuencias indeseadas.&lt;/p&gt;
&lt;p&gt;Ya sólo nos queda una última clase para tener todo el código listo. Este comportamiento personalizado para el endpoint necesitamos configurarlo de algún modo. La forma más limpia siempre es a través del fichero app.config, pero para ello necesitamos representar este comportamiento personalizable como un elemento de configuración. Esto podemos hacerlo creando una clase que herede de BehaviorExtensionElement, clase que por otra parte cargará nuestro comportamiento custom para el endpoint. El código sería algo así:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Custom behavior extension element for the custom endpoint behavior.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;MyBehaviorExtensionElement &lt;/span&gt;: &lt;span style=&quot;color: #2b91af&quot;&gt;BehaviorExtensionElement
&lt;/span&gt;{
    &lt;span style=&quot;color: blue&quot;&gt;public override &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;Type &lt;/span&gt;BehaviorType
    {
        &lt;span style=&quot;color: blue&quot;&gt;get &lt;/span&gt;{ &lt;span style=&quot;color: blue&quot;&gt;return typeof&lt;/span&gt;(&lt;span style=&quot;color: #2b91af&quot;&gt;MyEndpointBehavior&lt;/span&gt;); }
    }

    &lt;span style=&quot;color: blue&quot;&gt;protected override object &lt;/span&gt;CreateBehavior()
    {
        &lt;span style=&quot;color: blue&quot;&gt;return new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;MyEndpointBehavior&lt;/span&gt;();
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;¿Sencillo, verdad? La clase simplemente representa al comportamiento personalizado que deseamos añadir como configuración. ¿Y ahora esto cómo se usaría? Primero se cargaría la clase que acabamos de definir como una extensión de los behaviors, y posteriormente se definiría como nueva configuración para un endpoint. Finalmente se cargaría en el endpoint correspondiente esta nueva configuración. Sin embargo, con las novedades que trae WCF4 en la configuración, este último paso podemos saltárnoslo, sabiendo que a partir de ese momento todos los endpoints van a tener esa extensión cargada.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;  &lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;extensions&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behaviorExtensions&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;add &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;myCustomEndpointBehavior&lt;/span&gt;&amp;quot; 
             &lt;span style=&quot;color: red&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;OneWayService.MyBehaviorExtensionElement, OneWayService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behaviorExtensions&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;      
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;extensions&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;endpointBehaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behavior&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;myCustomEndpointBehavior&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behavior&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;endpointBehaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceBehaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behavior&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceMetadata &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;httpGetEnabled&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;true&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behavior&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceBehaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;Como se puede ver, en primer lugar se carga la extensión y, a continuación, se define como parte del comportamiento de los endpoints. Al no darle nombre al endpointBehavior, se cargará para todos los endpoints existentes. Por último, he activado la generación del fichero WSDL para poder generar un proxy.&lt;/p&gt;
&lt;h5&gt;Probando el inspector&lt;/h5&gt;
&lt;p&gt;Bien, suponiendo que ya tenemos el servicio arriba y un proyecto de cliente correctamente creado. Tras añadir la referencia al servicio, podemos escribir algo como lo siguiente para ver si realmente nuestro cliente se bloquea o no.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;using &lt;/span&gt;(ServiceReference.&lt;span style=&quot;color: #2b91af&quot;&gt;ServiceClient &lt;/span&gt;proxy = &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;ServiceReference.&lt;span style=&quot;color: #2b91af&quot;&gt;ServiceClient&lt;/span&gt;())
{
    &lt;span style=&quot;color: #2b91af&quot;&gt;Console&lt;/span&gt;.WriteLine(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Calling the remote server...&amp;quot;&lt;/span&gt;);
    proxy.SendData(&lt;span style=&quot;color: blue&quot;&gt;int&lt;/span&gt;.MaxValue);
    &lt;span style=&quot;color: #2b91af&quot;&gt;Console&lt;/span&gt;.WriteLine(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Remote server called...&amp;quot;&lt;/span&gt;);
    &lt;span style=&quot;color: #2b91af&quot;&gt;Console&lt;/span&gt;.ReadLine();
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Con esto, es momento de lanzar el cliente. Deberemos tener breakpoints tanto en el método que hemos implementado del inspector, como en la clase que implementa el servicio. Si todo va bien veremos la siguiente secuencia de pasos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El cliente invoca al servicio usando el proxy.&lt;/li&gt;
&lt;li&gt;Salta el breakpoint en el MessageInspector. Si ejecutamos cualquiera de las instrucciones del inspector, con ejecución paso a paso, veremos que inmediatamente salta el breakpoint del cliente. Por lo tanto, &lt;strong&gt;no se está bloqueando&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;El servidor se queda esperando a que sigamos la ejecución, para llegar al objeto servidor, donde el otro breakpoint debería saltar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;He probado el mismo código con las mismas condiciones (el servicio desplegado en IIS 7.0), pero con el framework anterior y el resultado es el mismo. Parece, por tanto, que &lt;strong&gt;OneWay sí es realmente un patrón “Fire-and-Forget” y no bloquea a los clientes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Bibliografía:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.uk/MCTS-Paced-Training-70-503-PRO-Certification/dp/0735625654/ref=sr_1_2?ie=UTF8&amp;amp;s=books&amp;amp;qid=1265582316&amp;amp;sr=8-2&quot;&gt;Microsoft .NET Framework 3.5 – Windows Communication Foundation. Self-Paced Training Kit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Descargas:&lt;/p&gt;
&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:a8ea6f81-7476-4594-8e4c-c795a046e810&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;
&lt;p /&gt;
&lt;div&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/02/CheckingOneWay.zip&quot; target=&quot;_self&quot;&gt;Servicio con OneWay&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 07 Feb 2010 23:40:22 +0000</pubDate>
        <link>http://javierholguera.com/2010/02/07/wcf-oneway-y-bloqueo-del-cliente</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/02/07/wcf-oneway-y-bloqueo-del-cliente</guid>
        
        <category>block</category>
        
        <category>oneway</category>
        
        <category>WCF</category>
        
        
        <category>Visual Studio 2010</category>
        
      </item>
    
      <item>
        <title>Testeo unitario con Moles</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://research.microsoft.com/moles&quot;&gt;Moles&lt;/a&gt; es una nueva virguería de la gente de Microsoft Research; en concreto, del equipo de desarrollo de PEX, una herramienta de generación de tests white-box, para quien no lo conozca.&lt;/p&gt;
&lt;p&gt;¿Qué es Moles? Un nuevo framework que permite sustituir cualquier método de .NET por un delegado. ¿Y qué podemos hacer con esto? Pues sustituir cualquier llamada al framework por lo que queramos que se ejecute. Esto, evidentemente, tiene especial utilidad en el testeo unitario, donde necesitamos crear las condiciones adecuadas para ver cómo se comporta nuestro código. Un ejemplo sencillo, expuesto en &lt;a href=&quot;http://channel9.msdn.com/posts/Peli/Moles-Replace-any-NET-method-with-a-delegate/&quot;&gt;este vídeo por uno de sus creadores&lt;/a&gt;, sería poder “trucar” la hora que nos devuelve DateTime.Now. Como sabemos, no se puede modificar pero… como Moles ¡sí! Si quieres saber cómo, échale un vistazo al vídeo.&lt;/p&gt;
&lt;p&gt;Yo voy a proponer un ejemplo distinto: acceder a las appSettings del ConfigurationManager. En el pasado tuve que modificar la signatura de un método que leía, internalmente, una propiedad de appSettings, para poder testearlo. La razón es que no tenía manera de simular las distintas condiciones (ausencia de la clave buscada, valor malformado, etc) puesto que la clase ConfigurationManager no podía mockearse. La solución al final fue pasarle al método la NameValueCollection que contiene las appSettings, pudiendo así simular mis condiciones de testeo.&lt;/p&gt;
&lt;p&gt;Pero no mola&amp;#160; tener que modificar un método que ya tienes codificado por culpa de las limitaciones del framework de testeo. Aquí es donde Moles va a echarnos una mano. Veamos paso a paso cómo.&lt;/p&gt;
&lt;p&gt;Empecemos con el método que vamos a testear. Digamos que lee una variable de las appSettings y la retorna. Si no existe la clave o tiene un valor vacío, lanza una excepcion. El código podría ser algo así:&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Retrieves app setting by its key.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Value in the settings.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/returns&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;public static string &lt;/span&gt;ExtractAppSetting()
{
    &lt;span style=&quot;color: blue&quot;&gt;string &lt;/span&gt;key = &lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;myKey&amp;quot;&lt;/span&gt;;
    &lt;span style=&quot;color: blue&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color: #2b91af&quot;&gt;ConfigurationManager&lt;/span&gt;.AppSettings.AllKeys.Contains(key) == &lt;span style=&quot;color: blue&quot;&gt;false &lt;/span&gt;||
        &lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;.IsNullOrEmpty(&lt;span style=&quot;color: #2b91af&quot;&gt;ConfigurationManager&lt;/span&gt;.AppSettings[key]) == &lt;span style=&quot;color: blue&quot;&gt;true&lt;/span&gt;)
    {
        &lt;span style=&quot;color: blue&quot;&gt;throw new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;ConfigurationErrorsException&lt;/span&gt;(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Key not found&amp;quot;&lt;/span&gt;);
    }

    &lt;span style=&quot;color: blue&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;ConfigurationManager&lt;/span&gt;.AppSettings[key];
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fácil, ¿no? El test más típico para este código sería aquél en el que previamente hemos configurado una key en la sección AppSettings del fichero App.config y después intentamos recuperarla mediante el método testeado. Suponiendo la existencia de una setting con key “myKey” y valor “myValue”, el siguiente test nos daría un bonito verde.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Test that checks if the method returns the 
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;appropriate value from AppSettings.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;[&lt;span style=&quot;color: #2b91af&quot;&gt;TestMethod&lt;/span&gt;]
&lt;span style=&quot;color: blue&quot;&gt;public void &lt;/span&gt;ExtractAppSettingValidConfigurationOk()
{
    &lt;span style=&quot;color: #2b91af&quot;&gt;Assert&lt;/span&gt;.AreEqual&amp;lt;&lt;span style=&quot;color: blue&quot;&gt;string&lt;/span&gt;&amp;gt;(
        &lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;myvalue&amp;quot;&lt;/span&gt;, 
        &lt;span style=&quot;color: #2b91af&quot;&gt;AppSettingsManager&lt;/span&gt;.ExtractAppSetting(), 
        &lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Invalid value in AppSettings&amp;quot;&lt;/span&gt;);
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bien, ¿y cómo podemos probar ahora el comportamiento de nuestro método si no existiera la key? Quizás, a la desesperada, nos podríamos plantear intentar modificar por código el fichero app.config. Sin embargo, esto no sería una buena idea porque los tests, de tener varios, se lanzan en hilos en paralelo, por lo que podríamos tener resultados inesperados si modificamos este fichero: las clásicas condiciones de carrera.&lt;/p&gt;
&lt;p&gt;La solución nos la aporta Moles. En primer lugar, añadimos una referencia al assembly que contiene la clase ConfigurationManager; es System.Configuration. Después, ya podemos añadir el fichero Moles a nuestro proyecto de testeo, como muestra la siguiente figura. El nombre que le daremos debería coincidir con el assembly que vamos a “molear” (¡toma palabro!).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/02/AddingMolesFile.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;AddingMolesFile&quot; border=&quot;0&quot; alt=&quot;AddingMolesFile&quot; src=&quot;http://javierholguera.com/assets/AddingMolesFile_thumb.png&quot; width=&quot;323&quot; height=&quot;227&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Una vez creado el fichero Moles, ya podemos empezar a usar su “magia” en nuestro código de testeo. Creamos otro test, pero esta vez probará que el método lanza una excepción si las AppSettings están vacías y, por tanto, no contienen la key que estamos buscando. ¿Cómo se haría esto? Sencillo, usando el mole del ConfigurationManager, que nos dará la posibilidad de modificar la colección AppSettings.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Test that checks if the method throws an exception if 
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;the AppSettings is empty.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;[&lt;span style=&quot;color: #2b91af&quot;&gt;TestMethod&lt;/span&gt;]
[&lt;span style=&quot;color: #2b91af&quot;&gt;ExpectedException&lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;typeof&lt;/span&gt;(&lt;span style=&quot;color: #2b91af&quot;&gt;ConfigurationErrorsException&lt;/span&gt;))]
&lt;span style=&quot;color: blue&quot;&gt;public void &lt;/span&gt;ExtractAppSettingEmptySettingsExceptionExpected()
{
    &lt;span style=&quot;color: #2b91af&quot;&gt;MConfigurationManager&lt;/span&gt;.AppSettingsGet = () =&amp;gt; &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;NameValueCollection&lt;/span&gt;();
    &lt;span style=&quot;color: #2b91af&quot;&gt;AppSettingsManager&lt;/span&gt;.ExtractAppSetting();
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;Aún nos quedaría un último paso, puesto que si lanzáramos el test ahora mismo nos daría una excepción en tiempo de ejecución indicándonos que tenemos que añadir el siguiente atributo para indicar que el test tiene que ejecutarse “hosteado” por Moles. El test quedaría así finalmente:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Test that checks if the method throws an exception if 
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;the AppSettings is empty.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;[&lt;span style=&quot;color: #2b91af&quot;&gt;TestMethod&lt;/span&gt;]
[&lt;span style=&quot;color: #2b91af&quot;&gt;HostType&lt;/span&gt;(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Moles&amp;quot;&lt;/span&gt;)]
[&lt;span style=&quot;color: #2b91af&quot;&gt;ExpectedException&lt;/span&gt;(&lt;span style=&quot;color: blue&quot;&gt;typeof&lt;/span&gt;(&lt;span style=&quot;color: #2b91af&quot;&gt;ConfigurationErrorsException&lt;/span&gt;))]
&lt;span style=&quot;color: blue&quot;&gt;public void &lt;/span&gt;ExtractAppSettingEmptySettingsExceptionExpected()
{
    &lt;span style=&quot;color: #2b91af&quot;&gt;MConfigurationManager&lt;/span&gt;.AppSettingsGet = () =&amp;gt; &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;NameValueCollection&lt;/span&gt;();
    &lt;span style=&quot;color: #2b91af&quot;&gt;AppSettingsManager&lt;/span&gt;.ExtractAppSetting();
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Y éste sería el resultado:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/02/ExceptionFromMoles.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;ExceptionFromMoles&quot; border=&quot;0&quot; alt=&quot;ExceptionFromMoles&quot; src=&quot;http://javierholguera.com/assets/ExceptionFromMoles_thumb.png&quot; width=&quot;339&quot; height=&quot;219&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;¿Cómo? ¿Una excepción en tiempo de ejecución? Pues sí, resulta que Moles no soporta la modificación del objeto System.Configuration.ConfigurationManager. En &lt;a href=&quot;http://social.msdn.microsoft.com/Forums/en/pex/thread/3c5e77bf-2040-4849-a4d8-2298aad9ed48&quot;&gt;este hilo lo explica&lt;/a&gt; levemente uno de sus creadores. Así que en lugar de tirar la basura el post, he preferido indicar un ejemplo de su uso, aunque el final haya sido tan trágico como el de Seven.&lt;/p&gt;
&lt;p&gt;Otro día prometo postear un resultado correcto. En cualquier caso, Moles sigue siendo una tecnología a seguir, aunque con sus limitaciones.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Bibliografía:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/projects/moles&quot;&gt;Proyecto Moles en Microsoft Research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://channel9.msdn.com/posts/Peli/Moles-Replace-any-NET-method-with-a-delegate/&quot;&gt;Moles en Channel 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.leastprivilege.com/TestingSecurityCodeWithMoles.aspx&quot;&gt;Ejemplo de uso de Moles con System.Thread.Thread&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Descargas:&lt;/p&gt;
&lt;ul&gt;
&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:7f41a872-7437-4bef-bf9a-97fefe160425&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;
&lt;p /&gt;
&lt;div&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/02/TestingWithMoles.zip&quot; target=&quot;_self&quot;&gt;ConfigurationManager con Moles&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 02 Feb 2010 23:46:34 +0000</pubDate>
        <link>http://javierholguera.com/2010/02/02/testeo-unitario-con-moles</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/02/02/testeo-unitario-con-moles</guid>
        
        <category>framework</category>
        
        <category>moles</category>
        
        <category>Testing</category>
        
        <category>unit</category>
        
        
        <category>Visual Studio 2008</category>
        
      </item>
    
      <item>
        <title>WCF4 – Configuración simplificada</title>
        <description>&lt;p&gt;Creo que muchos de los que hemos trabajado con Windows Communication Foundation podemos estar de acuerdo en que, en mayor o menor medida, no resulta una tecnología fácil de configurar. Es cierto que aporta una gran flexibilidad en el desarrollo, pero a la hora de hacer el despliegue hay que ser cuidado con el web.config/app.config de turno, si no queremos llorar.&lt;/p&gt;
&lt;p&gt;Seguramente esto ya había sido identificado por Microsoft como punto negro del framework, pues muchas de las mejoras que para el lanzamiento de .NET 4 va a haber respecto a WCF, se centran en simplificar dicha configuración, tirando sobretodo de valores por defecto.&lt;/p&gt;
&lt;p&gt;En el próximo post vamos a ver las diferencias que habría entre configurar un servicio “típico” de WCF en 3.5 y hacerlo en 4.0.&lt;/p&gt;
&lt;h5&gt;Hola Mundo en 3.5&lt;/h5&gt;
&lt;p&gt;Vamos a empezar por hacernos un servicio sencillo con .NET 3.5 y Visual Studio 2008. No me detendré mucho en ello, porque el proceso es bien conocido por todos. Empezamos por el contrato de servicio:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Service that says hello world.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;[&lt;span style=&quot;color: #2b91af&quot;&gt;ServiceContract&lt;/span&gt;]
&lt;span style=&quot;color: blue&quot;&gt;public interface &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;IHelloWorld
&lt;/span&gt;{
    &lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
    /// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Gets &amp;quot;Hello Word from X&amp;quot;, where X is the name parameter.
    &lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;name&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Who says hello.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;String with hello world message.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/returns&amp;gt;
    &lt;/span&gt;[&lt;span style=&quot;color: #2b91af&quot;&gt;OperationContract&lt;/span&gt;]
    &lt;span style=&quot;color: blue&quot;&gt;string &lt;/span&gt;GetHelloWord(&lt;span style=&quot;color: blue&quot;&gt;string &lt;/span&gt;name);
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;La implementación para este servicio podría ser algo como lo siguiente:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
/// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Implementation of the IHelloWorld service contract.
&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;HelloWorld &lt;/span&gt;: &lt;span style=&quot;color: #2b91af&quot;&gt;IHelloWorld
&lt;/span&gt;{
    &lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;summary&amp;gt;
    /// &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Gets &amp;quot;Hello Word from X&amp;quot;, where X is the name parameter.
    &lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;/// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;name&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Who says hello.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;String with hello world message.&lt;/span&gt;&lt;span style=&quot;color: gray&quot;&gt;&amp;lt;/returns&amp;gt;
    &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;public string &lt;/span&gt;GetHelloWord(&lt;span style=&quot;color: blue&quot;&gt;string &lt;/span&gt;name)
    {
        &lt;span style=&quot;color: blue&quot;&gt;return string&lt;/span&gt;.Format(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Hello world from {0} - Request from {1}&amp;quot;&lt;/span&gt;, name, &lt;span style=&quot;color: #2b91af&quot;&gt;OperationContext&lt;/span&gt;.Current.Channel.LocalAddress);
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Por último, lo que realmente nos ocupa en este post, la configuración. Digamos que necesitamos desplegar este servicio de forma que pueda ser consumido mediante un binding lo más interoperable posible (BasicHttpBinding es nuestro hombre) y otro que sea más específico para aplicaciones .NET y que nos dé más rendimiento (vamos a tirar por NetTcpBinding). Además, todavía necesitamos información sobre errores que haya en el servidor, puesto que no está totalmente terminado, y no nos vendría mal un punto MEX para poder crear nuestros proxies.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;services&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;service &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;behaviorConfiguration&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;HelloWordService.ServiceBehavior&lt;/span&gt;&amp;quot;
             &lt;span style=&quot;color: red&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;HelloWordService.HelloWorld&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Binding para peticiones HTTP &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;--&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;endpoint &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;address&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&amp;quot;
                &lt;span style=&quot;color: red&quot;&gt;binding&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;basicHttpBinding&lt;/span&gt;&amp;quot;
                &lt;span style=&quot;color: red&quot;&gt;contract&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;HelloWordService.IHelloWorld&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
      &amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Binding para peticiones TCP &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;--&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;endpoint &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;address&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&amp;quot;
                &lt;span style=&quot;color: red&quot;&gt;binding&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;netTcpBinding&lt;/span&gt;&amp;quot;
                &lt;span style=&quot;color: red&quot;&gt;contract&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;HelloWordService.IHelloWorld&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
      &amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Binding para obtener metadatos &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;--&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;endpoint &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;address&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;mex&lt;/span&gt;&amp;quot;
                &lt;span style=&quot;color: red&quot;&gt;binding&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;mexHttpBinding&lt;/span&gt;&amp;quot;
                &lt;span style=&quot;color: red&quot;&gt;contract&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;IMetadataExchange&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;host&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;baseAddresses&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;add &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;baseAddress&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;http://localhost:9999/HelloWorldService&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;add &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;baseAddress&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;net.tcp://localhost:9998/HelloWorldService&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;baseAddresses&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;host&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;service&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;services&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceBehaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behavior &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;HelloWordService.ServiceBehavior&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Activar la generación de metadatos para el binding MEX &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;--&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceMetadata &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;httpGetEnabled&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;True&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
        &amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;Incluir información detallada para excepciones &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;--&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceDebug &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;includeExceptionDetailInFaults&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;False&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behavior&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceBehaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;Con esta configuración tendríamos a nuestro servicio escuchando en las dos direcciones base definidas, una para TCP y otra para HTTP. También tendríamos funcionando un endpoint MEX para poder generar nuestros proxies y consultar el fichero WSDL. Este servicio podríamos desplegarlo bien en IIS o bien hostearlo mediante una aplicación de consola. El resultado sería parecido, con la salvedad de que las baseAddress no son tenidas en cuenta por IIS, sino que se toma la ruta en la que se haga el despliegue de la aplicación. Recordad que es necesario configurar los bindings del Site que aloja a la aplicación web para poder tener funcionando el endpoint sobre net.tcp.&lt;/p&gt;
&lt;p&gt;Para terminar esta parte, si nos creáramos un cliente de este servicio en su versión hosteada en IIS, en la parte de la configuración podríamos ver un fragmento como éste:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;client&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;endpoint &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;address&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&lt;a href=&quot;http://localhost/HelloWorldService&quot;&gt;http://localhost/HelloWorldService&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color: red&quot;&gt;binding&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;basicHttpBinding&lt;/span&gt;&amp;quot;
        &lt;span style=&quot;color: red&quot;&gt;bindingConfiguration&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;BasicHttpBinding_IHelloWorld&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: red&quot;&gt;contract&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;RemoteServices.IHelloWorld&lt;/span&gt;&amp;quot;
        &lt;span style=&quot;color: red&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;BasicHttpBinding_IHelloWorld&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;endpoint &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;address&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;net.tcp://localhost/HelloWorldService&lt;/span&gt;&amp;quot;
        &lt;span style=&quot;color: red&quot;&gt;binding&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;netTcpBinding&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: red&quot;&gt;bindingConfiguration&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;NetTcpBinding_IHelloWorld&lt;/span&gt;&amp;quot;
        &lt;span style=&quot;color: red&quot;&gt;contract&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;RemoteServices.IHelloWorld&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: red&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;NetTcpBinding_IHelloWorld&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;identity&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
            &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;userPrincipalName &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&lt;a href=&quot;mailto:value=j.holguera@xxx.local&quot;&gt;j.holguera@xxx.local&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;identity&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;endpoint&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;client&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Con estos dos endpoints definidos, podríamos consumir el servicio mediante los dos protocolos (HTTP y TCP), como muestra la siguiente imagen.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;using &lt;/span&gt;(RemoteServices.&lt;span style=&quot;color: #2b91af&quot;&gt;HelloWorldClient &lt;/span&gt;proxy = &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;RemoteServices.&lt;span style=&quot;color: #2b91af&quot;&gt;HelloWorldClient&lt;/span&gt;(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;BasicHttpBinding_IHelloWorld&amp;quot;&lt;/span&gt;))
{
    &lt;span style=&quot;color: #2b91af&quot;&gt;Console&lt;/span&gt;.WriteLine(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;HelloWorld using HTTP: &amp;quot; &lt;/span&gt;+ proxy.GetHelloWord(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Javier&amp;quot;&lt;/span&gt;));
}

&lt;span style=&quot;color: blue&quot;&gt;using &lt;/span&gt;(RemoteServices.&lt;span style=&quot;color: #2b91af&quot;&gt;HelloWorldClient &lt;/span&gt;proxy = &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;RemoteServices.&lt;span style=&quot;color: #2b91af&quot;&gt;HelloWorldClient&lt;/span&gt;(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;NetTcpBinding_IHelloWorld&amp;quot;&lt;/span&gt;))
{
    &lt;span style=&quot;color: #2b91af&quot;&gt;Console&lt;/span&gt;.WriteLine(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;HelloWorld using TCP: &amp;quot; &lt;/span&gt;+ proxy.GetHelloWord(&lt;span style=&quot;color: #a31515&quot;&gt;&amp;quot;Javier&amp;quot;&lt;/span&gt;));
}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;El resultado sería sendas cadenas de texto en las que, además de aparecer el mensaje de saludo, se nos indica la dirección desde la que se ha recibido la petición en el servicio, útil para ver que efectivamente consumimos la funcionalidad mediante los dos protocolos.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/02/ConsoleClient35.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px&quot; title=&quot;ConsoleClient35&quot; border=&quot;0&quot; alt=&quot;ConsoleClient35&quot; src=&quot;http://javierholguera.com/assets/ConsoleClient35_thumb.png&quot; width=&quot;335&quot; height=&quot;157&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Como se puede ver, la única parte que realmente existe un buen&amp;#160; puñado de líneas es la configuración del servicio. Veamos cómo quedaría usando WCF 4.&lt;/p&gt;
&lt;h5&gt;Hola Mundo en WCF 4&lt;/h5&gt;
&lt;p&gt;Partamos de la base de que hemos creamos un proyecto WCF con Visual Studio 2010 y hemos replicado el servicio anterior, es decir, el contrato de servicio IHelloWorld y su implementación HelloWorld. Sólo nos quedaría, por tanto, configurar el servicio en el fichero app.config. Empezamos definiendo los bindings para HTTP y TCP. La configuración necesaria sería ésta:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;configuration&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;configuration&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;¿No hay configuración? ¿Cómo es posible? Pues gracias a los &lt;strong&gt;Default Endpoints&lt;/strong&gt;. Son endpoints “preconfigurados” que se cargan automáticamente para cada dirección base creada. Al llamarse al método Open del ServiceHost, ya sea automáticamente por parte de IIS o manualmente cuando se hostea el servicio en una aplicación de consola, se crean estos bindings predeterminados haciendo uso del método &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.servicemodel.servicehostbase.adddefaultendpoints(VS.100).aspx&quot;&gt;AddDefaultEndpoints&lt;/a&gt;. Un par de cuestiones a tener en cuenta:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si se configura un endpoint en el fichero de configuración, ya no se hace efectiva la llamada a AddDefaultEndpoints. &lt;/li&gt;
&lt;li&gt;Si aún así quisiéramos tener esos endpoints por defecto, siempre es posible llamar explícitamente al método AddDefaultEndpoints y añadir, a los endpoints definidos en el fichero de configuración, los que crea él por defecto. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Los bindings traen una configuración por defecto que se considera como más habitual. Por ejemplo, con una dirección base con protocolo http, el binding por defecto es basicHttpBinding. Esta nueva técnica ha sido bautizada como &lt;strong&gt;Default Protocol Mapping&lt;/strong&gt;. En cualquier caso, este mapeo también es configurable; si quisiéramos que, por defecto, la direcciones con protocolo se resolvieran con un binding de tipo wsHttpBinding, sería necesario configurar lo siguiente en el app.config/web.config:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;  &lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;protocolMapping&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;add &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;scheme&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;http&lt;/span&gt;&amp;quot; &lt;span style=&quot;color: red&quot;&gt;binding&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;wsHttpBinding&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;protocolMapping&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En este punto, tendríamos nuestro servicio hosteado en IIS. Nos quedaría activar los metadatos del servicio para generar el fichero WSDL y enviar información detallada en caso de error. Ambas no son configuraciones por defecto del servicio, por lo que tendríamos que editar el fichero app.config/web.config e introducir lo siguiente:&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;  &lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceBehaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
        &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behavior&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceMetadata &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;httpGetEnabled&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;true&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
          &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceDebug &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;includeExceptionDetailInFaults&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;true&lt;/span&gt;&amp;quot;&lt;span style=&quot;color: blue&quot;&gt;/&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behavior&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
      &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;serviceBehaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;behaviors&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;
  &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://11011.net/software/vspaste&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Si nos fijamos, veremos que no ha sido necesario ni darle un nombre al nuevo behavior del servicio, ni tampoco definir el servicio y asociarle el behavior, como hacíamos en 3.5. Esto se conoce como &lt;strong&gt;Default Behavior Configurations&lt;/strong&gt;, configuraciones sin nombre que se van a aplicar a cualquier servicio que definamos. Tienen su contrapartida en los Default Binding Configurations, que realizan la misma función pero asociados a un tipo de binding.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Como se ha podido ver a lo largo del post, la configuración en WCF4, al menos la más habitual, se ha simplificado enormemente. Los nostálgicos de la sencillez de los servicios ASMX han perdido la principal razón para no dar el paso a WCF.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Bibliografía:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ee354381.aspx&quot;&gt;A Developer's Introduction to Windows Communication Foundation 4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Descargas:&lt;/p&gt;&lt;/p&gt;
&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:84093b49-73d8-40fb-b99d-4bc3635e9eca&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;
&lt;p /&gt;
&lt;div&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/02/HelloWorldService40.zip&quot; target=&quot;_self&quot;&gt;Servicio Hello World en .NET 4.0&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px&quot; id=&quot;scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:b3051db5-b428-4c12-8b73-86aa2fc41c5f&quot; class=&quot;wlWriterEditableSmartContent&quot;&gt;
&lt;p /&gt;
&lt;div&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/02/HelloWorldService401.zip&quot; target=&quot;_self&quot;&gt;Servicio Hello World en .NET 4.0&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 01 Feb 2010 22:38:26 +0000</pubDate>
        <link>http://javierholguera.com/2010/02/01/wcf4-configuracin-simplificada</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/02/01/wcf4-configuracin-simplificada</guid>
        
        <category>configuration</category>
        
        <category>wcf4</category>
        
        
        <category>Visual Studio 2008</category>
        
      </item>
    
      <item>
        <title>Instalar Windows 7 en Windows Virtual PC</title>
        <description>&lt;p&gt;Después de buscar un rato en &lt;strike&gt;Google&lt;/strike&gt; Bing, no he visto ningún post sobre cómo instalar Windows 7 en una máquina con Windows Virtual PC. Puede resultar contradictorio puesto que Windows Virtual PC sólo funciona en Windows 7, pero ¿a quién no le ha hecho falta una máquina virtual con la que trastear? Prácticamente para eso se crearon las máquinas virtuales, ¿no? ;)&lt;/p&gt;
&lt;p&gt;Pues bien, yo necesito una máquina con Windows 7 para instalar sobre ella Visual Studio 2010. Esto es lo que he hecho para tenerla.&lt;/p&gt;
&lt;h5&gt;Descarga e instalación&lt;/h5&gt;
&lt;p&gt;La descarga la he hecho de esta dirección: &lt;a title=&quot;http://www.microsoft.com/windows/virtual-pc/&quot; href=&quot;http://www.microsoft.com/windows/virtual-pc/&quot;&gt;http://www.microsoft.com/windows/virtual-pc/&lt;/a&gt;. De los dos ficheros que indicaba que era necesario descargar, sólo lo he hecho con “Windows Virtual PC”, puesto que no me iba a hacer falta el “Windows XP Mode”.&lt;/p&gt;
&lt;p&gt;Una vez bajado, la instalación es un simple doble click –&amp;gt; next –&amp;gt; next. Eso sí, es necesario reiniciar y tanto al apagarse como al volverse a arrancar, está un tiempo configurando esta nueva instalación.&lt;/p&gt;
&lt;p&gt;Al volver a arrancar, podremos ver en el menú de inicio un nuevo enlace de nombre “Windows Virtual PC”. Pulsarlo nos llevará una ventana como la que aparece en la siguiente imagen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/01/VirtualMachinesWindow.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;VirtualMachinesWindow&quot; border=&quot;0&quot; alt=&quot;VirtualMachinesWindow&quot; src=&quot;http://javierholguera.com/assets/VirtualMachinesWindow_thumb.png&quot; width=&quot;244&quot; height=&quot;230&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h5&gt;Nueva máquina virtual&lt;/h5&gt;
&lt;p&gt;Ya tenemos la aplicación instalada, es momento de crear la primera máquina virtual. El proceso no puede ser más sencillo. Lo primero es pulsar el botón “Create Virtual Machine”, que aparece en la ventana anterior. Esto nos lanzará un cuadro de diálogo para crear una nueva máquina virtual, que comienza con darnos la opción de definir el nombre de esta nueva máquina, como se muestra en la siguiente imagen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/01/VirtualMachineName.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;VirtualMachineName&quot; border=&quot;0&quot; alt=&quot;VirtualMachineName&quot; src=&quot;http://javierholguera.com/assets/VirtualMachineName_thumb.png&quot; width=&quot;244&quot; height=&quot;189&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;El siguiente paso es indicar la cantidad de memoria RAM que queremos que tenga disponible la máquina virtual. Mucho ojo con esto porque, en el momento de lanzar la máquina virtual, tendrá que estar libre dicha cantidad de memoria RAM, pues de lo contrario no arrancará la máquina. La siguiente imagen muestra este paso en el cuadro de diálogo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/01/VirtualMachineMemory.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;VirtualMachineMemory&quot; border=&quot;0&quot; alt=&quot;VirtualMachineMemory&quot; src=&quot;http://javierholguera.com/assets/VirtualMachineMemory_thumb.png&quot; width=&quot;244&quot; height=&quot;189&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Por último, debemos indicar qué clase de disco duro vamos a manejar. Las opciones principales son crear uno nuevo o elegir uno ya existente, en caso de que, por ejemplo, estuviéramos creando esta máquina virtual a partir de una ya existente. Elegimos la primera opción como se muestra en la siguiente figura.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/01/VirtualMachineHardDisk.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;VirtualMachineHardDisk&quot; border=&quot;0&quot; alt=&quot;VirtualMachineHardDisk&quot; src=&quot;http://javierholguera.com/assets/VirtualMachineHardDisk_thumb.png&quot; width=&quot;244&quot; height=&quot;189&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Con esto ya tendríamos terminada nueva máquina virtual. Para empezar con la instalación de Windows 7, bastaría con introducir en el DVD de instalación, volver a la ventana de Windows Virtual PC, seleccionar la nueva máquina “Windows7” y pulsar el botón “Open”. De este modo la máquina empieza a ejecutarse y, como cualquier máquina, arrancaría con el DVD la instalación. El final del proceso sería la pantalla con la que Windows 7 nos da la bienvenida para empezar la instalación, seleccionando la configuración de idioma como muestra la siguiente imagen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/01/Windows7InVirtualPC.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;Windows7InVirtualPC&quot; border=&quot;0&quot; alt=&quot;Windows7InVirtualPC&quot; src=&quot;http://javierholguera.com/assets/Windows7InVirtualPC_thumb.png&quot; width=&quot;244&quot; height=&quot;199&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;El resto es next-&amp;gt; next-&amp;gt; next, puesto que para Windows 7 la instalación se está haciendo sobre una máquina real y los pasos a seguir son los mismos.&lt;/p&gt;
&lt;p&gt;Para terminar, es muy recomendable instalar los Integration Components. Se puede hacer desde el menú Tools que aparece en la propia ventana de la máquina virtual y nos permitirá, entre otras cosas, tener sonido, acceso a USBs y, lo que me parece más importante, poder sacar el ratón de dentro de la máquina virtual sin tener que recurrir a la combinación ALT+CONTROL+RIGHT, lo que aumenta considerablemente la sensación de integración.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jan 2010 12:35:35 +0000</pubDate>
        <link>http://javierholguera.com/2010/01/26/instalar-windows-7-en-windows-virtual-pc</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/01/26/instalar-windows-7-en-windows-virtual-pc</guid>
        
        <category>virtual pc</category>
        
        <category>Windows 7</category>
        
        
        <category>Windows 7</category>
        
      </item>
    
      <item>
        <title>Debugger in Silverlight</title>
        <description>&lt;p&gt;Este fin de semana perdí una cantidad considerable de tiempo porque no me funcionaba el debugger en Silverlight. Básicamente, me salían esos simpáticos mensajes que aparece en Visual Studio cuando un breakpoint no se va a ejecutar: &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The break point currently will not be hit , no symbols have been loaded to this document&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;¿Por qué? ¡¿Por qué?! Me preguntaba yo, intentando depurar una aplicación que estaba comportándose de forma incorrecta. Pues bien, la solución es tan sencilla, de esas que por suerte no se olvidan. Basta con activarlo dirigiéndose a las propiedades del proyecto ASP.NET que estará hosteando nuestro control Silverlight. &lt;/p&gt;
&lt;p&gt;En las propiedades, bajo la pestaña Web, en la parte inferior de la pantalla se puede ver un menú como el de la siguiente imagen. Basta activar el checkbox correspondiente a Silverlight para que nuestro depurador favorito funcione de nuevo correctamente.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/01/SilverlightDebugger.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;SilverlightDebugger&quot; border=&quot;0&quot; alt=&quot;SilverlightDebugger&quot; src=&quot;http://javierholguera.com/assets/SilverlightDebugger_thumb.png&quot; width=&quot;621&quot; height=&quot;87&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Espero que esto le sirva a alguien para perder menos tiempo del que perdí yo.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Jan 2010 11:25:36 +0000</pubDate>
        <link>http://javierholguera.com/2010/01/25/debugger-in-silverlight</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/01/25/debugger-in-silverlight</guid>
        
        <category>debugger</category>
        
        <category>Silverlight</category>
        
        <category>symbols</category>
        
        
        <category>Visual Studio 2008</category>
        
      </item>
    
      <item>
        <title>Code Coverage (II): Uso</title>
        <description>&lt;p&gt;Una vez que tenemos activado el Code Coverage para un ensamblado y tras lanzar los correspondientes tests, ver los resultados es una mera cuestión de abrir la pestaña de “Code Coverage Results”, que si no es visible se puede activar en el menú “Test – Windows – Code Coverage Results”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/01/CodeCoverageResults.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;CodeCoverageResults&quot; border=&quot;0&quot; alt=&quot;CodeCoverageResults&quot; src=&quot;http://javierholguera.com/assets/CodeCoverageResults_thumb.png&quot; width=&quot;450&quot; height=&quot;119&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;En la ventana de ejemplo se puede ver cómo los resultados se gestionan, en primer lugar, por ensamblado ; y dentro del ensamblado , cómo se pueden ir expandiendo los diferentes espacios de nombres, clases y, por último, métodos. Sin duda, una gran granularidad que nos permite saber con precisión dónde estamos quedándonos cortos en el testeo.&lt;/p&gt;
&lt;p&gt;Pero, si esta ayuda es buena, tener el código coloreado indicando qué partes han sido ejecutadas durante el testeo y cuáles no, sería aún mejor, ¿verdad? Basta con pulsar el botón “Show Code Coverage Coloring”, el tercero por la derecha en la ventana de “Code Coverage Results”, para obtener algo como la siguiente imagen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/01/ColoredCode.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;ColoredCode&quot; border=&quot;0&quot; alt=&quot;ColoredCode&quot; src=&quot;http://javierholguera.com/assets/ColoredCode_thumb.png&quot; width=&quot;437&quot; height=&quot;186&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;¡Genial! Ahora no sólo sé la cantidad de código que me falta por testear, sino que incluso sé qué para qué código necesito escribir nuevos tests. Vale, esto se salta totalmente los principios de TDD, pero la vida no siempre es maravillosa…&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Un último apunte para terminar: he comprobado (en mis carnes) que algunos proyectos dan problemas al intentar configurar los ensamblados a los que se les va a calcular la cobertura de código.&lt;/p&gt;
&lt;p&gt;Los síntomas son sencillos: abrimos el .testrunconfig, pinchamos en “Code Coverage”, y la ventana se cierra sin emitir ningún error. No soy el &lt;a href=&quot;http://social.msdn.microsoft.com/Forums/en-US/vststest/thread/28b2e127-ca9c-4dcd-8723-edfa45f8989e/&quot;&gt;primero al que le pasa&lt;/a&gt; y aunque está &lt;a href=&quot;https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=329882&quot;&gt;reportado como bug&lt;/a&gt;, aparentemente sigue sin solucionarse.&lt;/p&gt;
&lt;p&gt;La forma de evitarlo es tan chapucera como útil: simplemente hay que hacer el unload de algunos proyectos que son los que dan problemas. A mí, personalmente, me ha ocurrido exclusivamente con los proyectos de base de datos, pero parece ser que también existen problemas con proyectos WSSF. Avisados quedáis.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jan 2010 11:18:00 +0000</pubDate>
        <link>http://javierholguera.com/2010/01/14/code-coverage-ii-uso</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/01/14/code-coverage-ii-uso</guid>
        
        <category>2008</category>
        
        <category>code</category>
        
        <category>coverage</category>
        
        <category>studio</category>
        
        <category>visual</category>
        
        
        <category>Visual Studio 2008</category>
        
      </item>
    
      <item>
        <title>Code Coverage (I): Activación</title>
        <description>&lt;p&gt;Voy a decirlo aquí en alto y con vergüenza: hasta esta semana, no había usado nunca el Code Coverage. Y como ocurre con todas las buenas herramientas, ahora pienso: “¿cómo he podido estar sin esto hasta ahora?”.&lt;/p&gt;
&lt;p&gt;Empezar a usarlo es sencillo, aunque tiene una pequeña peculiaridad: sólo funciona cuando los tests se ejecutan, no si se depurar. ¿Qué quiere decir esto? Que a la hora de seleccionar el conjunto de tests que queramos lanzar, deberemos utilizar la opción “Run Selection” en lugar de “Debug Selection”, en la ventana de “Test View”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/01/TestViewWindow.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;TestViewWindow&quot; src=&quot;http://javierholguera.com/assets/TestViewWindow_thumb.png&quot; border=&quot;0&quot; alt=&quot;TestViewWindow&quot; width=&quot;229&quot; height=&quot;315&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Como ya sabemos, el problema de esto es que cualquier punto de depuración que tengamos en el código no va a ejecutarse, pero parece un mal menor comparado con las posibilidades que tiene Code Coverage. Además, uno de los principios de testeo unitario es precisamente evitar la necesidad de depurar el código, así que no hay de qué quejarse.&lt;/p&gt;
&lt;p&gt;Para poder ver la pestaña que muestra los resultados de cobertura de código existen dos posibilidades: pulsar el último de los botones que parecen en la ventana de “Test Results” o bien acceder a la opción de menú “Test – Windows – Code Coverage Results”.&lt;/p&gt;
&lt;p&gt;Sin embargo, de poco nos servirá esto si no activamos previamente el Code Coverage para que se calculen sus resultados. Esto se configura en el fichero .testrunconfig que existe en la carpeta “Solution Items”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2010/01/TestRunConfig.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;TestRunConfig&quot; src=&quot;http://javierholguera.com/assets/TestRunConfig_thumb.png&quot; border=&quot;0&quot; alt=&quot;TestRunConfig&quot; width=&quot;367&quot; height=&quot;263&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Una vez abierto, hay pulsar en la opción de “Code Coverage” y seleccionar los assemblies sobre los que vamos a calcular la cobertura de código. Este punto es más importante de lo que podría pensarse, puesto que lo normal será tener dos versiones para cada uno: la versión de Debug y la versión de Release (podemos tener más si existen más configuraciones del proyecto). La clave es que no podemos elegir las dos a la vez, por lo que seleccionemos la que seleccionemos, tendrá que estar “sincronizada” con la configuración actual del proyecto. De lo contrario, tendremos un problema: la cobertura se calculará sobre un assembly que no tiene porqué estar actualizado con los últimos cambios que hemos hecho en el código.&lt;/p&gt;
&lt;p&gt;Un ejemplo: digamos que hemos elegido la versión de Debug del assembly, pero tenemos configurado el proyecto en modo Release. Tenemos un 100% de cobertura de código, pero introducimos nuevas líneas en un método y compilamos (en Release). El assembly de Debug, sobre el que se va a pasar la cobertura, no ha cambiado, por lo que nos seguirá marcando 100% de cobertura aún cuando sabemos que no tenemos tests para el código que acabamos de añadir. Puede ser todo un problema, ¿verdad?&lt;/p&gt;
&lt;p&gt;Por hoy es suficiente. Otro día, cómo interpretar los resultados y el coloreado del código.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jan 2010 10:25:05 +0000</pubDate>
        <link>http://javierholguera.com/2010/01/14/code-coverage-i-activacin</link>
        <guid isPermaLink="true">http://javierholguera.com/2010/01/14/code-coverage-i-activacin</guid>
        
        <category>2008</category>
        
        <category>code</category>
        
        <category>coverage</category>
        
        <category>studio</category>
        
        <category>visual</category>
        
        
        <category>Visual Studio 2008</category>
        
      </item>
    
      <item>
        <title>Orden de campos del DataContract</title>
        <description>&lt;p&gt;Cuando estaba preparándome la certificación de WCF, descubrí algo que es conveniente tener apuntado, pues puede dar bastantes quebraderos de cabeza: el orden en que aparecen los campos de información en los mensajes WCF una vez serializados. Estas son las reglas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si el contrato hereda de otro tipo, aparecen en primer lugar los elementos de ese tipo base. &lt;/li&gt;
&lt;li&gt;Después, los elementos del propio contrato que no tengan la propiedad Order de &lt;em&gt;DataMemberAttribute&lt;/em&gt;, ordenados alfabéticamente. &lt;/li&gt;
&lt;li&gt;Por último, los elementos que tengan la propiedad Orden, según el valor asignado. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Me ha resultado curioso que aparezcan primero los elementos sin la propiedad Order. Seguramente haya una razón que desconozco para que éste sea el comportamiento, pero entiendo que puede llevar a error fácilmente. ¿Por qué? Pues porque si seleccionas un elemento que quieres que vaya primero, y le das la propiedad Order = 1, probablemente, de desconocer estas reglas, esperarás que con esto sea suficiente para que aparezca en primer lugar en el mensaje WCF.&lt;/p&gt;
&lt;p&gt;Pero no, será necesario que asignes valores a todos los otros elementos, para que no se antepongan al que has elegido tú, por aquello de no tener propiedad Order.&lt;/p&gt;
&lt;p&gt;Por último, destacar que estas reglas aplican también al orden en que aparecen los elementos que añadamos a un &lt;em&gt;MessageContract&lt;/em&gt; con el atributo &lt;em&gt;MessageBodyMemberAttribute&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Algún día tengo que buscar porqué la gente de .NET decidió esto así.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Dec 2009 04:53:17 +0000</pubDate>
        <link>http://javierholguera.com/2009/12/31/orden-de-campos-del-datacontract</link>
        <guid isPermaLink="true">http://javierholguera.com/2009/12/31/orden-de-campos-del-datacontract</guid>
        
        <category>datacontracts</category>
        
        <category>orden</category>
        
        <category>WCF</category>
        
        
      </item>
    
      <item>
        <title>WCF: Validación de certificados</title>
        <description>&lt;p&gt;Cuando se está en un entorno de desarrollo, es bastante común utilizar certificados “auto-firmados” (self-signed) para bindings que requieran seguridad.&lt;/p&gt;
&lt;p&gt;Sin embargo, WCF no acepta este tipo de certificados, lanzando una excepción de tipo SecurityNegotiationException, con un mensaje acompañando del estilo a “Could not establish trust relationship for the SSL/TLS secure channel with authority 'localhost:8732'”. ¿Qué hacer? Es fácil, simplemente hay que “engañar” al cliente para que acepte este certificado que el servidor nos está ofreciendo para realizar la conexión SSL, aunque esté firmado por sí mismo.&lt;/p&gt;
&lt;p&gt;Para ello, en el cliente, es necesario introducir el siguiente código:&lt;/p&gt;
&lt;div style=&quot;border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px&quot;&gt;
&lt;div style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;void&lt;/span&gt; Main(&lt;span style=&quot;color: #0000ff&quot;&gt;string&lt;/span&gt;[] args)&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt; {&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;using&lt;/span&gt; (DemoService.GetHeadersClient proxy = &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; DemoService.GetHeadersClient())&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt;         ServicePointManager.ServerCertificateValidationCallback += &lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt;             &lt;span style=&quot;color: #0000ff&quot;&gt;new&lt;/span&gt; System.Net.Security.RemoteCertificateValidationCallback(ValidateCertificate);&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt;         &lt;span style=&quot;color: #008000&quot;&gt;// Do stuff with proxy object&lt;/span&gt;&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;     }            &lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt; }&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;bool&lt;/span&gt; ValidateCertificate(&lt;span style=&quot;color: #0000ff&quot;&gt;object&lt;/span&gt; sender, X509Certificate cert, X509Chain chain, SslPolicyErrors errors)&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt; {&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;true&lt;/span&gt;;&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt; }&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;El método definido será invocado por WCF en el momento de la validación del certificado, asegurándonos que el cliente va a aceptarlo en cualquier caso.&lt;/p&gt;
&lt;p&gt;Por supuesto, esto es algo totalmente desaconsejado en cualquier entorno de producción. Pero para salir del paso en desarrollo, viene muy bien.&lt;/p&gt;
&lt;p&gt;Respuesta original vista &lt;a href=&quot;http://social.msdn.microsoft.com/Forums/en-US/wcf/thread/bb0fc194-5bf3-4c24-94bb-c86f94c76bc2&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Dec 2009 04:50:46 +0000</pubDate>
        <link>http://javierholguera.com/2009/12/31/wcf-validaci-243-n-de-certificados</link>
        <guid isPermaLink="true">http://javierholguera.com/2009/12/31/wcf-validaci-243-n-de-certificados</guid>
        
        <category>certificados</category>
        
        <category>WCF</category>
        
        
      </item>
    
      <item>
        <title>Petición POST con C#</title>
        <description>&lt;p&gt;Dicen que nunca te acostarás sin aprender algo nuevo. Yo he tenido mi ración diaria con la forma de realizar una petición POST desde .NET. Probablemente sea una simpleza que todo el mundo sabe, pero yo lo desconocía.&lt;/p&gt;
&lt;p&gt;El proceso es bastante intuitivo, salvo en la forma de añadir parámetros a la petición, que a mí me ha dejado algo más sorprendido. Pasos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instanciar una URI con la dirección a la que se quiere hacer la petición, pero &lt;strong&gt;sin parámetros&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Crear el objeto Request. Castearlo directamente a HttpWebRequest, puesto que el Create, aunque devuelva un WebRequest, en realidad es un objeto HttpWebRequest (que es un subtitpo de WebRequest). &lt;/li&gt;
&lt;li&gt;Configurar la request, indicando que se va a usar POST (obligatorio), el content-type (opcional), la longitud (obligatorio) y la versión del protocolo HTTP (opcional). &lt;/li&gt;
&lt;li&gt;Obtener un steam de la petición. Se va a añadir los parámetros como si fueran bytes, que al fin de cuentas es el contenido de la petición. &lt;/li&gt;
&lt;li&gt;Terminamos haciendo una llamada a GetResponse para obtener la respuesta. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El código de todo este proceso sería algo parecido a lo siguiente:&lt;/p&gt;
&lt;div style=&quot;border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; height: 223px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px&quot;&gt;
&lt;div style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   1:&lt;/span&gt; HttpWebRequest httpRequest = &lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   2:&lt;/span&gt;     HttpWebRequest.Create(&lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;http://direccion.com/pagina&amp;quot;&lt;/span&gt;) &lt;span style=&quot;color: #0000ff&quot;&gt;as&lt;/span&gt; HttpWebRequest;            &lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   3:&lt;/span&gt; httpRequest.Method = &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;;&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   4:&lt;/span&gt; httpRequest.ProtocolVersion = HttpVersion.Version11;&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   5:&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;// Parameters es un string que contiene todos los parametros en &lt;/span&gt;&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   6:&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;// formato param1=value&amp;amp;param2=&amp;amp;param3=value&lt;/span&gt;&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   7:&lt;/span&gt; httpRequest.ContentLength = Encoding.ASCII.GetByteCount(parameters);&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   8:&lt;/span&gt; httpRequest.ContentType = &lt;span style=&quot;color: #006080&quot;&gt;&amp;quot;application/x-www-form-urlencoded&amp;quot;&lt;/span&gt;;            &lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;   9:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  10:&lt;/span&gt; &lt;span style=&quot;color: #0000ff&quot;&gt;using&lt;/span&gt; (Stream requestStream = httpRequest.GetRequestStream())&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  11:&lt;/span&gt; {&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  12:&lt;/span&gt;     &lt;span style=&quot;color: #0000ff&quot;&gt;byte&lt;/span&gt;[] parametersBuffer = Encoding.ASCII.GetBytes(parameters);&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  13:&lt;/span&gt;     requestStream.Write(parametersBuffer, 0, parametersBuffer.Length);&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  14:&lt;/span&gt; }&lt;/pre&gt;
&lt;pre style=&quot;border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px&quot;&gt;&lt;span style=&quot;color: #606060&quot;&gt;  15:&lt;/span&gt; WebResponse httpResponse = httpRequest.GetResponse();&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 31 Dec 2009 04:49:52 +0000</pubDate>
        <link>http://javierholguera.com/2009/12/31/petici-243-n-post-con-c</link>
        <guid isPermaLink="true">http://javierholguera.com/2009/12/31/petici-243-n-post-con-c</guid>
        
        <category>C#</category>
        
        <category>POST</category>
        
        
      </item>
    
      <item>
        <title>Añadir assemblies a Visual Studio</title>
        <description>&lt;p&gt;Muchas veces necesitamos que un assembly esté en el GAC para no estar preocupados de incluirlo en cada proyecto. Simplemente, lo seleccionamos de la ventana “Add Reference” de Visual Studio, y somos felices con ello. Sin embargo, esta semana pasada me surgió la necesidad de añadir un assembly al GAC por mí mismo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javierholguera.com/assets/uploads/2009/12/AddReferenceWindow.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;AddReferenceWindow&quot; border=&quot;0&quot; alt=&quot;AddReferenceWindow&quot; src=&quot;http://javierholguera.com/assets/AddReferenceWindow_thumb.png&quot; width=&quot;722&quot; height=&quot;640&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;No es que sea demasiado difícil, basta con copiarlo a c:windowsassembly. Hasta un tecnicoless podría hacerlo. Sin embargo, no apareció mágicamente en la ventana de Add Reference. ¿Qué había hecho mal? ¿Qué me faltaba? Buceando un poco por Internet encontré a un tipo &lt;a href=&quot;http://weblogs.asp.net/jdanforth/archive/2003/12/16/43841.aspx&quot;&gt;explicando cómo hacerlo&lt;/a&gt; de 3 formas distintas.&lt;/p&gt;
&lt;p&gt;Huelga decir que elegí la más sencilla: copiar mi assembly a C:Program FilesMicrosoft Visual Studio 9.0Common7IDEPublicAssemblies&lt;/p&gt;
&lt;p&gt;Rearrancar el Visual Studio fue suficiente para ver mi assembly en la pestaña .NET. ¿Fácil no?&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Dec 2009 13:03:32 +0000</pubDate>
        <link>http://javierholguera.com/2009/12/01/aadir-assemblies-a-visual-studio</link>
        <guid isPermaLink="true">http://javierholguera.com/2009/12/01/aadir-assemblies-a-visual-studio</guid>
        
        <category>add</category>
        
        <category>assembly</category>
        
        <category>GAC</category>
        
        <category>reference</category>
        
        <category>studio</category>
        
        <category>visual</category>
        
        
        <category>Visual Studio 2008</category>
        
      </item>
    
      <item>
        <title>Usuarios, permisos y SQL Server</title>
        <description>&lt;p&gt;Recientemente me encontré ante la situación de tener que configurar, en un proyecto de Database de Visual Studio 2008, una serie de usuarios, permisos y roles.&lt;/p&gt;
&lt;p&gt;En concreto, necesitaba crear un rol que pudiera ejecutar procedimientos almacenados y hacer SELECTs sobre un determinado esquema. A este rol, a su vez, pertenecería un usuario que también debía crearse dinámicamente en el script. Tras una mañana de investigación, estas son mis conclusiones.&lt;/p&gt;
&lt;h2&gt;Logins y Users&lt;/h2&gt;
&lt;p&gt;En SQL Server hay que distinguir entre Logins y Users. Los Logins se crean a nivel de servidor de base de datos. Pueden crearse como Logins de SQL Server, o pueden crearse a partir de una cuenta Windows, lo que en general es más seguro por utilizarse la autenticación integrada. En mi caso era precisamente eso lo que pretendía hacer, crearlos a partir de una determinada cuenta Windows. Esto es muy sencillo de hacer, basta un comando como el que se puede ver a continuación:&lt;/p&gt;
&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;USE&lt;/span&gt; [yourdb]
&lt;span class=&quot;kwrd&quot;&gt;GO&lt;/span&gt;
&lt;span class=&quot;kwrd&quot;&gt;CREATE&lt;/span&gt; LOGIN [YourDomainYourUser] &lt;span class=&quot;kwrd&quot;&gt;FROM&lt;/span&gt; WINDOWS
&lt;span class=&quot;kwrd&quot;&gt;GO&lt;/span&gt;&lt;/pre&gt;
&lt;style type=&quot;text/css&quot;&gt;
&lt;p&gt;.csharpcode, .csharpcode pre&lt;br /&gt;
{&lt;br /&gt;
	font-size: small;&lt;br /&gt;
	color: black;&lt;br /&gt;
	font-family: consolas, &quot;Courier New&quot;, courier, monospace;&lt;br /&gt;
	background-color: #ffffff;&lt;br /&gt;
	/*white-space: pre;*/&lt;br /&gt;
}&lt;br /&gt;
.csharpcode pre { margin: 0em; }&lt;br /&gt;
.csharpcode .rem { color: #008000; }&lt;br /&gt;
.csharpcode .kwrd { color: #0000ff; }&lt;br /&gt;
.csharpcode .str { color: #006080; }&lt;br /&gt;
.csharpcode .op { color: #0000c0; }&lt;br /&gt;
.csharpcode .preproc { color: #cc6633; }&lt;br /&gt;
.csharpcode .asp { background-color: #ffff00; }&lt;br /&gt;
.csharpcode .html { color: #800000; }&lt;br /&gt;
.csharpcode .attr { color: #ff0000; }&lt;br /&gt;
.csharpcode .alt&lt;br /&gt;
{&lt;br /&gt;
	background-color: #f4f4f4;&lt;br /&gt;
	width: 100%;&lt;br /&gt;
	margin: 0em;&lt;br /&gt;
}&lt;br /&gt;
.csharpcode .lnum { color: #606060; }&lt;/style&gt;
&lt;p&gt;Sin embargo, esto tiene una pega: no se puede hacer en los proyectos de base de datos de Visual Studio 2008, o al menos yo no he encontrado el modo. Tiene su sentido, de todas formas, puesto que estos proyectos no dejan de ser la creación de una base de datos concreta, y no debería afectar a la configuración del servidor en sí.&lt;/p&gt;
&lt;p&gt;Una vez creado el Login, ya podemos crear un usuario y asociarlo a él. Esta parte sí se puede añadir al proyecto de BD de VS2008, en concreto en la carpeta Users dentro de Security. El TSQL necesario sería algo así:&lt;/p&gt;
&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;USER&lt;/span&gt; [YourDomainYourDbUser] &lt;span class=&quot;kwrd&quot;&gt;FROM&lt;/span&gt; LOGIN [YourDomainYourUser]
GO&lt;/pre&gt;
&lt;style type=&quot;text/css&quot;&gt;
&lt;p&gt;.csharpcode, .csharpcode pre&lt;br /&gt;
{&lt;br /&gt;
	font-size: small;&lt;br /&gt;
	color: black;&lt;br /&gt;
	font-family: consolas, &quot;Courier New&quot;, courier, monospace;&lt;br /&gt;
	background-color: #ffffff;&lt;br /&gt;
	/*white-space: pre;*/&lt;br /&gt;
}&lt;br /&gt;
.csharpcode pre { margin: 0em; }&lt;br /&gt;
.csharpcode .rem { color: #008000; }&lt;br /&gt;
.csharpcode .kwrd { color: #0000ff; }&lt;br /&gt;
.csharpcode .str { color: #006080; }&lt;br /&gt;
.csharpcode .op { color: #0000c0; }&lt;br /&gt;
.csharpcode .preproc { color: #cc6633; }&lt;br /&gt;
.csharpcode .asp { background-color: #ffff00; }&lt;br /&gt;
.csharpcode .html { color: #800000; }&lt;br /&gt;
.csharpcode .attr { color: #ff0000; }&lt;br /&gt;
.csharpcode .alt&lt;br /&gt;
{&lt;br /&gt;
	background-color: #f4f4f4;&lt;br /&gt;
	width: 100%;&lt;br /&gt;
	margin: 0em;&lt;br /&gt;
}&lt;br /&gt;
.csharpcode .lnum { color: #606060; }&lt;/style&gt;
&lt;p&gt;Bien, con esto ya tendríamos nuestro usuario concreto de la base de datos creado, asociado a un Login a nivel del servidor.&lt;/p&gt;
&lt;h2&gt;Roles y permisos&lt;/h2&gt;
&lt;p&gt;El siguiente paso es crear el rol al que vamos a asociar el usuario que recién hemos creado. Este rol va a pertenecerle a dbo. No podemos darle sus permisos directamente en el script que se crea en la carpeta Database Roles de Security, esa parte tendremos que añadirla en un script de Post-deployment. Así que en el script de creación del rol simplemente tendríamos la siguiente sentencia TSQL:&lt;/p&gt;
&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;ROLE&lt;/span&gt; [YourNewRole] &lt;span class=&quot;kwrd&quot;&gt;AUTHORIZATION&lt;/span&gt; [dbo]
GO&lt;/pre&gt;
&lt;style type=&quot;text/css&quot;&gt;
&lt;p&gt;.csharpcode, .csharpcode pre&lt;br /&gt;
{&lt;br /&gt;
	font-size: small;&lt;br /&gt;
	color: black;&lt;br /&gt;
	font-family: consolas, &quot;Courier New&quot;, courier, monospace;&lt;br /&gt;
	background-color: #ffffff;&lt;br /&gt;
	/*white-space: pre;*/&lt;br /&gt;
}&lt;br /&gt;
.csharpcode pre { margin: 0em; }&lt;br /&gt;
.csharpcode .rem { color: #008000; }&lt;br /&gt;
.csharpcode .kwrd { color: #0000ff; }&lt;br /&gt;
.csharpcode .str { color: #006080; }&lt;br /&gt;
.csharpcode .op { color: #0000c0; }&lt;br /&gt;
.csharpcode .preproc { color: #cc6633; }&lt;br /&gt;
.csharpcode .asp { background-color: #ffff00; }&lt;br /&gt;
.csharpcode .html { color: #800000; }&lt;br /&gt;
.csharpcode .attr { color: #ff0000; }&lt;br /&gt;
.csharpcode .alt&lt;br /&gt;
{&lt;br /&gt;
	background-color: #f4f4f4;&lt;br /&gt;
	width: 100%;&lt;br /&gt;
	margin: 0em;&lt;br /&gt;
}&lt;br /&gt;
.csharpcode .lnum { color: #606060; }&lt;/style&gt;
&lt;p&gt;Quedarían dos pasos por ejecutar: darle los permisos al rol que necesite y asociarle el usuario que creamos al principio.&lt;/p&gt;
&lt;p&gt;La primera parte se completa con una sentencia parecida a ésta. Sería necesario indicar qué esquema de los existentes en la base de datos, va a poder el rol ejecutar sus SPs.&lt;/p&gt;
&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;EXECUTE&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;SCHEMA&lt;/span&gt; ::[YourSchema] &lt;span class=&quot;kwrd&quot;&gt;TO&lt;/span&gt; [YourNewRole]
GO&lt;/pre&gt;
&lt;style type=&quot;text/css&quot;&gt;
&lt;p&gt;.csharpcode, .csharpcode pre&lt;br /&gt;
{&lt;br /&gt;
	font-size: small;&lt;br /&gt;
	color: black;&lt;br /&gt;
	font-family: consolas, &quot;Courier New&quot;, courier, monospace;&lt;br /&gt;
	background-color: #ffffff;&lt;br /&gt;
	/*white-space: pre;*/&lt;br /&gt;
}&lt;br /&gt;
.csharpcode pre { margin: 0em; }&lt;br /&gt;
.csharpcode .rem { color: #008000; }&lt;br /&gt;
.csharpcode .kwrd { color: #0000ff; }&lt;br /&gt;
.csharpcode .str { color: #006080; }&lt;br /&gt;
.csharpcode .op { color: #0000c0; }&lt;br /&gt;
.csharpcode .preproc { color: #cc6633; }&lt;br /&gt;
.csharpcode .asp { background-color: #ffff00; }&lt;br /&gt;
.csharpcode .html { color: #800000; }&lt;br /&gt;
.csharpcode .attr { color: #ff0000; }&lt;br /&gt;
.csharpcode .alt&lt;br /&gt;
{&lt;br /&gt;
	background-color: #f4f4f4;&lt;br /&gt;
	width: 100%;&lt;br /&gt;
	margin: 0em;&lt;br /&gt;
}&lt;br /&gt;
.csharpcode .lnum { color: #606060; }&lt;/style&gt;
&lt;p&gt;En cuanto a la segunda, bastaría algo como lo que sigue, apoyándonos en uno de los procedimientos almacenados del sistema:&lt;/p&gt;
&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;EXEC&lt;/span&gt; sp_addrolemember N&lt;span class=&quot;str&quot;&gt;'YourNewRole'&lt;/span&gt;, N&lt;span class=&quot;str&quot;&gt;'YourDomainYourUser'&lt;/span&gt;
GO&lt;/pre&gt;
&lt;style type=&quot;text/css&quot;&gt;
&lt;p&gt;.csharpcode, .csharpcode pre&lt;br /&gt;
{&lt;br /&gt;
	font-size: small;&lt;br /&gt;
	color: black;&lt;br /&gt;
	font-family: consolas, &quot;Courier New&quot;, courier, monospace;&lt;br /&gt;
	background-color: #ffffff;&lt;br /&gt;
	/*white-space: pre;*/&lt;br /&gt;
}&lt;br /&gt;
.csharpcode pre { margin: 0em; }&lt;br /&gt;
.csharpcode .rem { color: #008000; }&lt;br /&gt;
.csharpcode .kwrd { color: #0000ff; }&lt;br /&gt;
.csharpcode .str { color: #006080; }&lt;br /&gt;
.csharpcode .op { color: #0000c0; }&lt;br /&gt;
.csharpcode .preproc { color: #cc6633; }&lt;br /&gt;
.csharpcode .asp { background-color: #ffff00; }&lt;br /&gt;
.csharpcode .html { color: #800000; }&lt;br /&gt;
.csharpcode .attr { color: #ff0000; }&lt;br /&gt;
.csharpcode .alt&lt;br /&gt;
{&lt;br /&gt;
	background-color: #f4f4f4;&lt;br /&gt;
	width: 100%;&lt;br /&gt;
	margin: 0em;&lt;br /&gt;
}&lt;br /&gt;
.csharpcode .lnum { color: #606060; }&lt;/style&gt;
&lt;p&gt;Bibliografía:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms187936.aspx&quot;&gt;MSDN: Create Role&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://social.msdn.microsoft.com/Forums/en-US/sqldatabaseengine/thread/fb74acc3-b0ae-4443-b838-58dcf38d79a9&quot;&gt;How to check if a SQL Login exists?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://social.msdn.microsoft.com/forums/en-US/sqlsecurity/thread/a709c338-872f-40b7-80b0-7f7eb8a01682&quot;&gt;Asociar usuarios y roles&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlserverplanet.com/security/add-user/?07f54240&quot;&gt;Añadir usuarios a la base de datos&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.namwarrizvi.com/?p=248&quot;&gt;Crear roles y otros&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 01 Dec 2009 12:54:21 +0000</pubDate>
        <link>http://javierholguera.com/2009/12/01/usuarios-permisos-y-sql-server</link>
        <guid isPermaLink="true">http://javierholguera.com/2009/12/01/usuarios-permisos-y-sql-server</guid>
        
        <category>creation</category>
        
        <category>database</category>
        
        <category>role</category>
        
        <category>server</category>
        
        <category>sql</category>
        
        <category>user</category>
        
        
        <category>SQL Server</category>
        
      </item>
    
      <item>
        <title>I Have a Dream</title>
        <description>&lt;p&gt;I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.&lt;/p&gt;

&lt;p&gt;Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of their captivity.&lt;/p&gt;

&lt;p&gt;But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we’ve come here today to dramatize a shameful condition.&lt;/p&gt;

&lt;p&gt;In a sense we’ve come to our nation’s capital to cash a check. When the architects of our republic wrote the magnificent words of the Constitution and the Declaration of Independence, they were signing a promissory note to which every American was to fall heir. This note was a promise that all men, yes, black men as well as white men, would be guaranteed the “unalienable Rights” of “Life, Liberty and the pursuit of Happiness.” It is obvious today that America has defaulted on this promissory note, insofar as her citizens of color are concerned. Instead of honoring this sacred obligation, America has given the Negro people a bad check, a check which has come back marked “insufficient funds.”&lt;/p&gt;

&lt;p&gt;But we refuse to believe that the bank of justice is bankrupt. We refuse to believe that there are insufficient funds in the great vaults of opportunity of this nation. And so, we’ve come to cash this check, a check that will give us upon demand the riches of freedom and the security of justice.&lt;/p&gt;

&lt;p&gt;We have also come to this hallowed spot to remind America of the fierce urgency of Now. This is no time to engage in the luxury of cooling off or to take the tranquilizing drug of gradualism. Now is the time to make real the promises of democracy. Now is the time to rise from the dark and desolate valley of segregation to the sunlit path of racial justice. Now is the time to lift our nation from the quicksands of racial injustice to the solid rock of brotherhood. Now is the time to make justice a reality for all of God’s children.&lt;/p&gt;

&lt;p&gt;It would be fatal for the nation to overlook the urgency of the moment. This sweltering summer of the Negro’s legitimate discontent will not pass until there is an invigorating autumn of freedom and equality. Nineteen sixty-three is not an end, but a beginning. And those who hope that the Negro needed to blow off steam and will now be content will have a rude awakening if the nation returns to business as usual. And there will be neither rest nor tranquility in America until the Negro is granted his citizenship rights. The whirlwinds of revolt will continue to shake the foundations of our nation until the bright day of justice emerges.&lt;/p&gt;

&lt;p&gt;But there is something that I must say to my people, who stand on the warm threshold which leads into the palace of justice: In the process of gaining our rightful place, we must not be guilty of wrongful deeds. Let us not seek to satisfy our thirst for freedom by drinking from the cup of bitterness and hatred. We must forever conduct our struggle on the high plane of dignity and discipline. We must not allow our creative protest to degenerate into physical violence. Again and again, we must rise to the majestic heights of meeting physical force with soul force.&lt;/p&gt;

&lt;p&gt;The marvelous new militancy which has engulfed the Negro community must not lead us to a distrust of all white people, for many of our white brothers, as evidenced by their presence here today, have come to realize that their destiny is tied up with our destiny. And they have come to realize that their freedom is inextricably bound to our freedom.&lt;/p&gt;

&lt;p&gt;We cannot walk alone.&lt;/p&gt;

&lt;p&gt;And as we walk, we must make the pledge that we shall always march ahead.&lt;/p&gt;

&lt;p&gt;We cannot turn back.&lt;/p&gt;

&lt;p&gt;There are those who are asking the devotees of civil rights, “When will you be satisfied?” We can never be satisfied as long as the Negro is the victim of the unspeakable horrors of police brutality. We can never be satisfied as long as our bodies, heavy with the fatigue of travel, cannot gain lodging in the motels of the highways and the hotels of the cities. We cannot be satisfied as long as the negro’s basic mobility is from a smaller ghetto to a larger one. We can never be satisfied as long as our children are stripped of their self-hood and robbed of their dignity by signs stating: “For Whites Only.” We cannot be satisfied as long as a Negro in Mississippi cannot vote and a Negro in New York believes he has nothing for which to vote. No, no, we are not satisfied, and we will not be satisfied until “justice rolls down like waters, and righteousness like a mighty stream.”&lt;/p&gt;

&lt;p&gt;I am not unmindful that some of you have come here out of great trials and tribulations. Some of you have come fresh from narrow jail cells. And some of you have come from areas where your quest – quest for freedom left you battered by the storms of persecution and staggered by the winds of police brutality. You have been the veterans of creative suffering. Continue to work with the faith that unearned suffering is redemptive. Go back to Mississippi, go back to Alabama, go back to South Carolina, go back to Georgia, go back to Louisiana, go back to the slums and ghettos of our northern cities, knowing that somehow this situation can and will be changed.&lt;/p&gt;

&lt;p&gt;Let us not wallow in the valley of despair, I say to you today, my friends.&lt;/p&gt;

&lt;p&gt;And so even though we face the difficulties of today and tomorrow, I still have a dream. It is a dream deeply rooted in the American dream.&lt;/p&gt;

&lt;p&gt;I have a dream that one day this nation will rise up and live out the true meaning of its creed: “We hold these truths to be self-evident, that all men are created equal.”&lt;/p&gt;

&lt;p&gt;I have a dream that one day on the red hills of Georgia, the sons of former slaves and the sons of former slave owners will be able to sit down together at the table of brotherhood.&lt;/p&gt;

&lt;p&gt;I have a dream that one day even the state of Mississippi, a state sweltering with the heat of injustice, sweltering with the heat of oppression, will be transformed into an oasis of freedom and justice.&lt;/p&gt;

&lt;p&gt;I have a dream that my four little children will one day live in a nation where they will not be judged by the color of their skin but by the content of their character.&lt;/p&gt;

&lt;p&gt;I have a &lt;strong&gt;dream&lt;/strong&gt; today!&lt;/p&gt;

&lt;p&gt;I have a dream that one day, down in Alabama, with its vicious racists, with its governor having his lips dripping with the words of “interposition” and “nullification” – one day right there in Alabama little black boys and black girls will be able to join hands with little white boys and white girls as sisters and brothers.&lt;/p&gt;

&lt;p&gt;I have a &lt;strong&gt;dream&lt;/strong&gt; today!&lt;/p&gt;

&lt;p&gt;I have a dream that one day every valley shall be exalted, and every hill and mountain shall be made low, the rough places will be made plain, and the crooked places will be made straight; “and the glory of the Lord shall be revealed and all flesh shall see it together.”&lt;/p&gt;

&lt;p&gt;This is our hope, and this is the faith that I go back to the South with.&lt;/p&gt;

&lt;p&gt;With this faith, we will be able to hew out of the mountain of despair a stone of hope. With this faith, we will be able to transform the jangling discords of our nation into a beautiful symphony of brotherhood. With this faith, we will be able to work together, to pray together, to struggle together, to go to jail together, to stand up for freedom together, knowing that we will be free one day.&lt;/p&gt;

&lt;p&gt;And this will be the day – this will be the day when all of God’s children will be able to sing with new meaning:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My country ‘tis of thee, sweet land of liberty, of thee I sing.&lt;/p&gt;

  &lt;p&gt;Land where my fathers died, land of the Pilgrim’s pride,&lt;/p&gt;

  &lt;p&gt;From every mountainside, let freedom ring!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And if America is to be a great nation, this must become true.&lt;/p&gt;

&lt;p&gt;And so let freedom ring from the prodigious hilltops of New Hampshire.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let freedom ring from the mighty mountains of New York.&lt;/p&gt;

  &lt;p&gt;Let freedom ring from the heightening Alleghenies of Pennsylvania.&lt;/p&gt;

  &lt;p&gt;Let freedom ring from the snow-capped Rockies of Colorado.&lt;/p&gt;

  &lt;p&gt;Let freedom ring from the curvaceous slopes of California.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But not only that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let freedom ring from Stone Mountain of Georgia.&lt;/p&gt;

  &lt;p&gt;Let freedom ring from Lookout Mountain of Tennessee.&lt;/p&gt;

  &lt;p&gt;Let freedom ring from every hill and molehill of Mississippi.&lt;/p&gt;

  &lt;p&gt;From every mountainside, let freedom ring.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And when this happens, and when we allow freedom ring, when we let it ring from every village and every hamlet, from every state and every city, we will be able to speed up that day when all of God’s children, black men and white men, Jews and Gentiles, Protestants and Catholics, will be able to join hands and sing in the words of the old Negro spiritual:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Free at last! Free at last!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank God Almighty, we are free at last!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By &lt;strong&gt;Martin Luther King&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An American pastor, activist, humanitarian. People know him for leading the African-American Civil Rights movement using nonviolent civil disobedience.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Aug 1963 10:18:00 +0000</pubDate>
        <link>http://javierholguera.com/1963/08/28/i-have-a-dream</link>
        <guid isPermaLink="true">http://javierholguera.com/1963/08/28/i-have-a-dream</guid>
        
        <category>speeches</category>
        
        
        <category>casper</category>
        
      </item>
    
      <item>
        <title>The Purpose of Education</title>
        <description>&lt;p&gt;As I engage in the so-called “bull sessions” around and about the school, I too often find that most college men have a misconception of the purpose of education. Most of the “brethren” think that education should equip them with the proper instruments of exploitation so that they can forever trample over the masses. Still others think that education should furnish them with noble ends rather than means to an end.&lt;/p&gt;

&lt;p&gt;It seems to me that education has a two-fold function to perform in the life of man and in society: the one is utility and the other is culture. Education must enable a man to become more efficient, to achieve with increasing facility the ligitimate goals of his life.&lt;/p&gt;

&lt;p&gt;Education must also train one for quick, resolute and effective thinking. To think incisively and to think for one’s self is very difficult. We are prone to let our mental life become invaded by legions of half truths, prejudices, and propaganda. At this point, I often wonder whether or not education is fulfilling its purpose. A great majority of the so-called educated people do not think logically and scientifically. Even the press, the classroom, the platform, and the pulpit in many instances do not give us objective and unbiased truths. To save man from the morass of propaganda, in my opinion, is one of the chief aims of education. Education must enable one to sift and weigh evidence, to discern the true from the false, the real from the unreal, and the facts from the fiction.&lt;/p&gt;

&lt;p&gt;The function of education, therefore, is to teach one to think intensively and to think critically. But education which stops with efficiency may prove the greatest menace to society. The most dangerous criminal may be the man gifted with reason, but with no morals.&lt;/p&gt;

&lt;p&gt;The late Eugene Talmadge, in my opinion, possessed one of the better minds of Georgia, or even America. Moreover, he wore the Phi Beta Kappa key. By all measuring rods, Mr. Talmadge could think critically and intensively; yet he contends that I am an inferior being. Are those the types of men we call educated?&lt;/p&gt;

&lt;p&gt;We must remember that intelligence is not enough. Intelligence plus character–that is the goal of true education. The complete education gives one not only power of concentration, but worthy objectives upon which to concentrate. The broad education will, therefore, transmit to one not only the accumulated knowledge of the race but also the accumulated experience of social living.&lt;/p&gt;

&lt;p&gt;If we are not careful, our colleges will produce a group of close-minded, unscientific, illogical propagandists, consumed with immoral acts. Be careful, “brethren!” Be careful, teachers!&lt;/p&gt;

&lt;p&gt;By &lt;strong&gt;Martin Luther King&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An American pastor, activist, humanitarian. People know him for leading the African-American Civil Rights movement using nonviolent civil disobedience.&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Dec 1948 10:18:00 +0000</pubDate>
        <link>http://javierholguera.com/1948/12/12/the-purpose-of-education</link>
        <guid isPermaLink="true">http://javierholguera.com/1948/12/12/the-purpose-of-education</guid>
        
        <category>speeches</category>
        
        <category>fiction</category>
        
        
        <category>casper</category>
        
      </item>
    
      <item>
        <title>Out to Sea</title>
        <description>&lt;p&gt;I had this story from one who had no business to tell it to me, or to any other. I may credit the seductive influence of an old vintage upon the narrator for the beginning of it, and my own skeptical incredulity during the days that followed for the balance of the strange tale.&lt;/p&gt;

&lt;p&gt;When my convivial host discovered that he had told me so much, and that I was prone to doubtfulness, his foolish pride assumed the task the old vintage had commenced, and so he unearthed written evidence in the form of musty manuscript, and dry official records of the British Colonial Office to support many of the salient features of his remarkable narrative.&lt;/p&gt;

&lt;p&gt;I do not say the story is true, for I did not witness the happenings which it portrays, but the fact that in the telling of it to you I have taken fictitious names for the principal characters quite sufficiently evidences the sincerity of my own belief that it MAY be true.&lt;/p&gt;

&lt;p&gt;The yellow, mildewed pages of the diary of a man long dead, and the records of the Colonial Office dovetail perfectly with the narrative of my convivial host, and so I give you the story as I painstakingly pieced it out from these several various agencies.&lt;/p&gt;

&lt;p&gt;If you do not find it credible you will at least be as one with me in acknowledging that it is unique, remarkable, and interesting.&lt;/p&gt;

&lt;p&gt;From the records of the Colonial Office and from the dead man’s diary we learn that a certain young English nobleman, whom we shall call John Clayton, Lord Greystoke, was commissioned to make a peculiarly delicate investigation of conditions in a British West Coast African Colony from whose simple native inhabitants another European power was known to be recruiting soldiers for its native army, which it used solely for the forcible collection of rubber and ivory from the savage tribes along the Congo and the Aruwimi. The natives of the British Colony complained that many of their young men were enticed away through the medium of fair and glowing promises, but that few if any ever returned to their families.&lt;/p&gt;

&lt;p&gt;The Englishmen in Africa went even further, saying that these poor blacks were held in virtual slavery, since after their terms of enlistment expired their ignorance was imposed upon by their white officers, and they were told that they had yet several years to serve.&lt;/p&gt;

&lt;p&gt;And so the Colonial Office appointed John Clayton to a new post in British West Africa, but his confidential instructions centered on a thorough investigation of the unfair treatment of black British subjects by the officers of a friendly European power. Why he was sent, is, however, of little moment to this story, for he never made an investigation, nor, in fact, did he ever reach his destination.&lt;/p&gt;

&lt;p&gt;Clayton was the type of Englishman that one likes best to associate with the noblest monuments of historic achievement upon a thousand victorious battlefields–a strong, virile man –mentally, morally, and physically.&lt;/p&gt;

&lt;p&gt;In stature he was above the average height; his eyes were gray, his features regular and strong; his carriage that of perfect, robust health influenced by his years of army training.&lt;/p&gt;

&lt;p&gt;Political ambition had caused him to seek transference from the army to the Colonial Office and so we find him, still young, entrusted with a delicate and important commission in the service of the Queen.&lt;/p&gt;

&lt;p&gt;When he received this appointment he was both elated and appalled. The preferment seemed to him in the nature of a well-merited reward for painstaking and intelligent service, and as a stepping stone to posts of greater importance and responsibility; but, on the other hand, he had been married to the Hon. Alice Rutherford for scarce a three months, and it was the thought of taking this fair young girl into the dangers and isolation of tropical Africa that appalled him.&lt;/p&gt;

&lt;p&gt;For her sake he would have refused the appointment, but she would not have it so. Instead she insisted that he accept, and, indeed, take her with him.&lt;/p&gt;

&lt;p&gt;There were mothers and brothers and sisters, and aunts and cousins to express various opinions on the subject, but as to what they severally advised history is silent.&lt;/p&gt;

&lt;p&gt;We know only that on a bright May morning in 1888, John, Lord Greystoke, and Lady Alice sailed from Dover on their way to Africa.&lt;/p&gt;

&lt;p&gt;A month later they arrived at Freetown where they chartered a small sailing vessel, the Fuwalda, which was to bear them to their final destination.&lt;/p&gt;

&lt;p&gt;And here John, Lord Greystoke, and Lady Alice, his wife, vanished from the eyes and from the knowledge of men.&lt;/p&gt;

&lt;p&gt;Two months after they weighed anchor and cleared from the port of Freetown a half dozen British war vessels were scouring the south Atlantic for trace of them or their little vessel, and it was almost immediately that the wreckage was found upon the shores of St. Helena which convinced the world that the Fuwalda had gone down with all on board, and hence the search was stopped ere it had scarce begun; though hope lingered in longing hearts for many years.&lt;/p&gt;

&lt;p&gt;The Fuwalda, a barkentine of about one hundred tons, was a vessel of the type often seen in coastwise trade in the far southern Atlantic, their crews composed of the offscourings of the sea–unhanged murderers and cutthroats of every race and every nation.&lt;/p&gt;

&lt;p&gt;The Fuwalda was no exception to the rule. Her officers were swarthy bullies, hating and hated by their crew. The captain, while a competent seaman, was a brute in his treatment of his men. He knew, or at least he used, but two arguments in his dealings with them–a belaying pin and a revolver–nor is it likely that the motley aggregation he signed would have understood aught else.&lt;/p&gt;

&lt;p&gt;So it was that from the second day out from Freetown John Clayton and his young wife witnessed scenes upon the deck of the Fuwalda such as they had believed were never enacted outside the covers of printed stories of the sea.&lt;/p&gt;

&lt;p&gt;It was on the morning of the second day that the first link was forged in what was destined to form a chain of circumstances ending in a life for one then unborn such as has never been paralleled in the history of man.&lt;/p&gt;

&lt;p&gt;Two sailors were washing down the decks of the Fuwalda, the first mate was on duty, and the captain had stopped to speak with John Clayton and Lady Alice.&lt;/p&gt;

&lt;p&gt;The men were working backwards toward the little party who were facing away from the sailors. Closer and closer they came, until one of them was directly behind the captain. In another moment he would have passed by and this strange narrative would never have been recorded.&lt;/p&gt;

&lt;p&gt;But just that instant the officer turned to leave Lord and Lady Greystoke, and, as he did so, tripped against the sailor and sprawled headlong upon the deck, overturning the water- pail so that he was drenched in its dirty contents.&lt;/p&gt;

&lt;p&gt;For an instant the scene was ludicrous; but only for an instant. With a volley of awful oaths, his face suffused with the scarlet of mortification and rage, the captain regained his feet, and with a terrific blow felled the sailor to the deck.&lt;/p&gt;

&lt;p&gt;The man was small and rather old, so that the brutality of the act was thus accentuated. The other seaman, however, was neither old nor small–a huge bear of a man, with fierce black mustachios, and a great bull neck set between massive shoulders.&lt;/p&gt;

&lt;p&gt;As he saw his mate go down he crouched, and, with a low snarl, sprang upon the captain crushing him to his knees with a single mighty blow.&lt;/p&gt;

&lt;p&gt;From scarlet the officer’s face went white, for this was mutiny; and mutiny he had met and subdued before in his brutal career. Without waiting to rise he whipped a revolver from his pocket, firing point blank at the great mountain of muscle towering before him; but, quick as he was, John Clayton was almost as quick, so that the bullet which was intended for the sailor’s heart lodged in the sailor’s leg instead, for Lord Greystoke had struck down the captain’s arm as he had seen the weapon flash in the sun.&lt;/p&gt;

&lt;p&gt;Words passed between Clayton and the captain, the former making it plain that he was disgusted with the brutality displayed toward the crew, nor would he countenance anything further of the kind while he and Lady Greystoke remained passengers.&lt;/p&gt;

&lt;p&gt;The captain was on the point of making an angry reply, but, thinking better of it, turned on his heel and black and scowling, strode aft.&lt;/p&gt;

&lt;p&gt;He did not care to antagonize an English official, for the Queen’s mighty arm wielded a punitive instrument which he could appreciate, and which he feared–England’s far-reaching navy.&lt;/p&gt;

&lt;p&gt;The two sailors picked themselves up, the older man assisting his wounded comrade to rise. The big fellow, who was known among his mates as Black Michael, tried his leg gingerly, and, finding that it bore his weight, turned to Clayton with a word of gruff thanks.&lt;/p&gt;

&lt;p&gt;Though the fellow’s tone was surly, his words were evidently well meant. Ere he had scarce finished his little speech he had turned and was limping off toward the forecastle with the very apparent intention of forestalling any further conversation.&lt;/p&gt;

&lt;p&gt;They did not see him again for several days, nor did the captain accord them more than the surliest of grunts when he was forced to speak to them.&lt;/p&gt;

&lt;p&gt;They took their meals in his cabin, as they had before the unfortunate occurrence; but the captain was careful to see that his duties never permitted him to eat at the same time.&lt;/p&gt;

&lt;p&gt;The other officers were coarse, illiterate fellows, but little above the villainous crew they bullied, and were only too glad to avoid social intercourse with the polished English noble and his lady, so that the Claytons were left very much to themselves.&lt;/p&gt;

&lt;p&gt;This in itself accorded perfectly with their desires, but it also rather isolated them from the life of the little ship so that they were unable to keep in touch with the daily happenings which were to culminate so soon in bloody tragedy.&lt;/p&gt;

&lt;p&gt;By &lt;strong&gt;Edgar Rice Burroughs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An American novelist, best known for his work writing about a brave jungle hero called Tarzan and his muse, Jane.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jul 1912 10:18:00 +0000</pubDate>
        <link>http://javierholguera.com/1912/07/24/out-to-sea</link>
        <guid isPermaLink="true">http://javierholguera.com/1912/07/24/out-to-sea</guid>
        
        <category>fiction</category>
        
        
        <category>casper</category>
        
      </item>
    
      <item>
        <title>Looking-Glass house</title>
        <description>&lt;p&gt;One thing was certain, that the white kitten had had nothing to do with it:— it was the black kitten’s fault entirely. For the white kitten had been having its face washed by the old cat for the last quarter of an hour (and bearing it pretty well, considering); so you see that it couldn’t have had any hand in the mischief. 
The way Dinah washed her children’s faces was this: first she held the poor thing down by its ear with one paw, and then with the other paw she rubbed its face all over, the wrong way, beginning at the nose: and just now, as I said, she was hard at work on the white kitten, which was lying quite still and trying to purr — no doubt feeling that it was all meant for its good. 
But the black kitten had been finished with earlier in the afternoon, and so, while Alice was sitting curled up in a corner of the great arm-chair, half talking to herself and half asleep, the kitten had been having a grand game of romps with the ball of worsted Alice had been trying to wind up, and had been rolling it up and down till it had all come undone again; and there it was, spread over the hearth-rug, all knots and tangles, with the kitten running after its own tail in the middle.&lt;/p&gt;

&lt;p&gt;‘Oh, you wicked little thing!’ cried Alice, catching up the kitten, and giving it a little kiss to make it understand that it was in disgrace. ‘Really, Dinah ought to have taught you better manners! You ought, Dinah, you know you ought!’ she added, looking reproachfully at the old cat, and speaking in as cross a voice as she could manage — and then she scrambled back into the arm-chair, taking the kitten and the worsted with her, and began winding up the ball again. But she didn’t get on very fast, as she was talking all the time, sometimes to the kitten, and sometimes to herself. Kitty sat very demurely on her knee, pretending to watch the progress of the winding, and now and then putting out one paw and gently touching the ball, as if it would be glad to help, if it might. ‘Do you know what to-morrow is, Kitty?’ Alice began. ‘You’d have guessed if you’d been up in the window with me — only Dinah was making you tidy, so you couldn’t. I was watching the boys getting in sticks for the bonfire — and it wants plenty of sticks, Kitty! Only it got so cold, and it snowed so, they had to leave off. Never mind, Kitty, we’ll go and see the bonfire to-morrow.’ Here Alice wound two or three turns of the worsted round the kitten’s neck, just to see how it would look: this led to a scramble, in which the ball rolled down upon the floor, and yards and yards of it got unwound again.&lt;/p&gt;

&lt;p&gt;‘Do you know, I was so angry, Kitty,’ Alice went on as soon as they were comfortably settled again, ‘when I saw all the mischief you had been doing, I was very nearly opening the window, and putting you out into the snow! And you’d have deserved it, you little mischievous darling! What have you got to say for yourself? Now don’t interrupt me!’ she went on, holding up one finger. ‘I’m going to tell you all your faults. Number one: you squeaked twice while Dinah was washing your face this morning. Now you can’t deny it, Kitty: I heard you! What’s that you say?’ (pretending that the kitten was speaking.) ‘Her paw went into your eye? Well, that’s your fault, for keeping your eyes open — if you’d shut them tight up, it wouldn’t have happened. Now don’t make any more excuses, but listen! Number two: you pulled Snowdrop away by the tail just as I had put down the saucer of milk before her! What, you were thirsty, were you? How do you know she wasn’t thirsty too? Now for number three: you unwound every bit of the worsted while I wasn’t looking! 
‘That’s three faults, Kitty, and you’ve not been punished for any of them yet. You know I’m saving up all your punishments for Wednesday week — Suppose they had saved up all my punishments!’ she went on, talking more to herself than the kitten. ‘What would they do at the end of a year? I should be sent to prison, I suppose, when the day came. Or — let me see — suppose each punishment was to be going without a dinner: then, when the miserable day came, I should have to go without fifty dinners at once! Well, I shouldn’t mind that much! I’d far rather go without them than eat them! ‘Do you hear the snow against the window-panes, Kitty? How nice and soft it sounds! Just as if some one was kissing the window all over outside. I wonder if the snow loves the trees and fields, that it kisses them so gently? And then it covers them up snug, you know, with a white quilt; and perhaps it says, “Go to sleep, darlings, till the summer comes again.” And when they wake up in the summer, Kitty, they dress themselves all in green, and dance about — whenever the wind blows — oh, that’s very pretty!’ cried Alice, dropping the ball of worsted to clap her hands. ‘And I do so wish it was true! I’m sure the woods look sleepy in the autumn, when the leaves are getting brown. ‘Kitty, can you play chess? Now, don’t smile, my dear, I’m asking it seriously. Because, when we were playing just now, you watched just as if you understood it: and when I said “Check!” you purred! Well, it was a nice check, Kitty, and really I might have won, if it hadn’t been for that nasty Knight, that came wiggling down among my pieces. Kitty, dear, let’s pretend —’ And here I wish I could tell you half the things Alice used to say, beginning with her favourite phrase ‘Let’s pretend.’ She had had quite a long argument with her sister only the day before — all because Alice had begun with ‘Let’s pretend we’re kings and queens;’ and her sister, who liked being very exact, had argued that they couldn’t, because there were only two of them, and Alice had been reduced at last to say, ‘Well, you can be one of them then, and I’ll be all the rest.’ And once she had really frightened her old nurse by shouting suddenly in her ear, ‘Nurse! Do let’s pretend that I’m a hungry hyaena, and you’re a bone.’ But this is taking us away from Alice’s speech to the kitten. ‘Let’s pretend that you’re the Red Queen, Kitty! Do you know, I think if you sat up and folded your arms, you’d look exactly like her. Now do try, there’s a dear!’ And Alice got the Red Queen off the table, and set it up before the kitten as a model for it to imitate: however, the thing didn’t succeed, principally, Alice said, because the kitten wouldn’t fold its arms properly. So, to punish it, she held it up to the Looking-glass, that it might see how sulky it was —‘and if you’re not good directly,’ she added, ‘I’ll put you through into Looking-glass House. How would you like that?’ 
‘Now, if you’ll only attend, Kitty, and not talk so much, I’ll tell you all my ideas about Looking-glass House. First, there’s the room you can see through the glass — that’s just the same as our drawing room, only the things go the other way. I can see all of it when I get upon a chair — all but the bit behind the fireplace. Oh! I do so wish I could see that bit! I want so much to know whether they’ve a fire in the winter: you never can tell, you know, unless our fire smokes, and then smoke comes up in that room too — but that may be only pretence, just to make it look as if they had a fire. Well then, the books are something like our books, only the words go the wrong way; I know that, because I’ve held up one of our books to the glass, and then they hold up one in the other room. ‘How would you like to live in Looking-glass House, Kitty? I wonder if they’d give you milk in there? Perhaps Looking-glass milk isn’t good to drink — But oh, Kitty! now we come to the passage. You can just see a little peep of the passage in Looking-glass House, if you leave the door of our drawing-room wide open: and it’s very like our passage as far as you can see, only you know it may be quite different on beyond. Oh, Kitty! how nice it would be if we could only get through into Looking-glass House! I’m sure it’s got, oh! such beautiful things in it! Let’s pretend there’s a way of getting through into it, somehow, Kitty. Let’s pretend the glass has got all soft like gauze, so that we can get through. Why, it’s turning into a sort of mist now, I declare! It’ll be easy enough to get through —’ She was up on the chimney-piece while she said this, though she hardly knew how she had got there. And certainly the glass was beginning to melt away, just like a bright silvery mist.&lt;/p&gt;

&lt;p&gt;In another moment Alice was through the glass, and had jumped lightly down into the Looking-glass room. The very first thing she did was to look whether there was a fire in the fireplace, and she was quite pleased to find that there was a real one, blazing away as brightly as the one she had left behind. ‘So I shall be as warm here as I was in the old room,’ thought Alice: ‘warmer, in fact, because there’ll be no one here to scold me away from the fire. Oh, what fun it’ll be, when they see me through the glass in here, and can’t get at me!’&lt;/p&gt;

&lt;p&gt;Then she began looking about, and noticed that what could be seen from the old room was quite common and uninteresting, but that all the rest was as different as possible. For instance, the pictures on the wall next the fire seemed to be all alive, and the very clock on the chimney-piece (you know you can only see the back of it in the Looking-glass) had got the face of a little old man, and grinned at her. 
‘They don’t keep this room so tidy as the other,’ Alice thought to herself, as she noticed several of the chessmen down in the hearth among the cinders: but in another moment, with a little ‘Oh!’ of surprise, she was down on her hands and knees watching them. The chessmen were walking about, two and two!&lt;/p&gt;

&lt;p&gt;‘Here are the Red King and the Red Queen,’ Alice said (in a whisper, for fear of frightening them), ‘and there are the White King and the White Queen sitting on the edge of the shovel — and here are two castles walking arm in arm — I don’t think they can hear me,’ she went on, as she put her head closer down, ‘and I’m nearly sure they can’t see me. I feel somehow as if I were invisible —’ Here something began squeaking on the table behind Alice, and made her turn her head just in time to see one of the White Pawns roll over and begin kicking: she watched it with great curiosity to see what would happen next. 
‘It is the voice of my child!’ the White Queen cried out as she rushed past the King, so violently that she knocked him over among the cinders. ‘My precious Lily! My imperial kitten!’ and she began scrambling wildly up the side of the fender. ‘Imperial fiddlestick!’ said the King, rubbing his nose, which had been hurt by the fall. He had a right to be a little annoyed with the Queen, for he was covered with ashes from head to foot. Alice was very anxious to be of use, and, as the poor little Lily was nearly screaming herself into a fit, she hastily picked up the Queen and set her on the table by the side of her noisy little daughter. 
The Queen gasped, and sat down: the rapid journey through the air had quite taken away her breath and for a minute or two she could do nothing but hug the little Lily in silence. As soon as she had recovered her breath a little, she called out to the White King, who was sitting sulkily among the ashes, ‘Mind the volcano!’ 
‘What volcano?’ said the King, looking up anxiously into the fire, as if he thought that was the most likely place to find one. ‘Blew — me — up,’ panted the Queen, who was still a little out of breath. ‘Mind you come up — the regular way — don’t get blown up!’ Alice watched the White King as he slowly struggled up from bar to bar, till at last she said, ‘Why, you’ll be hours and hours getting to the table, at that rate. I’d far better help you, hadn’t I?’ But the King took no notice of the question: it was quite clear that he could neither hear her nor see her. 
So Alice picked him up very gently, and lifted him across more slowly than she had lifted the Queen, that she mightn’t take his breath away: but, before she put him on the table, she thought she might as well dust him a little, he was so covered with ashes.&lt;/p&gt;

&lt;p&gt;She said afterwards that she had never seen in all her life such a face as the King made, when he found himself held in the air by an invisible hand, and being dusted: he was far too much astonished to cry out, but his eyes and his mouth went on getting larger and larger, and rounder and rounder, till her hand shook so with laughing that she nearly let him drop upon the floor. 
‘Oh! please don’t make such faces, my dear!’ she cried out, quite forgetting that the King couldn’t hear her. ‘You make me laugh so that I can hardly hold you! And don’t keep your mouth so wide open! All the ashes will get into it — there, now I think you’re tidy enough!’ she added, as she smoothed his hair, and set him upon the table near the Queen. The King immediately fell flat on his back, and lay perfectly still: and Alice was a little alarmed at what she had done, and went round the room to see if she could find any water to throw over him. However, she could find nothing but a bottle of ink, and when she got back with it she found he had recovered, and he and the Queen were talking together in a frightened whisper — so low, that Alice could hardly hear what they said. 
The King was saying, ‘I assure, you my dear, I turned cold to the very ends of my whiskers!’ 
To which the Queen replied, ‘You haven’t got any whiskers.’ 
‘The horror of that moment,’ the King went on, ‘I shall never, never forget!’ ‘You will, though,’ the Queen said, ‘if you don’t make a memorandum of it.’ Alice looked on with great interest as the King took an enormous memorandum-book out of his pocket, and began writing. A sudden thought struck her, and she took hold of the end of the pencil, which came some way over his shoulder, and began writing for him. 
The poor King looked puzzled and unhappy, and struggled with the pencil for some time without saying anything; but Alice was too strong for him, and at last he panted out, ‘My dear! I really must get a thinner pencil. I can’t manage this one a bit; it writes all manner of things that I don’t intend —’ 
‘What manner of things?’ said the Queen, looking over the book (in which Alice had put ‘the White Knight is sliding down the poker. He balances very badly’) ‘That’s not a memorandum of your feelings!’&lt;/p&gt;

&lt;p&gt;By &lt;strong&gt;Lewis Carrol&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An English writer, mathematician, logician, Anglican deacon and photographer, best know for writing about Alice.&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Mar 1871 10:18:00 +0000</pubDate>
        <link>http://javierholguera.com/1871/03/18/looking-glass-house</link>
        <guid isPermaLink="true">http://javierholguera.com/1871/03/18/looking-glass-house</guid>
        
        <category>fiction</category>
        
        
        <category>casper</category>
        
      </item>
    
      <item>
        <title>Down The Rabbit Hole</title>
        <description>&lt;p&gt;Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, ‘and what is the use of a book,’ thought Alice ‘without pictures or conversation?’&lt;/p&gt;

&lt;p&gt;So she was considering in her own mind (as well as she could, for the hot day made her feel very sleepy and stupid), whether the pleasure of making a daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly a White Rabbit with pink eyes ran close by her.&lt;/p&gt;

&lt;p&gt;There was nothing so very remarkable in that; nor did Alice think it so very much out of the way to hear the Rabbit say to itself, ‘Oh dear! Oh dear! I shall be late!’ (when she thought it over afterwards, it occurred to her that she ought to have wondered at this, but at the time it all seemed quite natural); but when the Rabbit actually took a watch out of its waistcoat-pocket, and looked at it, and then hurried on, Alice started to her feet, for it flashed across her mind that she had never before seen a rabbit with either a waistcoat-pocket, or a watch to take out of it, and burning with curiosity, she ran across the field after it, and fortunately was just in time to see it pop down a large rabbit-hole under the hedge.&lt;/p&gt;

&lt;p&gt;In another moment down went Alice after it, never once considering how in the world she was to get out again.&lt;/p&gt;

&lt;p&gt;The rabbit-hole went straight on like a tunnel for some way, and then dipped suddenly down, so suddenly that Alice had not a moment to think about stopping herself before she found herself falling down a very deep well.&lt;/p&gt;

&lt;p&gt;Either the well was very deep, or she fell very slowly, for she had plenty of time as she went down to look about her and to wonder what was going to happen next. First, she tried to look down and make out what she was coming to, but it was too dark to see anything; then she looked at the sides of the well, and noticed that they were filled with cupboards and book-shelves; here and there she saw maps and pictures hung upon pegs. She took down a jar from one of the shelves as she passed; it was labelled ‘ORANGE MARMALADE’, but to her great disappointment it was empty: she did not like to drop the jar for fear of killing somebody, so managed to put it into one of the cupboards as she fell past it.&lt;/p&gt;

&lt;p&gt;‘Well!’ thought Alice to herself, ‘after such a fall as this, I shall think nothing of tumbling down stairs! How brave they’ll all think me at home! Why, I wouldn’t say anything about it, even if I fell off the top of the house!’ (Which was very likely true.)&lt;/p&gt;

&lt;p&gt;Down, down, down. Would the fall never come to an end! ‘I wonder how many miles I’ve fallen by this time?’ she said aloud. ‘I must be getting somewhere near the centre of the earth. Let me see: that would be four thousand miles down, I think—’ (for, you see, Alice had learnt several things of this sort in her lessons in the schoolroom, and though this was not a very good opportunity for showing off her knowledge, as there was no one to listen to her, still it was good practice to say it over) ‘—yes, that’s about the right distance—but then I wonder what Latitude or Longitude I’ve got to?’ (Alice had no idea what Latitude was, or Longitude either, but thought they were nice grand words to say.)&lt;/p&gt;

&lt;p&gt;Presently she began again. ‘I wonder if I shall fall right through the earth! How funny it’ll seem to come out among the people that walk with their heads downward! The Antipathies, I think—’ (she was rather glad there was no one listening, this time, as it didn’t sound at all the right word) ‘—but I shall have to ask them what the name of the country is, you know. Please, Ma’am, is this New Zealand or Australia?’ (and she tried to curtsey as she spoke—fancy curtseying as you’re falling through the air! Do you think you could manage it?) ‘And what an ignorant little girl she’ll think me for asking! No, it’ll never do to ask: perhaps I shall see it written up somewhere.’&lt;/p&gt;

&lt;p&gt;Down, down, down. There was nothing else to do, so Alice soon began talking again. ‘Dinah’ll miss me very much to-night, I should think!’ (Dinah was the cat.) ‘I hope they’ll remember her saucer of milk at tea-time. Dinah my dear! I wish you were down here with me! There are no mice in the air, I’m afraid, but you might catch a bat, and that’s very like a mouse, you know. But do cats eat bats, I wonder?’ And here Alice began to get rather sleepy, and went on saying to herself, in a dreamy sort of way, ‘Do cats eat bats? Do cats eat bats?’ and sometimes, ‘Do bats eat cats?’ for, you see, as she couldn’t answer either question, it didn’t much matter which way she put it. She felt that she was dozing off, and had just begun to dream that she was walking hand in hand with Dinah, and saying to her very earnestly, ‘Now, Dinah, tell me the truth: did you ever eat a bat?’ when suddenly, thump! thump! down she came upon a heap of sticks and dry leaves, and the fall was over.&lt;/p&gt;

&lt;p&gt;Alice was not a bit hurt, and she jumped up on to her feet in a moment: she looked up, but it was all dark overhead; before her was another long passage, and the White Rabbit was still in sight, hurrying down it. There was not a moment to be lost: away went Alice like the wind, and was just in time to hear it say, as it turned a corner, ‘Oh my ears and whiskers, how late it’s getting!’ She was close behind it when she turned the corner, but the Rabbit was no longer to be seen: she found herself in a long, low hall, which was lit up by a row of lamps hanging from the roof.&lt;/p&gt;

&lt;p&gt;There were doors all round the hall, but they were all locked; and when Alice had been all the way down one side and up the other, trying every door, she walked sadly down the middle, wondering how she was ever to get out again.&lt;/p&gt;

&lt;p&gt;Suddenly she came upon a little three-legged table, all made of solid glass; there was nothing on it except a tiny golden key, and Alice’s first thought was that it might belong to one of the doors of the hall; but, alas! either the locks were too large, or the key was too small, but at any rate it would not open any of them.&lt;/p&gt;

&lt;p&gt;However, on the second time round, she came upon a low curtain she had not noticed before, and behind it was a little door about fifteen inches high: she tried the little golden key in the lock, and to her great delight it fitted!&lt;/p&gt;

&lt;p&gt;Alice opened the door and found that it led into a small passage, not much larger than a rat-hole: she knelt down and looked along the passage into the loveliest garden you ever saw. How she longed to get out of that dark hall, and wander about among those beds of bright flowers and those cool fountains, but she could not even get her head though the doorway; ‘and even if my head would go through,’ thought poor Alice, ‘it would be of very little use without my shoulders. Oh, how I wish I could shut up like a telescope! I think I could, if I only know how to begin.’ For, you see, so many out-of-the-way things had happened lately, that Alice had begun to think that very few things indeed were really impossible.&lt;/p&gt;

&lt;p&gt;There seemed to be no use in waiting by the little door, so she went back to the table, half hoping she might find another key on it, or at any rate a book of rules for shutting people up like telescopes: this time she found a little bottle on it, (‘which certainly was not here before,’ said Alice,) and round the neck of the bottle was a paper label, with the words ‘DRINK ME’ beautifully printed on it in large letters.&lt;/p&gt;

&lt;p&gt;It was all very well to say ‘Drink me,’ but the wise little Alice was not going to do that in a hurry. ‘No, I’ll look first,’ she said, ‘and see whether it’s marked “poison” or not’; for she had read several nice little histories about children who had got burnt, and eaten up by wild beasts and other unpleasant things, all because they would not remember the simple rules their friends had taught them: such as, that a red-hot poker will burn you if you hold it too long; and that if you cut your finger very deeply with a knife, it usually bleeds; and she had never forgotten that, if you drink much from a bottle marked ‘poison,’ it is almost certain to disagree with you, sooner or later.&lt;/p&gt;

&lt;p&gt;However, this bottle was not marked ‘poison,’ so Alice ventured to taste it, and finding it very nice, (it had, in fact, a sort of mixed flavour of cherry-tart, custard, pine-apple, roast turkey, toffee, and hot buttered toast,) she very soon finished it off.&lt;/p&gt;

&lt;p&gt;‘What a curious feeling!’ said Alice; ‘I must be shutting up like a telescope.’&lt;/p&gt;

&lt;p&gt;And so it was indeed: she was now only ten inches high, and her face brightened up at the thought that she was now the right size for going through the little door into that lovely garden. First, however, she waited for a few minutes to see if she was going to shrink any further: she felt a little nervous about this; ‘for it might end, you know,’ said Alice to herself, ‘in my going out altogether, like a candle. I wonder what I should be like then?’ And she tried to fancy what the flame of a candle is like after the candle is blown out, for she could not remember ever having seen such a thing.&lt;/p&gt;

&lt;p&gt;After a while, finding that nothing more happened, she decided on going into the garden at once; but, alas for poor Alice! when she got to the door, she found she had forgotten the little golden key, and when she went back to the table for it, she found she could not possibly reach it: she could see it quite plainly through the glass, and she tried her best to climb up one of the legs of the table, but it was too slippery; and when she had tired herself out with trying, the poor little thing sat down and cried.&lt;/p&gt;

&lt;p&gt;‘Come, there’s no use in crying like that!’ said Alice to herself, rather sharply; ‘I advise you to leave off this minute!’ She generally gave herself very good advice, (though she very seldom followed it), and sometimes she scolded herself so severely as to bring tears into her eyes; and once she remembered trying to box her own ears for having cheated herself in a game of croquet she was playing against herself, for this curious child was very fond of pretending to be two people. ‘But it’s no use now,’ thought poor Alice, ‘to pretend to be two people! Why, there’s hardly enough of me left to make one respectable person!’&lt;/p&gt;

&lt;p&gt;Soon her eye fell on a little glass box that was lying under the table: she opened it, and found in it a very small cake, on which the words ‘EAT ME’ were beautifully marked in currants. ‘Well, I’ll eat it,’ said Alice, ‘and if it makes me grow larger, I can reach the key; and if it makes me grow smaller, I can creep under the door; so either way I’ll get into the garden, and I don’t care which happens!’&lt;/p&gt;

&lt;p&gt;She ate a little bit, and said anxiously to herself, ‘Which way? Which way?’, holding her hand on the top of her head to feel which way it was growing, and she was quite surprised to find that she remained the same size: to be sure, this generally happens when one eats cake, but Alice had got so much into the way of expecting nothing but out-of-the-way things to happen, that it seemed quite dull and stupid for life to go on in the common way.&lt;/p&gt;

&lt;p&gt;So she set to work, and very soon finished off the cake.&lt;/p&gt;

&lt;p&gt;By &lt;strong&gt;Lewis Carrol&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An English writer, mathematician, logician, Anglican deacon and photographer, best know for writing about Alice.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Nov 1865 10:18:00 +0000</pubDate>
        <link>http://javierholguera.com/1865/11/26/down-the-rabbit-hole</link>
        <guid isPermaLink="true">http://javierholguera.com/1865/11/26/down-the-rabbit-hole</guid>
        
        <category>fiction</category>
        
        
        <category>casper</category>
        
      </item>
    
      <item>
        <title>Gettysburg Address</title>
        <description>&lt;p&gt;Fourscore and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.&lt;/p&gt;

&lt;p&gt;Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting place for those who here gave their lives that that nation might live. It is altogether fitting and proper that we should do this.&lt;/p&gt;

&lt;p&gt;But, in a larger sense, we can not dedicate-we can not consecrate-we can not hallow-this ground. The brave men, living and dead, who struggled here, have consecrated it, far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us-that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion-that we here highly resolve that these dead shall not have died in vain-that this nation, under God, shall have a new birth of freedom-and that government of the people, by the people, for the people shall not perish from the earth.&lt;/p&gt;

&lt;p&gt;By &lt;strong&gt;Abraham Lincoln&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The 16th president of the USA until he was assassinated in April of 1963. He led the US through its Civil War - its bloodiest and greatest moral, constitutional and political crisis.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Nov 1863 10:18:00 +0000</pubDate>
        <link>http://javierholguera.com/1863/11/19/gettysburg-address</link>
        <guid isPermaLink="true">http://javierholguera.com/1863/11/19/gettysburg-address</guid>
        
        <category>fiction</category>
        
        
        <category>casper</category>
        
      </item>
    
  </channel>
</rss>
